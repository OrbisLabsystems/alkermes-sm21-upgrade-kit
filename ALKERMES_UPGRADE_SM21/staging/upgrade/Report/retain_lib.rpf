{******************************************************************************
*
* Module Name          : RETAIN_LIB
*
* Purpose              : Library to Support RETAIN functionality
*
* Portability          : Not Checked
*
*******************************************************************************
*
* Modification History :
* 
* Version   Date         By             Description
* -------   -----------  ----------     ---------------------------------------
* 1.0       05-Aug-2005  J. O'Neill     Release Version 
*
* 1.1       11-Jul-2013  L. Dawson      Update to receive_retain for balance 
*                                       integration.
* 1.2       14-Feb-2014  A. Finnerty    Balance integration enhancements
*******************************************************************************}

SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILEOPTION DECLARE
ENABLE WINDOWS

JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_CLIENT
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_TRANSFER
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_CLASS

JOIN LIBRARY $lib_utils
JOIN LIBRARY $prompt_imprint

JOIN LIBRARY $LIB_MLPS
JOIN LIBRARY BALANCE_LIB    {1.1}

DECLARE g_instrument_used   { 1.2 }

GLOBAL 
ROUTINE create_retain (VALUE table, 
                       VALUE record_id,
                       VALUE base_date)

{
*               
*
*******************************************************************************}

    DECLARE retain_object

    define_retain_class ()

    CREATE OBJECT "RETAIN", retain_object

    retain_object . table      = table	
    retain_object . record_id  = record_id

    IF base_date <> "" THEN
    
        retain_object . base_date  = base_date
    
    ENDIF
    
    retain_object . get_article_details()

    IF (retain_object . do_retain = TRUE) THEN

        retain_object . generate_identity()

        retain_object . get_retain_date()

        retain_object . create_record()

    ENDIF
        
    retain_object = EMPTY


ENDROUTINE {create_retain}


ROUTINE define_retain_class

{
*    Defines the RETAIN Class Properties and Actions.           
*
*******************************************************************************}

	DEFINE CLASS "RETAIN"

		INITIALISATION
		PROPERTIES
		    "identity"                  ,  { Retain ID                          }
		    "table"                     ,  { Table Name                         }
                    "record_id"                 ,  { Record ID                          }
                    "article_code"              ,  { Article Code                       }
                    "do_retain"                 ,  { Should Retain be Taken             }
                    "retain_interval"           ,  { Length to Retain                   }
		    "quantity"	 	        ,  { Quantity                           } 
		    "created_on"                ,  { Date Record Created                }
		    "created_by"                ,  { Operator who created record        }
		    "retain_until"              ,  { Retained until this date           }
		    "location"                  ,  { Location                           }		    
		    "disposed_on"               ,  { When disposed                      }
		    "disposed_by"               ,  { Operator who disposed              }
		    "group_id"                  ,  { Group Security                     }
		    "text_comment"              ,  { Comment                            }
		    "retain_units"              ,  { Retain units                       }
		    "base_date"                 ,  { Date to form base for calc.        }
		    "analysis_units"            ,  { Units for analysis e.g. tablet     }
		    "anal_unit_per_retain_unit" ,  { e.g. How many tablets in a box     }
		    "min_retain_quantity"       ,  { Minimun amount of tablets required }
		    "status"                    ,  { Status                             }
		    "article"                      { Article ID                         }

		ACTIONS
        
		    "get_article_details"       ,  { Get Article Info                   }
		    "get_retain_date"           ,  { Calculates RETAIN_UNTIL Date       }
		    "generate_identity"         ,  { Create Identity for the record     }
                    "create_record"

 
	END CLASS

ENDROUTINE {define_retain_class}


ROUTINE retain_class_initialisation ( self ) 

{
*    RETAIN Class initialisation routine.                     
*
*******************************************************************************}

		    self . table                     = ""
		    self . record_id                 = ""
		    self . article_code              = ""
                    self . do_retain                 = ""
                    self . retain_interval           = ""
                    self . quantity                  = ""
                    self . created_on                = NOW
                    self . created_by                = GLOBAL("OPERATOR") 
                    self . retain_until              = ""
		    self . location                  = ""
		    self . disposed_on               = ""
		    self . disposed_by               = ""
		    self . group_id                  = ""
		    self . text_comment              = ""
		    self . retain_units              = ""
		    self . base_date                 = NOW
		    self . analysis_units            = ""
		    self . anal_unit_per_retain_unit = ""
		    self . min_retain_quantity       = ""
		    self . status                    = "U"
		    self . article                   = ""

ENDROUTINE {retain_class_initialisation}


ROUTINE retain_action_get_article_details( self)

{
*    Get Product Details
*
*******************************************************************************}


    IF (STRIP(self . table) = "SAMPLE") THEN

        self . article_code = SELECT 'self . table' . material WHERE
                                     id_numeric = self . record_id               
            
    ELSEIF (STRIP(self . table) = "JOB_HEADER") 

        self . article_code = SELECT 'self . table' . material WHERE
                                     job_name = self . record_id               

    ENDIF          

    IF (self . article_code <> EMPTY) THEN


        self . do_retain  = SELECT materials . retain WHERE 
                                   article_code = self . article_code 
    
        self . article                   = SELECT materials . article_code
        self . retain_interval           = SELECT materials . retain_interval
        self . retain_units              = SELECT materials . retain_units        
        self . analysis_units            = SELECT materials . analysis_units
        self . anal_unit_per_retain_unit = SELECT materials . anal_unit_per_retain_unit
        self . min_retain_quantity       = SELECT materials . min_retain_quantity
        self . group_id                  = SELECT materials . group_id

    ENDIF    
     

      
ENDROUTINE {retain_action_get_article_details}


ROUTINE retain_action_generate_identity ( self)

{
*    Generate ID for Retain
*
*******************************************************************************}


    { Decide on a syntax }

    self . identity = RIGHTSTRING("000000" : STRIP(increment ("RETAIN", "RETAIN")), 6)    

      
ENDROUTINE {retain_action_generate_identity}



ROUTINE retain_action_get_retain_date ( self)

{
*    Get Retain Date
*
*******************************************************************************}


    IF (( STRIP(self . retain_interval) = "") OR (self . retain_interval < 0)) THEN 

        self . retain_until = ""

    ELSE

        self . retain_until = self . base_date + self . retain_interval

    ENDIF

      
ENDROUTINE {retain_action_get_retain_date}


ROUTINE retain_action_create_record ( self)

{
*    Create the Retain Record
*
*******************************************************************************}


    DECLARE check_ok, retained

    retained = SELECT retains . record_id 
			WHERE record_id = self . record_id

    RESERVE ENTRY retains, self . identity, check_ok

    IF ((check_ok = EMPTY)AND (retained = EMPTY)) THEN

        ASSIGN retains . table_name                = self . table
        ASSIGN retains . record_id                 = self . record_id
        ASSIGN retains . quantity                  = self . quantity
        ASSIGN retains . created_on                = self . created_on
        ASSIGN retains . created_by                = self . created_by
        ASSIGN retains . retain_until              = self . retain_until
        ASSIGN retains . location                  = self . location
        ASSIGN retains . disposed_on               = self . disposed_on
        ASSIGN retains . disposed_by               = self . disposed_by
        ASSIGN retains . group_id                  = self . group_id
        ASSIGN retains . text_comment              = self . text_comment
        ASSIGN retains . status                    = self . status
        ASSIGN retains . retain_units              = self . retain_units
        ASSIGN retains . units                     = self . analysis_units
        ASSIGN retains . min_retain_quantity       = self . min_retain_quantity 
        ASSIGN retains . anal_unit_per_retain_unit = self . anal_unit_per_retain_unit
        ASSIGN retains . article_code              = self . article

      IF NOT transaction_is_write() THEN
	   
           START WRITE TRANSACTION "Create Retain Record"		   

           UPDATE retains
        
           retain_history (self.identity, "LOGIN", self.quantity, self.text_comment)		
		   
		  COMMIT
		   
        ELSE

           UPDATE retains
        
           retain_history (self.identity, "LOGIN", self.quantity, self.text_comment)

   
	   		
	ENDIF
    
    ELSE

        {Write to Log File }

    ENDIF


      
ENDROUTINE {retain_action_create_record}


{*******************************************************************************
*
*  Retain Processing - Explorer Handling
*
********************************************************************************}

ROUTINE dispose_retain_rmb (rmb_object, 
                            object, 
                            data)

{
*  RMB option for disposal of Retain.
*
*******************************************************************************}

    DECLARE the_record, 
            no_records, 
            retain_record,
            the_table

    no_records = data . size()

    the_table = data . table

    data . set_first ()

    WHILE ((data . current_position <= no_records) AND ( data . current_position > 0 )) DO

        the_record = data . get_by_number (data . current_position)

        retain_record = SELECT 'the_table' . identity IN OBJECT the_record

        dispose_retain (retain_record)

        data . set_next()
    
    ENDWHILE
 


ENDROUTINE {dispose_retain_rmb}

{******************************************************************************}


ROUTINE move_retain_rmb (rmb_object, 
                         object, 
                         data)

{
*  RMB option for Chaging Retain Location
*
*******************************************************************************}

    DECLARE the_record, 
            no_records, 
            retain_record,
            the_table,
            new_location,
            ok

    ok = GET_IDENTITY (new_location,
                       GET_USER_MESSAGE("RETAIN_LIB_SELECT_LOCATION", 1),
                       GET_USER_MESSAGE("RETAIN_LIB_CHANGE_LOCATION", 1),
                       "LOCATION", 
                       "")
    
    IF ok THEN

        the_table = data . table

        no_records = data . size()

        data . set_first ()

        WHILE ((data . current_position <= no_records) AND ( data . current_position > 0 )) DO

            the_record = data . get_by_number (data . current_position)

            retain_record = SELECT 'the_table' . identity IN OBJECT the_record

            move_retain (retain_record, new_location)

            data . set_next()
    
        ENDWHILE
 


    ENDIF

ENDROUTINE {move_retain_rmb}



ROUTINE move_retain (VALUE retain_id, 
                     VALUE location_id)


    DECLARE retain_record

    retain_record = SELECT retains . identity FOR UPDATE WHERE
                           identity = retain_id

    IF (retain_record <> EMPTY ) THEN

        IF NOT transaction_is_write() THEN


            START WRITE TRANSACTION "Move Retain"

            ASSIGN retains . location = location_id

            UPDATE retains

            COMMIT

        ELSE


            ASSIGN retains . location = location_id

            UPDATE retains

        ENDIF

    ENDIF

ENDROUTINE {move_routine}


ROUTINE remove_retain_rmb (rmb_object, 
                            object, 
                            data)

{
*  RMB option for removal of a portion of the retain
*
*******************************************************************************}

   DECLARE the_record, 
            no_records, 
            retain_record,
            the_table

    the_table = data . table

    no_records = data . size()

    data . set_first ()

    WHILE ((data . current_position <= no_records) AND ( data . current_position > 0 )) DO

        the_record = data . get_by_number (data . current_position)

        retain_record = SELECT 'the_table' . identity IN OBJECT the_record

        remove_retain (retain_record)

        data . set_next()
    
    ENDWHILE
 
 


ENDROUTINE {remove_retain_rmb}

{******************************************************************************}

ROUTINE receive_retain_rmb (rmb_object, 
                            object, 
                            data)

{
*  RMB option for receiving of Retain.
*
*******************************************************************************}

    DECLARE the_record, 
            no_records, 
            retain_record,
            the_table

    the_table = data . table

    no_records = data . size()

    data . set_first ()

    WHILE ((data . current_position <= no_records) AND ( data . current_position > 0 )) DO

        the_record = data . get_by_number (data . current_position)

        retain_record = SELECT 'the_table' . identity IN OBJECT the_record

        receive_retain (retain_record)

        data . set_next()
    
    ENDWHILE



ENDROUTINE {receive_retain_rmb}

{******************************************************************************}

{*******************************************************************************
*
*  Retain Processing - Main
*
********************************************************************************}

GLOBAL ROUTINE retain_history (VALUE the_identity, VALUE the_action_type, 
                               VALUE the_qty_removed, VALUE the_comment)

{
*  Writes a retain history record to the database
*
*******************************************************************************}

    DECLARE the_action_no,
            check_ok,
            field_length
    
    {Get next sequence number for the retain record}

    the_action_no = SELECT MAX retain_history . action_no WHERE
                              identity = the_identity
                      
    IF (the_action_no = EMPTY) THEN                     

        the_action_no = 1

    ELSE

        the_action_no = PACKED_DECIMAL(the_action_no + 1)

    ENDIF
    
    {Write history entry to the database}    

    GET_FIELD_DETAILS retain_history.identity, "FIELD_SIZE", field_length   
    
    RESERVE ENTRY retain_history, PAD(the_identity," ",field_length):the_action_no, check_ok
                
    IF (check_ok = EMPTY) THEN

        ASSIGN retain_history . action_type  = the_action_type
        ASSIGN retain_history . qty_removed  = the_qty_removed
        ASSIGN retain_history . text_comment = the_comment
        ASSIGN retain_history . action_on    = NOW
        ASSIGN retain_history . action_by    = GLOBAL("OPERATOR")
    
        UPDATE retain_history
                    
    ELSE
		         
        flashmessage(check_ok, TRUE)        
		         
    ENDIF
        
ENDROUTINE {retain_history}


ROUTINE receive_retain (VALUE retain_record)

{
*  Changes the status of retain from U (Unreceived) to V (Available) and
*  prompts for,
*
*      1. Quantity retained
*      2. Storage location
*
*******************************************************************************}

    DECLARE status,
            quantity,
            text_comment,
            receive_form,
            quantity_prompt,
            location_prompt,
            box_prompt,
            location,
            box_no,
            unit,
            conversion_factor,
            params              {1.1}
    
    g_instrument_used = ERROR { 1.2 }
        
    status = SELECT retains . status WHERE 
                    identity = retain_record
                    
    unit   = STRIP(SELECT retains . retain_units)

    conversion_factor = SELECT retains . anal_unit_per_retain_unit

    IF (STRIP(status) = "U") THEN
    
        CREATE OBJECT PROMPT_CLASS_FORM, receive_form
	  
	receive_form . height = 3
	receive_form . width = 40
	receive_form . row = 4
	receive_form . column = 2
	receive_form . border = TRUE
	receive_form . header = GET_USER_MESSAGE("RETAIN_LIB_RECEIVE_RETAIN", 1)
	receive_form . active_prompt = 1
        receive_form . return_behaviour = FORM_RETURN_STAY
	
{1.1}
      IF GLOBAL("ORBIS_RR_BALANCE_INTEGRATED") THEN

          ARRAY params  ARRAYSIZE(0)
          params[1] = "999.99999"                        { Text format string }
          params[2] = GLOBAL("ORBIS_BALANCE_CRITERIA")   { Saved criteria     }
          params[3] = STRIP(SELECT retains . retain_units)

          PROMPT OBJECT quantity_prompt 
	    BROWSE ON REAL
          ON LINE 1 FROM 13 TO 30 
	    WITH (display_only= GLOBAL("ORBIS_RETAIN_READ_ONLY_BALANCE")  , 
	          always_validate=TRUE,
		    browse_routine="read_inst_browse",
                user_info = params )
      
      ELSE

          PROMPT OBJECT quantity_prompt
	    FORMAT REAL
	    WITH (minimum=1)
	    ON LINE 1 FROM 13 TO 35

      ENDIF
{/1.1}
	  	  
	PROMPT OBJECT location_prompt
	BROWSE ON LOCATION
	ON LINE 2 FROM 13 TO 35

	PROMPT OBJECT box_prompt
	FORMAT TEXT
	ON LINE 3 FROM 13 TO 35
	  
	receive_form . add_prompt(quantity_prompt)
	receive_form . add_prompt(location_prompt)
	receive_form . add_prompt(box_prompt)
	  
	receive_form . add_display(GET_USER_MESSAGE("RETAIN_LIB_QUANTITY", 1) , 1 , 1, PROMPT_RENDITION_BOLD)
	receive_form . add_display( unit                                      , 35, 1, PROMPT_RENDITION_BOLD)
	receive_form . add_display(GET_USER_MESSAGE("RETAIN_LIB_LOCATION", 1) , 1 , 2, PROMPT_RENDITION_BOLD)
	receive_form . add_display(GET_USER_MESSAGE("RETAIN_LIB_BOX_NO"  , 1)  ,1 , 3, PROMPT_RENDITION_BOLD)
	  
	receive_form . start_prompt()
	receive_form . wait_prompt()
	receive_form . end_prompt()
	  
	IF receive_form . get_lastkey () = "DO" THEN
	  	  
	    quantity     = receive_form . prompt_objects[1] . text
	    location     = receive_form . prompt_objects[2] . text
	    box_no       = receive_form . prompt_objects[3] . text

	    text_comment = ""
	    
            IF (conversion_factor = 0) THEN

                quantity = quantity

            ELSE

                quantity = ( conversion_factor * quantity )

            ENDIF

            status = SELECT retains . status FOR UPDATE WHERE 
                            identity = retain_record 

            IF ( status <> EMPTY ) THEN
 
                ASSIGN retains . status             = "V"
                ASSIGN retains . quantity_retained  = quantity
                ASSIGN retains . quantity           = quantity 
                ASSIGN retains . location           = location
                ASSIGN retains . box_no             = box_no
                ASSIGN retains . received_on        = NOW
                ASSIGN retains . received_by        = GLOBAL("OPERATOR")

                IF (g_instrument_used <> ERROR) THEN

                    ASSIGN retains . qty_ret_instrument = g_instrument_used    { 1.2 }
                    ASSIGN retains . qty_instrument     = g_instrument_used    { 1.2  because quantity also set }
                ENDIF

                START WRITE TRANSACTION "Update Retain Record"
 
                UPDATE retains
            
                retain_history (retain_record, "RECEIVE", quantity, text_comment)
            
                COMMIT 
 
            ELSE

                flash_message(GET_USER_MESSAGE("RETAIN_LIB_ERROR_UPDATING", 1), true)

            ENDIF                    
        
        ENDIF

    ELSE
       
        flash_message(GET_USER_MESSAGE("RETAIN_LIB_INCORRECT_STATUS", 1), true)

    ENDIF

ENDROUTINE {receive_retain}

{******************************************************************************}

ROUTINE dispose_retain (VALUE retain_record)

{
*  Changes retain status to D (Disposed) and updates the disposed_on and 
*  disposed_by fields. Also sets the quantity to 0
*
*******************************************************************************}

    DECLARE quantity,
            text_comment,
            status

    status = SELECT retains . status 
                  WHERE identity = retain_record
                  
    quantity = SELECT retains . quantity
    
    IF (strip(status) = "V") THEN

        status = SELECT retains . status FOR UPDATE
                 WHERE identity = retain_record 

        IF ( status <> EMPTY ) THEN
                    
            text_comment = ""

            ASSIGN retains . status       = "D"
            ASSIGN retains . quantity     = 0
            ASSIGN retains . disposed_on  = NOW
            ASSIGN retains . disposed_by  = GLOBAL("OPERATOR")
   
            START WRITE TRANSACTION "Update Retain Record"

            UPDATE retains
            
            retain_history (retain_record, "DISPOSE", quantity, text_comment)
            
            COMMIT 

        ELSE

            flash_message(GET_USER_MESSAGE("RETAIN_LIB_ERROR_UPDATING", 1), true)

        ENDIF

    ELSE

        flash_message(GET_USER_MESSAGE("RETAIN_LIB_INCORRECT_STATUS", 1), true)

    ENDIF

ENDROUTINE {dispose_retain}


{******************************************************************************}

ROUTINE remove_retain (VALUE retain_record)

{
*  Decrements the quantity field by amount prompted
*  
*
*******************************************************************************}

    DECLARE quantity,
            text_comment,
            remove_form,
            new_quantity,
            status,
            quantity_prompt,
            comment_prompt,
            remove_quantity,
            min_retain_quantity,
            unit
            

    status    = SELECT retains . status WHERE 
                       identity = retain_record 
               
    quantity  = SELECT retains . quantity     
                 
    unit      = STRIP (SELECT retains . units)
    
    min_retain_quantity = SELECT retains . min_retain_quantity
    
    IF (strip(status) = "V") THEN    
    
        CREATE OBJECT PROMPT_CLASS_FORM, remove_form
    	  
    	remove_form . height = 2
    	remove_form . width = 50
    	remove_form . row = 4
    	remove_form . column = 2
    	remove_form . border = TRUE
    	remove_form . header = GET_USER_MESSAGE("RETAIN_LIB_REMOVE_RETAIN", 1)
    	remove_form . active_prompt = 1
        remove_form . return_behaviour = FORM_RETURN_STAY
    	  
    	PROMPT OBJECT quantity_prompt
    	FORMAT REAL
    	WITH (minimum=1)
    	ON LINE 1 FROM 13 TO 45
    	  	  
    	PROMPT OBJECT comment_prompt
    	FORMAT TEXT	  
	WITH (length=50)
    	ON LINE 2 FROM 13 TO 255
    	  
    	remove_form . add_prompt(quantity_prompt)
    	remove_form . add_prompt(comment_prompt)
    	  
    	remove_form . add_display(GET_USER_MESSAGE("RETAIN_LIB_QUANTITY", 1), 1 , 1, PROMPT_RENDITION_BOLD)
        remove_form . add_display(unit                                      , 30, 1, PROMPT_RENDITION_BOLD)
    	remove_form . add_display(GET_USER_MESSAGE("RETAIN_LIB_COMMENT" , 1), 1 , 2, PROMPT_RENDITION_BOLD)
    	 
    	remove_form . start_prompt()
    	remove_form . wait_prompt()
    	remove_form . end_prompt()
    	 
    	IF ( remove_form . get_lastkey () = "DO") THEN
    	  	  
    	    remove_quantity = remove_form . prompt_objects[1] . text    	      
	    text_comment    = remove_form . prompt_objects[2] . text

            status = SELECT retains . status FOR UPDATE WHERE 
                            identity = retain_record 

            IF ( status <> EMPTY ) THEN                        
            
                IF (quantity < remove_quantity) THEN
            
                    flash_message(GET_USER_MESSAGE("RETAIN_LIB_QUANTITY_EXCEEDED", 1), true)
            
                ELSE
   
                    new_quantity = (quantity - remove_quantity)
                    
                    {Warn if below min limit}
                    
                    IF (new_quantity < min_retain_quantity) THEN
		    
		            flash_message(GET_USER_MESSAGE("RETAIN_LIB_MIN_QUANTITY_EXCEEDED", 1), true)
		            
		            ASSIGN retains . min_qty = FALSE
		    
                    ENDIF
                    
                    {If the retain quantity goes to 0 mark as disposed}

                    IF (new_quantity = 0) THEN

                        flash_message (GET_USER_MESSAGE("RETAIN_LIB_AUTO_DISPOSED_MESSAGE", 1), true)

                        ASSIGN retains . status = "D"
                        ASSIGN retains . disposed_on  = NOW
                        ASSIGN retains . disposed_by  = GLOBAL("OPERATOR")

                    ENDIF
                    
                    ASSIGN retains . quantity     = new_quantity
   
                    START WRITE TRANSACTION "Update Retain Record"

                    UPDATE retains
            
                    retain_history (retain_record, "REMOVE", remove_quantity, text_comment)
            
                    COMMIT
                
                ENDIF

            ELSE

                flash_message(GET_USER_MESSAGE("RETAIN_LIB_ERROR_UPDATING", 1), true)

            ENDIF
            
        ENDIF
        
    ELSE

        flash_message(GET_USER_MESSAGE("RETAIN_LIB_INCORRECT_STATUS", 1), true)

    ENDIF

ENDROUTINE {remove_retain}


{*****************************************************************************}

ROUTINE retain ( batch_login )
{
*
*   Called by the RETAIN rule in the sample plan
*
******************************************************************************}

    DECLARE the_job,
            the_table,
            the_login_date



    the_job = SELECT job_header . job_name

    the_login_date = SELECT job_header . date_created




    IF (STRIP(the_job) <> "") THEN

        the_table = "JOB_HEADER"

        CALL_ROUTINE "create_retain" 
        USING the_table, 
              the_job,
              the_login_date 
        IN LIBRARY "RETAIN_LIB" 
	 NEW TRANSACTION

    ENDIF


    RETURN ( FALSE )  {Never Assigns any Analysis}

ENDROUTINE

{1.1, 1.2 enhancements }
{*****************************************************************************}
ROUTINE read_inst_browse (self)

{
*
*  Read value from balance 
*
******************************************************************************}

	g_instrument_used = or_balance_browse1 (self)
	
ENDROUTINE { read_inst_browse }

{/1.1}
{/1.2}

{*****************************************************************************}

