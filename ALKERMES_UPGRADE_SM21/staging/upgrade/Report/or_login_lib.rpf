{******************************************************************************
*
* Module Name	: OR_LOGIN_LIB
* Purpose	: generic login routines
*
* Portability	: Not Checked
*
* Author	: Aidan Finnerty
*
* Date created	: 8-Jul-2011
*
* Version	: 1.0
*
*******************************************************************************
*
* Modification History :
* 
* Version	Date		 By 			Description
* -------	-----------  ---------- 	---------------------------------------
* 1.0	08-Jul-2011  A. Finnerty	 Initial
*
*******************************************************************************}
 

SET NAME "DEFER/"
ENABLE WINDOWS

SET NOTPROTECTED

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_WINDOW
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_LOGIN
JOIN LIBRARY $lib_utils
JOIN LIBRARY $LIB_TEST
JOIN LIBRARY $samp_job


GLOBAL ROUTINE or_create_sample (VALUE job_to_use, VALUE samp_tmpl, array_flds)

    DECLARE samp, sample_login, i, started_trans

    started_trans = FALSE

    IF (NOT transaction_is_write ()) THEN

        started_trans = TRUE
        START WRITE TRANSACTION "auto login sample"

    ENDIF

    samp_job_initialise()

    CREATE OBJECT SAMP_JOB_SAMPLE_LOGIN_CLASS, sample_login
    sample_login . template_id = samp_tmpl
    sample_login . job_name    = job_to_use
    sample_login . use_current_transaction = TRUE

{
   sample_login . repeat_count            = 1
   sample_login . user_add_tests          = TRUE
}

    { to set fields }

    IF (array_flds <> EMPTY) THEN

        i = 0

        WHILE (i < SIZE_OF_ARRAY (array_flds)) DO

             i = i + 1

            lib_utils_set_field_value( sample_login . field_values, 
                                       array_flds [i,1]   ,
                                       array_flds [i,2]  )

        ENDWHILE

    ENDIF


    samp = sample_login . login_a_sample()

    IF (started_trans) THEN

        COMMIT

    ENDIF

    RETURN (samp)

ENDROUTINE  { or_create_sample }


{
  Login job. If job_id="", it doesnt attempt to set name
}
GLOBAL ROUTINE or_create_job (VALUE job_id, VALUE job_template, array_flds)

    DECLARE job, job_obj, i, started_trans

    started_trans = FALSE

    IF (NOT transaction_is_write ()) THEN

        started_trans = TRUE
        START WRITE TRANSACTION "auto login job"

    ENDIF

    samp_job_initialise()

    CREATE OBJECT SAMP_JOB_JOB_LOGIN_CLASS, job_obj
    
    IF (job_id <> "") THEN

        job_obj . job_identity    = job_id

    ENDIF

    job_obj . use_current_transaction = TRUE
    job_obj . dont_confirm = TRUE
    job_obj . job_template            = job_template
    job_obj . repeat_count            = 0
    job_obj . samples_for_job        = FALSE


    { to set fields }

    IF (array_flds <> EMPTY) THEN

        i = 0

        WHILE (i < SIZE_OF_ARRAY (array_flds)) DO

             i = i + 1

            lib_utils_set_field_value( job_obj . field_values, 
                                       array_flds [i,1]   ,
                                       array_flds [i,2]  )

        ENDWHILE

    ENDIF


    job = job_obj . login_a_job ()

    IF (started_trans) THEN

        COMMIT

    ENDIF

    RETURN (job)

ENDROUTINE  { or_create_job  }


{ array_analyses is 2d [analysis, comp. list]
  Return FALSE if error
}
GLOBAL ROUTINE or_add_tests_to_sample ( VALUE sample_id , array_analyses )

	DECLARE test_list, started_trans, status

	status = TRUE
	started_trans = FALSE

	IF (NOT transaction_is_write ()) THEN

		started_trans = TRUE
		START WRITE TRANSACTION "auto login sample"

	ENDIF


	IF test_editor_initialise ( sample_id                    ,
	                            FALSE                        ,
	                            FALSE                        ,
	                            TRUE                         ,
	                            global ( "CURRENT_LIBRARY" ) ,
	                            test_list                    ) THEN

		test_list_from_array ( array_analyses, test_list )

		IF (NOT assign_the_tests ( test_list )) THEN

                    status = FALSE

                ENDIF

		test_editor_release ( test_list )

	ELSE

		status = FALSE

	ENDIF

        IF (started_trans AND status) THEN

            COMMIT

        ELSEIF (started_trans AND NOT status) THEN

            ROLLBACK

        ENDIF

	RETURN ( status )

ENDROUTINE


{ array_tests is 2d [analysis, comp. list ]
}
ROUTINE test_list_from_array ( array_tests, test_list )

	DECLARE i, analver

        i = 0

	WHILE ( i < size_of_array (array_tests) ) DO

		i = i + 1

		test_editor_pre_insert ( i, test_list  )

		ASSIGN test . analysis         = array_tests [i, 1]
                analver = lib_utils_highest_version ( "VERSIONED_ANALYSIS",
                               array_tests [i, 1] )

                IF (analver=EMPTY) THEN

                    analver=1

                ENDIF

		ASSIGN test . analysis_version = analver
            ASSIGN test . component_list = array_tests [i, 2]

		test_editor_set_assign ( TRUE      , test_list )

	ENDWHILE

ENDROUTINE


ROUTINE assign_the_tests ( test_list )

	DECLARE tests_added

	CALL_ROUTINE "test_post_assignment"
		USING test_list
       		IN LIBRARY "$SAMP_USER"

	test_editor_assign (GET_USER_MESSAGE("LIB_TEST_TEST_1" ,1), test_list )
	tests_added = test_editor_get_size ( test_list ) <> 0

	UPDATE sample

	RETURN ( tests_added )

ENDROUTINE


{
  array_analysis_fields is 2d [field,value]. first 2 are the keys.
  array_comp_fields is 3d [comp, field,name], has row for each component. [x,1,y]=name field
  array_comp_lists has is 2d, row for each componet list. First column is list name,
   the rest are the components

  If no transaction open, it opens and (only then) commits/rollbacks
}
GLOBAL ROUTINE or_create_analysis (array_analysis_fields, array_comp_fields, array_comp_lists)

    DECLARE check_ok, status, key, i, comp_cnt, anal, analver, comp, complist,
        started_trans

    status = EMPTY

    started_trans = FALSE

    IF (NOT transaction_is_write ()) THEN

        START WRITE TRANSACTION "create analysis"
        started_trans = TRUE

    ENDIF

    { analysis }
    
    IF (status = EMPTY) THEN

        anal = STRIP(array_analysis_fields [1,2])
        analver = STRIP(array_analysis_fields [2,2])

        key = PAD (anal, " ", get_fld_len ("versioned_analysis","identity")):
          PAD (analver, " ", get_fld_len ("versioned_analysis","analysis_version"))

        RESERVE ENTRY versioned_analysis, key, check_ok

        IF (check_ok = EMPTY) THEN

            i = 2

            WHILE (i<size_of_array(array_analysis_fields)) DO

                i = i + 1
                ASSIGN versioned_analysis . 'array_analysis_fields [i,1]' = array_analysis_fields [i,2]

            ENDWHILE

            UPDATE versioned_analysis

        ELSE

            status = "Error creating analysis ":STRIP(key):".  ":check_ok

        ENDIF

    ENDIF

    { components }

    IF (status = EMPTY) THEN

       comp_cnt = 0

       WHILE (status=EMPTY) AND
             (comp_cnt < size_of_array (array_comp_fields)) DO

            comp_cnt = comp_cnt + 1
            comp = array_comp_fields [comp_cnt,1, 2]

            key = PAD (anal, " ", get_fld_len ("versioned_analysis","identity")):
                  PAD (analver, " ", get_fld_len ("versioned_analysis","analysis_version")):
                  PAD (comp, " ", get_fld_len ("versioned_component","name"))
    
            RESERVE ENTRY versioned_component, key, check_ok

            IF (check_ok = EMPTY) THEN

                i = 2

                WHILE (status=EMPTY) AND
                      (array_comp_fields [comp_cnt, i, 1] <> EMPTY) DO

                    ASSIGN versioned_component . 'array_comp_fields [comp_cnt, i, 1]' =
                           array_comp_fields [comp_cnt, i, 2]

                    i = i + 1

                ENDWHILE

                UPDATE versioned_component

            ELSE

                status = "Error creating component ":STRIP(key):".  ":check_ok

            ENDIF

       ENDWHILE

    ENDIF

    { component lists }

    IF (status = EMPTY) THEN

       comp_cnt = 0

       WHILE (status=EMPTY) AND
             (comp_cnt < size_of_array (array_comp_lists)) DO

            comp_cnt = comp_cnt + 1
            complist = array_comp_lists [comp_cnt,1]

            key = PAD (anal, " ", get_fld_len ("versioned_analysis","identity")):
                  PAD (analver, " ", get_fld_len ("versioned_analysis","analysis_version")):
                  PAD (complist, " ", get_fld_len ("versioned_c_l_header","comp_list"))
    
            RESERVE ENTRY versioned_c_l_header, key, check_ok

            IF (check_ok = EMPTY) THEN

                ASSIGN versioned_c_l_header . description = "Created automatically"
                UPDATE versioned_c_l_header

                i = 2

                WHILE (status=EMPTY) AND
                       (array_comp_lists [comp_cnt,i] <> EMPTY) DO

                    comp = array_comp_lists [comp_cnt,i]

                    key = PAD (anal, " ", get_fld_len ("versioned_analysis","identity")):
                          PAD (analver, " ", get_fld_len ("versioned_analysis","analysis_version")):
                          PAD (complist, " ", get_fld_len ("versioned_c_l_header","comp_list")):
                          PAD (comp, " ", get_fld_len ("versioned_c_l_entry","name"))
    
                     RESERVE ENTRY versioned_c_l_entry, key, check_ok

                     IF (check_ok = EMPTY) THEN

                         ASSIGN versioned_c_l_entry . order_number = i-1
                         UPDATE versioned_c_l_entry

                     ELSE

                        status = "Error creating component list entry ":STRIP(key):
                          ".  ":check_ok

                     ENDIF

                    i = i + 1

                ENDWHILE

            ELSE

                status = "Error creating component list ":STRIP(key):".  ":check_ok

            ENDIF

       ENDWHILE

    ENDIF


    { if started transaction here, complete it }

    IF (started_trans) THEN

        IF (status = EMPTY) THEN

            COMMIT

        ELSE

            ROLLBACK

        ENDIF

    ENDIF

    RETURN (status)

ENDROUTINE


ROUTINE get_fld_len (VALUE tbl_name, VALUE fld_name)

    DECLARE wid

    GET_FIELD_DETAILS 'tbl_name' . 'fld_name', "FIELD_SIZE", wid

    RETURN (wid)

ENDROUTINE