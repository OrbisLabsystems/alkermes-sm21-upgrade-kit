{******************************************************************************
*
* Module Name   : $LTE_TEM
*
* Purpose       : Template report for setting up a laboratory table editor
*
* Document Ref. : SE/T/TVGL-WORK-REPORTS/1/3
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************
*
* Modification History :
* 
* Version   Date         By             Description
* -------   -----------  ----------     ---------------------------------------
* 1.0       07-Dec-2012  M Flattery   Stabililty Reports Ref CC NO. CC-ATH-2012-0590 
*******************************************************************************}



{

  INTRODUCTION
  This report is the skeleton for creating table maintainance routines.
  It is intended to be used with the simpler laboratory tables and
  user defined tables. The data entry screen generated will not support
  list type entry screens such as the component editor.

  The following functions will be provided by this report:

      Add/Modify, Display, Print, List, Remove/Unremove

  Reports to support tables are generated by another setup report which
  will copy this report into a supplied name and then allow modification
  of the copy for the table required. Once modified the functions
  generated can be tested from the generic menu.

  The fields displayed on the data entry screen are defined by entering
  values into parameters in this report.

  Once a report has been created then it can be tested using the generic
  menu provided as part of the setup environment.

  ASSOCIATED FILES
        $LABSETUP.RPF  - Setup Report.
        $LABTABLIB.RPF - Library Report containing main routines.
        $LTE_TEM.RPF   - Skeleton Lab Table Report.(This file)


  SETUP DETAILS
  To customise this report for a table a number of variables and
  arrays must be setup in this report. To assist in this a copy
  of the messages file (MESSAGES.PRN) and the structure file (STRUCTURE.TXT)
  will be required.

  The areas of the report to be modified are indicated by comments and
  all occurrences of **** must be replaced with the required values. Note
  that some variables have been given default values which may also require
  changing.

}

{ --------------------------------------------------------------------------- }

{ --------------- Initialization Statements : DO NOT CHANGE ----------------- }

ENABLE WINDOWS
SET NAME "DISPLAY/"


JOIN LIBRARY LABTABLIB
JOIN STANDARD_LIBRARY STD_BROWSE

{dk} do_the_work("add_ident")

{ --------------------------------------------------------------------------- }


{ -------------------------- Table Setup Routine ---------------------------- }

ROUTINE table_setup

        ARRAY prompt_details    ARRAY_SIZE ( 0 , 6 )
        ARRAY fields_to_output  ARRAY_SIZE ( 0 )

{

        CHANGE : Specify the name of the table in <name_of_table>
                 eg   name_of_table = "HAZARD"

}

        name_of_table           =  "STAB_PRODUCT_INFO"

{

        CHANGE : MANDATORY : Specify the text to be displayed at the top
                 of the data entry screen in <header_mess>.
                 Note that the text may be specified literally
                 eg   header_mess = "Hazard Data Entry Screen"
                 or may be extracted from the message file
                 eg   header_mess = GET MESSAGE(xyz)

}

        header_mess = "Stability Product information Data Entry Screen"

{

        CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <footer_mess> for the options
                 add , copy , modify but not display.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press DO to Save / EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

        footer_mess = "Press DO to Save / EXIT to Quit"

{

        CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <display_footer_mess> for the
                 display option.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

        display_footer_mess = "Press DO to Save / EXIT to Quit"

{

        CHANGE : MANDATORY : Specify the names of the fields and the
                 text associated with each field to be displayed on the
                 screen.
                 For each field the field name is stored in an element
                 of array <prompt_details> with an index of FIELD_NAME_POSITION
                 and the message stored with an index of MESSAGE_POSITION.
                 This array will require expanding for the total number
                 of fields required on the screen.

                 e.g
                prompt_details [ 1 , MESSAGE_POSITION    ] = "Group Name"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "GROUP_ID"

                prompt_details [ 1 , MESSAGE_POSITION    ] = "Hazard Label Text"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "LABEL_TEXT"

                prompt_details [ 1 , MESSAGE_POSITION    ] = "Description"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "DESCRIPTION"

                prompt_details [ 1 , MESSAGE_POSITION    ] = "Modifiable Entry"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "MODIFIABLE"

                The text may be specified literally as shown above
                or extracted from the message file using GET MESSAGE

}

                prompt_details [ 1 , MESSAGE_POSITION    ] = "Product Details"
                prompt_details [ 1 , FIELD_NAME_POSITION ] = "PRODUCT"

{

        move the comments braces to allow use of these statements

}

{

                prompt_details [ 2 , MESSAGE_POSITION    ] = "****"
                prompt_details [ 2 , FIELD_NAME_POSITION ] = "****"

                prompt_details [ 3 , MESSAGE_POSITION    ] = "****"
                prompt_details [ 3 , FIELD_NAME_POSITION ] = "****"

                prompt_details [ 4 , MESSAGE_POSITION    ] = "****"
                prompt_details [ 4 , FIELD_NAME_POSITION ] = "****"

}
                prompt_details [ 2 , MESSAGE_POSITION    ] = "Lot Number"
                prompt_details [ 2 , FIELD_NAME_POSITION ] = "LOT_NO"
{added bulk number 14/12/10 MA}
                prompt_details [ 3 , MESSAGE_POSITION    ] = "Bulk Number"
                prompt_details [ 3 , FIELD_NAME_POSITION ] = "BULK_NUMBER"

                prompt_details [ 4 , MESSAGE_POSITION    ] = "Strength"
                prompt_details [ 4 , FIELD_NAME_POSITION ] = "STRENGTH"    

                prompt_details [ 5 , MESSAGE_POSITION    ] = "S.I. No."
                prompt_details [ 5 , FIELD_NAME_POSITION ] = "S_I_no"     
{added stab protocol no 14/12/10 MA}
                prompt_details [ 6 , MESSAGE_POSITION    ] = "Stability Protocol No."
                prompt_details [ 6 , FIELD_NAME_POSITION ] = "STAB_PROTOCOL_NO"

                prompt_details [ 7 , MESSAGE_POSITION    ] = "Study Type"
                prompt_details [ 7 , FIELD_NAME_POSITION ] = "STUDY_TYPE"

                prompt_details [ 8 , MESSAGE_POSITION    ] = "Study Start Time"
                prompt_details [ 8 , FIELD_NAME_POSITION ] = "STUDY_START"

                prompt_details [ 9 , MESSAGE_POSITION    ] = "Study Expiry Date"
                prompt_details [ 9 , FIELD_NAME_POSITION ] = "EXPIRY_DATE"

                prompt_details [ 10 , MESSAGE_POSITION    ] = "Manufacture Date"
                prompt_details [ 10, FIELD_NAME_POSITION ] = "DATE_OF_MANUFACTURE"

                prompt_details [ 11 , MESSAGE_POSITION    ] = "Manufacturing Site"
                prompt_details [ 11 , FIELD_NAME_POSITION ] = "MANUFACTURING_SITE"

                prompt_details [ 12, MESSAGE_POSITION    ] = "Date of Packaging"
                prompt_details [ 12, FIELD_NAME_POSITION ] = "PACKAGING_DATE"
                                                             
                prompt_details [ 13 , MESSAGE_POSITION    ] = "Packaging Site"
                prompt_details [ 13 , FIELD_NAME_POSITION ] = "PACKAGING_SITE"    

                prompt_details [ 14, MESSAGE_POSITION    ] = "Raw Material Lot"
                prompt_details [ 14, FIELD_NAME_POSITION ] = "RAW_MATERIAL_LOT"

                prompt_details [ 15, MESSAGE_POSITION    ] = "Source of Raw Material"
                prompt_details [ 15, FIELD_NAME_POSITION ] = "RAW_MATERIAL_SOURCE"

                prompt_details [ 16, MESSAGE_POSITION    ] = "Drug Substance"
                prompt_details [ 16, FIELD_NAME_POSITION ] = "DRUG_SUBSTANCE"

                prompt_details [ 17, MESSAGE_POSITION    ] = "Batch Size"
                prompt_details [ 17, FIELD_NAME_POSITION ] = "BATCH_SIZE"

                prompt_details [ 18, MESSAGE_POSITION    ] = "Packaging"
                prompt_details [ 18, FIELD_NAME_POSITION ] = "PACKAGING"

{removed fields 14/12/10 for individual packaging for generic packaging field}


{Added in fields 28-30 on 30/04/01}
{MK  Reference CC2001-043          }
                                                                                
                prompt_details [ 19, MESSAGE_POSITION    ] = "COA Id"       
                prompt_details [ 19, FIELD_NAME_POSITION ] = "COA_ID"       
                                                                                
                prompt_details [ 20, MESSAGE_POSITION    ] = "T-0 Id"
                prompt_details [ 20, FIELD_NAME_POSITION ] = "T0_ID"

 {                                                                               
                prompt_details [ 30, MESSAGE_POSITION    ] = "Initial Weight"   
                prompt_details [ 30, FIELD_NAME_POSITION ] = "INITIAL_WEIGHT"   
   }                               

		prompt_details [ 21, MESSAGE_POSITION    ] = "Report Comment"   
                prompt_details [ 21, FIELD_NAME_POSITION ] = "REPORT_COMMENT"                                          
{Added in 'Reviewed By' field on 02012000}
{MK Reference CC2000-204                 }

		prompt_details [ 22, MESSAGE_POSITION    ] = "Reviewed By" 
		prompt_details [ 22, FIELD_NAME_POSITION ] = "REVIEWED_BY"

{End of modifications} 

                prompt_details [ 23 , MESSAGE_POSITION    ] = "Modifiable Entry"
                prompt_details [ 23 , FIELD_NAME_POSITION ] = "MODIFIABLE"      
                                                                               



{

        CHANGE : Specify the name of the table to be displayed on the screen
                 in <displayed_name_of_table>. This is useful for foreign
                 language support.
                 eg   displayed_name_of_table = "Hazard"

}
{Reference CC 2001-027}

        displayed_name_of_table    = "Stability Product Information"

{End of modifications }
{

        CHANGE : Specify the name of the directory where text files are stored
                 which may contain descriptive information in <directory> and
                 the extension of the file in <extn>. If there is no associated
                 text file then these should be set to EMPTY.
                 For instance the hazard table.
                 eg   directory = "SMP$TEXTFILES"
                      extn = "HAZ"
                 or
                      directory = EMPTY
                      extn = EMPTY

}

        directory = EMPTY
        extn = EMPTY

{

        CHANGE : MANDATORY : Specify the text to be displayed when prompting
                 for an identifier.
                 Note that the text may be specified literally
                 eg   input_mess  = "Enter Hazard ID : "
                 or may be extracted from the message file
                 eg   input_mess = GET MESSAGE(xyz)

}

        input_mess = "****"

{

        CHANGE : OPTIONAL : Specify default unique key value for new additions
                to the table - the default values for any new entry to the
                table will be copied from this entry in the database.
                Set <default_value> to be empty to ignore this feature.

                e.g
                  default_value = "DEFAULT"

}

        default_value = EMPTY

{

        CHANGE : MANDATORY : Specify the number of the fields to appear
                on the output generated by the list option.
                For each field to be output on the list an element of the array
                <fields_to_output> should contain a number corresponding to
                the position of that field in the array <prompt_details>.
                This array can be of any size from zero elements to the
                size of the arrays <prompt_details>.

                e.g
                  fields_to_output [ 1 ] = 1
                  fields_to_output [ 2 ] = 4
                  fields_to_output [ 3 ] = 3

}

        fields_to_output [ 1 ]  = "1"

{

        move the comments braces to allow use of these statements

}

{
        fields_to_output [ 2 ]  = "****"
        fields_to_output [ 3 ]  = "****"
        fields_to_output [ 4 ]  = "****"
        fields_to_output [ 5 ]  = "****"
        fields_to_output [ 6 ]  = "****"
        fields_to_output [ 7 ]  = "****"
        fields_to_output [ 8 ]  = "****"
        fields_to_output [ 9 ]  = "****"

}

        fields_to_output [ 2  ]  = "2"
        fields_to_output [ 3  ]  = "3"
        fields_to_output [ 4  ]  = "4"
        fields_to_output [ 5  ]  = "5"
        fields_to_output [ 6  ]  = "6"
        fields_to_output [ 7  ]  = "7"
        fields_to_output [ 8  ]  = "8"
        fields_to_output [ 9  ]  = "9"
        fields_to_output [ 10 ]  = "10"
        fields_to_output [ 11 ]  = "11"
        fields_to_output [ 12 ]  = "12"
        fields_to_output [ 13 ]  = "13"
        fields_to_output [ 14 ]  = "14"
        fields_to_output [ 15 ]  = "15"
        fields_to_output [ 16 ]  = "16"
        fields_to_output [ 17 ]  = "17"
        fields_to_output [ 18 ]  = "18"
        fields_to_output [ 19 ]  = "19"
        fields_to_output [ 20 ]  = "20"
        fields_to_output [ 21 ]  = "21"
        fields_to_output [ 22 ]  = "22"
        fields_to_output [ 23 ]  = "23"
 
{

        CHANGE : OPTIONAL : Specify a special action to happen on pressing the
                             <select> key.

                CHARACTER_POSITION index contains a character for the menu item.
                TITLE_POSITION     index contains a title for the menu item.
                LIBRARY_POSITION   index contains the library to call.
                ROUTINE_POSITION   index contains a routine in the library.

        eg

        special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
        special_actions_report [ 1 , TITLE_POSITION     ] = "Analysis Options"

        special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
        special_actions_report [ 2 , TITLE_POSITION     ] = "1 Analysis Components"
        special_actions_report [ 2 , LIBRARY_POSITION   ] = "$COMP_EDIT"
        special_actions_report [ 2 , ROUTINE_POSITION   ] = "LABTABLE_INPUT"

        special_actions_report [ 3 , CHARACTER_POSITION ] = "2"
        special_actions_report [ 3 , TITLE_POSITION     ] = "2 Analysis Description"
        special_actions_report [ 3 , LIBRARY_POSITION   ] = "$LABTABLIB"
        special_actions_report [ 3 , ROUTINE_POSITION   ] = "TEXT_FILE"

}

        ARRAY   special_actions_report  ARRAY_SIZE ( 0 , 4 )

{

        move the comments braces to allow use of these statements

}

{

        special_actions_report [ 1 , CHARACTER_POSITION ] = "1"
        special_actions_report [ 1 , TITLE_POSITION     ] = "1 Phrase List"
        special_actions_report [ 1 , LIBRARY_POSITION   ] = "$PHRASE"
        special_actions_report [ 1 , ROUTINE_POSITION   ] = "DO_PHRASE_LIST"

}

{

        CHANGE : OPTIONAL : Specify five standard messages.

                IDENTITY1_MESSAGE contains title text for the identity field.
                MOD_ON_MESSAGE    contains title text for the Modified On field.
                MOD_BY_MESSAGE    contains title text for the Modified by field.
                READ_MESSAGE      contains identifier for the read transaction.
                WRITE_MESSAGE     contains identifier for the write transaction

                Note:
                Where a table contains more than one key0 field, then messages
                for the second (and third and fourth, if appropriate) key0
                fields should be set up in the IDENTITY2_MESSAGE,
                IDENTITY3_MESSAGE and IDENTITY3_MESSAGE elements.

}

        ARRAY   labtable_messages       ARRAY_SIZE ( 0 )

        labtable_messages [ IDENTITY1_MESSAGE ] = "Study ID" {GET MESSAGE ( 2545 , 1 )}
                                                { "Identity" }
        labtable_messages [ IDENTITY2_MESSAGE ] = "Layer" {GET MESSAGE ( 2884 , 1 ) }
                                                { "Identity 2" }
        labtable_messages [ IDENTITY3_MESSAGE ] = "Condition" {GET MESSAGE ( 2884 , 2 )}
                                                { "Identity 3" }
        labtable_messages [ IDENTITY4_MESSAGE ] = "Lot No." {GET MESSAGE ( 2884 , 3 )}
                                                { "Identity 4" }
        labtable_messages [ MOD_ON_MESSAGE    ] = GET MESSAGE ( 2546 , 1 )
                                                { "Modified On" }
        labtable_messages [ MOD_BY_MESSAGE    ] = GET MESSAGE ( 2547 , 1 )
                                                { "Modified By" }
        labtable_messages [ READ_MESSAGE      ] = GET MESSAGE ( 2566 , 1 )
                                                { "Labtable Read Transaction" }
        labtable_messages [ WRITE_MESSAGE     ] = GET MESSAGE ( 2567 , 1 )
                                                { "Labtable Write Transaction" }

{

        CHANGE : MANDATORY : Specify the help context for the editor window.
                 The text should be specified literally and should start
                 with the name of the report, suffixed with "_EDIT",
                        i.e. "$LTE_XXX_EDIT"

}

        help_context = "$LTE_TEM_EDIT"


 {   ------     THERE ARE NO MORE FIELDS TO BE SETUP  --------    }

ENDROUTINE

{ --------------------------------------------------------------------------- }
{                                                                             }
{ The following routines are provided as call back points for LTE processing. }
{ User code may be added as appropriate.                                      }
{ --------------------------------------------------------------------------- }

ROUTINE validation_routine

        { Called on pressing the DO key to save LTE screen.               }
        { Called outside of the LTE write transaction.                    }
        {                                                                 }
        { Returns a boolean value to indicate whether to proceed with     }
        { the save process - if FALSE is returned the user is forced back }
        { into the editor                                                 }

        RETURN ( TRUE )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE prompt_object_routine (       prompt_object ,
                                VALUE key0_count    ,
                                VALUE operation     )

        { Called during the creation of the identity prompts              }
        {                                                                 }
        { prompt_object is the prompt object fro the specified prompt     }
        { key0_count    is the current key0 segment number                }
        {               eg this would be 2 for the version_number         }
        {                  field of the versioned_analysis table          }
        { operation     the current LTE operation eg ADD, MODIFY, DISPLAY }
        {                                                                 }
        { No return value is required                                     }


    IF ( STRIP ( TOUPPER(operation) ) = "ADD" ) OR
        ( STRIP ( TOUPPER(operation) ) = "COPY" ) THEN

        IF ( key0_count = 1 ) THEN                { STUDY ID Prompt }

            prompt_object . browse_routine = "BROWSE_STUDY_ID_LTE_RESTR"

        ELSEIF ( key0_count = 2 ) THEN           { LAYER FACTOR ID Prompt  }

            prompt_object . browse_routine = "BROWSE_LAYER_FACTOR_LTE_RESTR"

        ELSEIF ( key0_count = 3 ) THEN          { C_FACTOR Prompt  }

            prompt_object . browse_routine = "BROWSE_C_FACTOR_LTE_RESTR"

        ELSE                                      { PULL NUM Prompt  }

            prompt_object . browse_routine = "BROWSE_PULL_LTE_RESTR"
        ENDIF

    ENDIF


ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE create_id_routine

        { Called before starting the identity prompts of an LTE for the   }
        { ADD and COPY options.                                           }
        {                                                                 }
        { The return value is used as the identity of the new record      }
        { instead of starting the identity prompts.                       }
        { Returning EMPTY causes the identity prompt to be started.       }

        RETURN ( EMPTY )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE update_routine ( labtable )

        { Called on pressing the DO key to save LTE screen.               }
        { Called after the LTE write transaction has been started.        }
        {                                                                 }
        { labtable is the labtable object.                                }
        {                                                                 }
        { The return value is TRUE  if updates have been performed        }
        {                     FALSE if updates have NOT been performed    }
        {                     EMPTY - the systems checks for updates      }

        RETURN ( FALSE )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE read_data_routine (       labtable  ,
                            VALUE operation )

        { Called after the record has been selected / reserved but before }
        { the editor screen has been built.                               }
        {                                                                 }
        { labtable      the labtable object.                              }
        { operation     the current LTE operation eg ADD, MODIFY, DISPLAY }
        {                                                                 }
        { No return value is required                                     }

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE validate_new_id_routine ( VALUE new_id )

        { Called after each ID value has been entered.                    }
        {                                                                 }
        { new_id is the value entered at the prompt.                      }
        {                                                                 }
        { Returns a boolean value to indicate whether the value is valid. }

        RETURN ( TRUE )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE do_the_work  ( VALUE operation )

table_setup ()
smp_lte_perform_option  ( name_of_table              ,
                          displayed_name_of_table    ,
                          prompt_details             ,
                          labtable_messages          ,
                          default_value              ,
                          input_mess                 ,
                          header_mess                ,
                          footer_mess                ,
                          display_footer_mess        ,
                          directory                  ,
                          extn                       ,
                          help_context               ,
                          GLOBAL ("CURRENT_LIBRARY") ,
                          fields_to_output           ,
                          special_actions_report     ,
                          operation                  )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE add_option ( option )

do_the_work ( "add_ident" )

ENDROUTINE


{ --------------------------------------------------------------------------- }

ROUTINE copy_option ( option )

do_the_work ( "copy_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE modify_option ( option )

do_the_work ( "modify_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE display_option ( option )

do_the_work ( "display_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE remove_option ( option )

do_the_work ( "remove_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE restore_option ( option )

do_the_work ( "restore_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE list_option ( option )

do_the_work ( "list_idents" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE print_option ( option )

do_the_work ( "print_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE smp_lte_initialise

ENDROUTINE

{=====================================}
{MOD DMC: 27/06/00                    }
{=====================================}
{Routines added by DMC to add a browse}
{to the LTE                           }
{=====================================}

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE browse_study_id ( prompt_object )



    stat = browse("get_first_study",
                  "get_next_study",
                   GLOBAL("CURRENT_LIBRARY"),
                   10
                   prompt_object . value )

    prompt_object . parent_prompt . prompt_objects[1] . text = prompt_object . value

    RETURN ( prompt_object . value )

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE browse_layer_id ( prompt_object )


    stat = browse("get_first_layer_id",
                  "get_next_layer_id",
                   GLOBAL("CURRENT_LIBRARY"),
                   10
                   prompt_object . value )

    prompt_object . parent_prompt . prompt_objects[2] . text = prompt_object . value

    prompt_object . parent_prompt . prompt_objects[2] . repaste()

    RETURN ( prompt_object . value )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_first_study

  study = SELECT pds_study . IDENTITY
          WHERE IDENTITY <> ""

  description = SELECT pds_study . description

  browse_entry ( study, study, description )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_next_study

  NEXT pds_study

  study = SELECT pds_study . IDENTITY
  description = SELECT pds_study . description

  browse_entry ( study, study, description )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_first_layer_id

  layer_id = SELECT layer_factor . IDENTITY
                    WHERE identity <> ""

  description = SELECT layer_factor . description

  browse_entry ( layer_id, layer_id, description )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_next_layer_id

  NEXT layer_factor

  layer_id = SELECT layer_factor . IDENTITY
  description = SELECT layer_factor . description

  browse_entry ( layer_id, layer_id, description )

ENDROUTINE

{ --------------------------------------------------------------------------- }

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE browse_pull ( prompt_object )


    stat = browse("get_first_pull",
                  "get_next_pull",
                   GLOBAL("CURRENT_LIBRARY"),
                   10
                   prompt_object . value )

    prompt_object . parent_prompt . prompt_objects[4] . text = prompt_object . value

    prompt_object . parent_prompt . prompt_objects[4] . repaste()

    RETURN ( prompt_object . value )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_first_pull

  pull = SELECT DISTINCT pds_study_pull . pull_num
          WHERE pull_num <> ""

  description = SELECT pds_study_pull . description

  browse_entry ( pull, pull, description )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_next_pull

  NEXT pds_study_pull

  pull = SELECT pds_study_pull . pull_num
  description = SELECT pds_study_pull . description

  browse_entry ( pull, pull, description )

ENDROUTINE

{ --------------------------------------------------------------------------- }

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE browse_c_factor ( prompt_object )


    stat = browse("get_first_c_factor",
                  "get_next_c_factor",
                   GLOBAL("CURRENT_LIBRARY"),
                   10
                   prompt_object . value )

    prompt_object . parent_prompt . prompt_objects[3] . text = prompt_object . value

    prompt_object . parent_prompt . prompt_objects[3] . repaste()

    RETURN ( prompt_object . value )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_first_c_factor

  c_factor = SELECT  c_factor . identity
             WHERE identity <> ""

  description = SELECT c_factor . description

  browse_entry ( c_factor, c_factor, description )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_next_c_factor

  NEXT c_factor

  c_factor = SELECT c_factor . identity
  description = SELECT c_factor . description

  browse_entry ( c_factor, c_factor, description )

ENDROUTINE

{ --------------------------------------------------------------------------- }


