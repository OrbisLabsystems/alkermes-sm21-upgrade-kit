{******************************************************************************
*
* Module Name   : $PROMPT_TEST_SAMPLES.RPF
*
* Purpose       : Special prompt type for getting a sample with a given test.
*
* Document Ref. :
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    : Yes
*
*******************************************************************************}

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_PROMPT

JOIN LIBRARY $BROWSE_FORM
JOIN LIBRARY $BROWSE_FIELD
JOIN LIBRARY $LIB_UTILS

JOIN LIBRARY $BATCH_USER

{* GLOBAL CONSTANTS ***********************************************************}

GLOBAL CONSTANT PROMPT_TEST_SAMPLES_CLASS = "STD_PROMPT_TEST_SAMPLES"

{* LOCAL CONSTANTS ************************************************************}

CONSTANT BROWSE_TEST_SAMP_CLASS      = "STD_BROWSE_TEST_SAMP_CLASS"
CONSTANT BROWSE_TEST_SAMP_GRID_CLASS = "STD_BROWSE_TEST_SAMP_GRID"

{* VARIABLES ******************************************************************}


{******************************************************************************}

	GLOBAL

	ROUTINE prompt_test_samples_initialise

{
*	Initialise the library.
*
*******************************************************************************}

	IF NOT ( GLOBAL ( "LIBRARY_INITIALISED" ) ) THEN
                          	
		browse_field_initialise ()
		browse_form_initialise ( )
		std_prompt_test_samples_class_declare ( )

		SET GLOBAL "LIBRARY_INITIALISED" TO TRUE

	ENDIF

ENDROUTINE

{******************************************************************************}

	GLOBAL

	ROUTINE prompt_test_samples ( prompt_object )

{
*	Routine called whenever a prompt based on sample/tests is required.
*	Should create a prompt object and store into parameter. This object
*	will then be used by the internal code.
*
*******************************************************************************}

	prompt_test_samples_initialise ( )

	CREATE OBJECT PROMPT_TEST_SAMPLES_CLASS , prompt_object

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_class_declare

{
*	Declare the prompt for sample/test class.
*
*******************************************************************************}

	DEFINE CLASS PROMPT_TEST_SAMPLES_CLASS

		INHERIT PROMPT_CLASS_FIELD_IDENTITY

		PROPERTIES "ANALYSIS"           ,
		           "ANALYSIS_TYPE"      ,
		           "ALLOW_BLANK"        ,
		           "OLD_SELECT_CLAUSE"  ,
		           "TEST_STATUS"        ,
		           "SAMPLE_STATUS"      ,
		           "RETURN_TEST"		

		ACTIONS 
		           "FORMAT_SAMPLE"      ,
		           "FORMAT_BEFORE"      ,
		           "FORMAT_AFTER"       ,
		           "VALIDATE_SELECT"    ,
		           "VALIDATE_ANALYSIS"  ,
		           "VALIDATE_TYPE"      ,
		           "VALIDATE_TEST_TYPE" ,
		           "ADD_STATUS"         ,	
		           "BUILD_CRITERIA"     ,	
		           "REMOVE_CRITERIA"    ,
		           "START_PROMPT"       ,
		           "END_PROMPT"         ,	
		           "BROWSE"             ,
		           "BUILD"              ,
		           "IS_ID_NUMERIC"      ,
		           "GET_TEST_REPLICATE" 

		TABLES SAMP_TEST_VIEW

		INITIALISATION

	END CLASS

	DEFINE CLASS BROWSE_TEST_SAMP_GRID_CLASS

		INHERIT BROWSE_FIELD_GRID_CLASS

		ACTIONS "PROMPT_CELL"    ,
                        "DISPLAY_CELL"

	END CLASS

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_class_initialisation ( self )

{
*	Initialisation routine for the prompt class. Ensure that
*	properties are correctly set up.
*
*******************************************************************************}

	DECLARE field_size

	GET_FIELD_DETAILS SAMPLE . ID_TEXT ,
		           "FIELD_SIZE"        ,
	        	    field_size

	self . return_test   = TRUE
	self . length        = field_size + 5
	self . width         = self . width
	self . analysis      = EMPTY
	self . uppercase     = TRUE
	self . test_status   = "RACVP"
	self . sample_status = global ( "SAMPLE_STATUS" )
	self . may_browse    = TRUE
	self . allow_blank   = FALSE
	self . table         = "SAMP_TEST_VIEW"
	self . field         = "ID_TEXT"
	self . format_only   = FALSE
	self . analysis_type = EMPTY

	ARRAY self . mandatory_array
	ARRAY self . select_array

ENDROUTINE

{******************************************************************************}

	ROUTINE prompt_test_samples_split_id ( VALUE id        ,
						     sample_id ,
					             replicate )	
{
*	Split the sample id into it's replicate and the id.
*
*******************************************************************************}

	DECLARE slash_pos   ,
		temp_string ,
		temp_slash

	id        = TOUPPER ( id )
	slash_pos = INDEX ( id , "/" )

	temp_string = substring ( id                               , 
				  slash_pos + 1                    , 
				  string_length ( id ) - slash_pos )

	temp_slash = INDEX ( temp_string , "/" )

	WHILE temp_slash <> 0 DO

		slash_pos = slash_pos + temp_slash

		temp_string = substring ( temp_string                     , 
					  temp_slash + 1                  , 
					  string_length ( temp_string ) - 
					  temp_slash                      )

		temp_slash = INDEX ( temp_string , "/" )
	
	ENDWHILE

	IF slash_pos <> 0 THEN

		replicate = substring ( id                               ,
		                        slash_pos + 1                    ,
		                        string_length ( id ) - slash_pos )

		IF numtext ( replicate ) THEN

                        replicate = numeric ( replicate )
			
		ELSE

			replicate = 0

		ENDIF

		sample_id = substring ( id            ,
		                        1             ,
		                        slash_pos - 1 )

	ELSE

		sample_id = id
		replicate = 0

	ENDIF


ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_is_id_numeric (       self      ,
	                                                       VALUE id_string )
{
*	Check to see if the id_string passed is a valid id_numeric
*
*******************************************************************************}

	DECLARE return_value

	id_string = strip ( id_string )

	IF length ( id_string ) > 10 THEN

		{ Cant be a packed decimal - its too big }
		return_value = FALSE

	ELSEIF NUMTEXT ( id_string ) THEN

		id_string = substitute ( id_string    ,
		                         "0123456789" ,
		                         "          " )
		return_value = blank ( id_string )

	ELSE

		return_value = FALSE

	ENDIF

	RETURN ( return_value )


ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_add_status (       self       ,
							    VALUE field      ,
							    VALUE status_set )

{
*	Action code to add status criteria
*
*******************************************************************************}

	DECLARE loop , status_char , status_select

	IF NOT ( blank ( status_set ) ) THEN

		ARRAY status_select

		loop = 1

		WHILE ( loop <= LENGTH ( status_set ) ) DO

			status_char = SUBSTRING ( status_set ,
			                          loop       ,
			                          1          )

			array_select_add ( status_select   ,
			                   ARRAY_SELECT_EQ ,
			                   field           ,
			                   status_char     )

			IF ( loop < LENGTH ( status_set ) ) THEN

				array_select_add ( status_select   ,
				                   ARRAY_SELECT_OR ,
				                   EMPTY           ,
				                   EMPTY           )

			ENDIF

			loop = loop + 1

		ENDWHILE

		array_select_concat ( self . mandatory_array , status_select )

	ENDIF

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_build_criteria ( self )

{
*	Action code to build the criteria
*
*******************************************************************************}

	self . old_select_clause = self . mandatory_array

	self . mandatory_array = EMPTY

	array_copy ( self . mandatory_array   ,
		     self . old_select_clause )

	IF ( ( self . analysis_type = EMPTY   ) OR 
           ( BLANK ( self . analysis_type ) ) ) THEN

		array_select_add ( self . mandatory_array  ,
		                   ARRAY_SELECT_EQ         ,
		                   "ANALYSIS"              ,
		                   self . analysis         )

	ELSE

		array_select_add ( self . mandatory_array  ,
		                   ARRAY_SELECT_EQ         ,
		                   "ANALYSIS_TYPE"         ,
		                   self . analysis_type    )

	ENDIF

	self . add_status ( "STATUS"             ,
			    self . sample_status )	

	self . add_status ( "TEST_STATUS"      ,
			    self . test_status )	


ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_remove_criteria ( self )

{
*	Action code to remove the criteria
*
*******************************************************************************}

	self . mandatory_array = self . old_select_clause

	self . old_select_clause = EMPTY

ENDROUTINE
{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_start_prompt ( self )

{
*	Action code to start a test_samples prompt
*
*******************************************************************************}

	self . build_criteria ()
	
	object_invoke_class ( self                        ,
	                      PROMPT_CLASS_FIELD_IDENTITY ,
	                      "START_PROMPT"              )

	self . uppercase     = TRUE

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_end_prompt ( self )

{
*	Action code when end the prompt. Remove the status select criteria.
*
*******************************************************************************}

	object_invoke_class ( self                        ,
	                      PROMPT_CLASS_FIELD_IDENTITY ,
	                      "END_PROMPT"                )

	self . remove_criteria ( )

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_format_sample ( self        ,
							       test_object )

{
*	Format the display
*
*******************************************************************************}

	DECLARE formatted

	IF global ( "SAMP_BROWSE" ) = "T" THEN

		formatted = STRIP ( SELECT 'self . table' . id_text
			            IN OBJECT test_object ) 

        ELSE

		formatted = STRIP ( SELECT 'self . table' . id_numeric
			            IN OBJECT test_object ) 


	ENDIF	

	IF self . return_test THEN

		formatted = formatted : "/" :
			    STRIP ( SELECT 'self . table' . test_count
			            IN OBJECT test_object )

	ENDIF

	RETURN ( formatted )

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_browse ( self )

{
*	Perform a browse on samp_test_view
*
*******************************************************************************}

	DECLARE browse_form    ,
		test_replicate     ,
		test_object

	IF NOT ( self . format_only    ) AND
	   NOT ( self . is_display ( ) ) THEN

		CREATE OBJECT BROWSE_FIELD_CLASS , browse_form
 	
		IF self . return_test THEN

			CREATE OBJECT BROWSE_TEST_SAMP_GRID_CLASS , 
				      browse_form . grid

			browse_form . grid . title_size_top = 1
			browse_form . grid . height = 2

			browse_form . prompt_objects [ 1 ] = browse_form . grid

		ENDIF

		prompt_test_samples_split_id ( self . text               ,
					       browse_form . start_value ,
					       test_replicate            )
		

		array_copy ( browse_form . select_array ,
		             self . mandatory_array     )

		array_select_concat ( browse_form . select_array ,
		                      self . select_array        )

		IF ( GLOBAL ( "SAMP_BROWSE" ) = "T" ) OR
		     NOT ( self . is_id_numeric ( browse_form . start_value ) ) THEN

			browse_form . set_for_field ( self . table , "ID_TEXT" )

		ELSE

			browse_form . set_for_field ( self . table , "ID_NUMERIC" )

		ENDIF
		
		browse_form . set_criteria_flag (
		         size_of_array ( self . select_array ) > 0 )		

		browse_form . grid . column_size [ 1 ] =
			browse_form . grid . column_size [ 1 ] + 5

		browse_form . start_prompt ( )

 		browse_form . wait_prompt ( )

		IF ( browse_form . chose_an_entry ) THEN

			test_object = browse_form . 
		                       browse_contents [ browse_form . grid .
		                                                  current_row ]

			IF ( BLANK ( self . analysis_type ) ) THEN

				self . text = self . format_sample ( test_object )

			ELSE

				self . text = SELECT ' self . table ' . test_number 
				              IN OBJECT test_object

			ENDIF

		ENDIF
	
		browse_form . end_prompt ( )

		self . repaste ( )

		IF browse_form . chose_an_entry THEN

			self . set_lastkey ( "RETURN" )
			self . stop_prompt ( )

		ENDIF

	ENDIF

	RETURN ( TRUE )

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_build ( self )

{
*	Perform a build on samp_test_view
*
*******************************************************************************}

	DECLARE sample_id ,
		replicate

	prompt_test_samples_split_id ( self . text ,
				       sample_id   ,
				       replicate   )		

	IF self . display_only THEN

		menuproc 419 ,  sample_id
	
	ELSE

		menuproc 57 ,  sample_id

	ENDIF
ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_format_before ( self )

{
*	Action code to format the text string before the prompt.
*
*******************************************************************************}

	IF ( self . value <> EMPTY ) THEN
		self . text = TOUPPER ( self . value )
	ENDIF

	IF ( NUMTEXT ( self . value ) AND
	     NOT ( BLANK ( self . value ) ) ) THEN

		{ Only reselect if necessary }
		IF self . return_test THEN

  			IF ( self . value <> SELECT 'self . table' . test_number
			                            IN OBJECT self     ) THEN
				self . value = SELECT 'self . table' . test_number
				                      IN OBJECT self
			        	              WHERE test_number = self . value
	 		ENDIF

		ELSE

  			IF ( self . value <> SELECT 'self . table' . id_numeric
			                            IN OBJECT self     ) THEN
				self . value = SELECT 'self . table' . id_numeric
				                      IN OBJECT self
			        	              WHERE id_numeric = self . value
	 		ENDIF

		ENDIF

		IF ( SELECT 'self . table' . test_number
		            IN OBJECT self     <> EMPTY ) THEN

			self . text = self . format_sample ( self )

		ENDIF

	ENDIF

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_format_after ( self )

{
*	Action code to format the text string after the prompt.
*
*******************************************************************************}

	std_prompt_test_samples_action_format_before ( self )

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_validate_select ( self )

{
*	Validation action for sample prompt.
*
*******************************************************************************}

	DECLARE sample_id       , 
		test_number     ,
	        analysis_number , 
		return_value    , 
		sample_field

	prompt_test_samples_split_id ( self . text     ,
				       sample_id       ,
				       analysis_number )

	IF self . is_id_numeric ( sample_id ) THEN

		sample_field = "ID_NUMERIC"

	ELSE

		sample_field = "ID_TEXT"


	ENDIF

	IF ( ( self . analysis_type = EMPTY   ) OR 
           ( BLANK ( self . analysis_type ) ) ) THEN

		test_number = self . validate_analysis ( analysis_number , 
		                                         sample_id       , 
		                                         sample_field    )

	ELSEIF ( NUMTEXT ( self . text ) ) THEN

		test_number = self . validate_test_type ( self . text )
		sample_id = SELECT ' self . table ' . ' sample_field '
		            IN OBJECT self

	ELSE

		test_number = self . validate_type ( analysis_number ,
		                                     sample_id       ,
		                                     sample_field    )

	ENDIF

	IF NOT blank ( sample_id ) THEN


		test_number = SELECT 'self . table' . test_number
		                     IN OBJECT self

		IF ( test_number <> EMPTY ) THEN

			IF self . return_test THEN

				self . value = test_number
        		
			ELSE

				self . value = SELECT 'self . table' . id_numeric
					       IN OBJECT self	

			ENDIF
	

		ENDIF

		return_value = test_number <> EMPTY

	ELSE

		return_value = self . allow_blank

	ENDIF

	return ( return_value )

ENDROUTINE

{******************************************************************************}

ROUTINE std_prompt_test_samples_action_validate_analysis (       self            , 
                                                           VALUE analysis_number , 
                                                           VALUE sample_id       ,
                                                           VALUE sample_field    )

{
*	Validation action for sample prompt using analysis
*
*******************************************************************************}

	DECLARE test_number

	IF analysis_number > 0 THEN
		
		IF ( SELECT samp_test_view . analysis IN OBJECT self = 
					self . analysis                ) AND
		   ( SELECT samp_test_view . 'sample_field' IN OBJECT self =
					sample_id                      ) AND
		   ( SELECT samp_test_view . test_count IN OBJECT self =
					analysis_number                ) THEN

			test_number = SELECT samp_test_view . test_number
			              IN OBJECT self

		ELSE 
						
			test_number = SELECT 'self . table' . test_number
			              IN OBJECT self
			              WHERE (  analysis       = self . analysis )
			              AND   ( 'sample_field'  = sample_id       )
			              AND   (  test_count     = analysis_number )

		ENDIF

	ELSE

		IF ( SELECT samp_test_view . analysis IN OBJECT self = 
					self . analysis                ) AND
		   ( SELECT samp_test_view . 'sample_field' IN OBJECT self =
					sample_id                      ) THEN

			test_number = SELECT samp_test_view . test_number
			              IN OBJECT self
		ELSE

			
			test_number = SELECT 'self . table' . test_number
			              IN OBJECT self
			              WHERE (  analysis      = self . analysis  )
			              AND   ( 'sample_field' = sample_id        )

		ENDIF

	ENDIF

	RETURN ( test_number )

ENDROUTINE

{******************************************************************************}

ROUTINE std_prompt_test_samples_action_validate_type (       self            , 
                                                       VALUE analysis_number , 
                                                       VALUE sample_id       ,
                                                       VALUE sample_field    )

{
*	Validation action for sample prompt by analysis_type
*
*******************************************************************************}

	DECLARE test_number

	IF analysis_number > 0 THEN
		
		IF ( SELECT samp_test_view . analysis_type IN OBJECT self = 
					self . analysis_type           ) AND
		   ( SELECT samp_test_view . 'sample_field' IN OBJECT self =
					sample_id                      ) AND
		   ( SELECT samp_test_view . test_count IN OBJECT self =
					analysis_number                ) THEN

			test_number = SELECT samp_test_view . test_number
			              IN OBJECT self

		ELSE 
						
			test_number = SELECT 'self . table' . test_number
			              IN OBJECT self
			              WHERE (  analysis_type  = self . analysis_type )
			              AND   ( 'sample_field'  = sample_id            )
			              AND   (  test_count     = analysis_number      )
		ENDIF

	ELSE

		IF ( SELECT samp_test_view . analysis IN OBJECT self = 
					self . analysis_type           ) AND
		   ( SELECT samp_test_view . 'sample_field' IN OBJECT self =
					sample_id                      ) THEN

			test_number = SELECT samp_test_view . test_number
			              IN OBJECT self
		ELSE

			
			test_number = SELECT 'self . table' . test_number
			              IN OBJECT self
			              WHERE (  analysis_type = self . analysis_type )
			              AND   ( 'sample_field' = sample_id            )

		ENDIF

	ENDIF

	RETURN ( test_number )

ENDROUTINE

{******************************************************************************}

ROUTINE std_prompt_test_samples_action_validate_test_type (       self        , 
                                                            VALUE test_number )

{
*	Validation action for sample prompt by analysis_type
*
*******************************************************************************}

	IF ( SELECT samp_test_view . test_number   IN OBJECT self = test_number   ) AND
	   ( SELECT samp_test_view . analysis_type IN OBJECT self = self . analysis_type ) THEN

		test_number = SELECT samp_test_view . test_number IN OBJECT self

	ELSE
			
		test_number = SELECT 'self . table' . test_number
		              IN OBJECT self
		              WHERE (  analysis_type = self . analysis_type )
		              AND   (  test_number = test_number            )

	ENDIF

	RETURN ( test_number )

ENDROUTINE

{******************************************************************************}

	ROUTINE std_prompt_test_samples_action_validation ( self )

{
*	Action code to validate the entry.
*
*******************************************************************************}

	RETURN ( TRUE )

ENDROUTINE

{******************************************************************************}

ROUTINE std_browse_test_samp_grid_action_prompt_cell (       self        ,
	                                               VALUE cell_column ,
	                                               VALUE cell_row    ,
	                                                     window      ,
	                                               VALUE column      ,
	                                               VALUE row         ,
	                                               VALUE cell_width  ,
	                                               VALUE cell_height )

{
*	Prompt for a cell in the browse grid.
*
*******************************************************************************}

	DECLARE table , field , object , val , key0_val 

	table = self . parent_prompt . table
	field = self . parent_prompt . fields [ cell_column ]
	object = self . parent_prompt . browse_contents [ cell_row ]

	val = SELECT ' table ' . ' field '
              IN OBJECT object

	IF cell_column = 1 THEN

		val = strip ( val )  : "/" : 
			strip ( SELECT ' table ' . test_count
                        IN OBJECT object )

	ENDIF

	key0_val = SELECT ' table ' . test_number
	                  IN OBJECT object

	PROMPT FOR val
	       AT column , row
	       IN WINDOW window
	       CLASS BROWSE_FIELD_PROMPT_CLASS
	       WITH ( width         = cell_width           ,
	              length        = LENGTH ( val )       ,
	              display_only  = TRUE                 ,
	              table         = table                ,
	              field         = field                ,
	              key0          = key0_val             ,
	              parent_prompt = self . parent_prompt )

	IF ( LASTKEY = "RETURN" ) THEN
		SET GLOBAL "LASTKEY" TO "DO"
	ENDIF

ENDROUTINE

{******************************************************************************}

ROUTINE std_browse_test_samp_grid_action_display_cell (       self        ,
	                                                VALUE cell_column ,
	                                                VALUE cell_row    ,
	                                                      window      ,
	                                                VALUE column      ,
	                                                VALUE row         ,
	                                                VALUE cell_width  ,
	                                                VALUE cell_height )

{
*	Display a cell in the browse grid.
*
*******************************************************************************}

	DECLARE table , field , object , val

	table = self . parent_prompt . table
	field = self . parent_prompt . fields [ cell_column ]
	object = self . parent_prompt . browse_contents [ cell_row ]

	val = SELECT ' table ' . ' field '
	             IN OBJECT object

	IF cell_column = 1 THEN

		val = strip ( val )  : "/" : 
			strip ( SELECT ' table ' . test_count
                        IN OBJECT object )

	ENDIF

	DISPLAY val
	       AT column , row
	       TO column + cell_width - 1
	       IN WINDOW window

ENDROUTINE

