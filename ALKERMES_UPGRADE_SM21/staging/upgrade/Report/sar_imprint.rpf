
{ ===========================  SAR_IMPRINT.RPF  ==============================}
{                                                                             }
{ Created by : JMWHYTE                          Date: 24-04-1996              }
{                                                                             }
{ Purpose    : List of Results for Samples      (c) TENSOR Technologies       }
{                                                                             }
{ Description: There is a requirement at Elan to produce Sample Analysis      }
{              Reports ( for example, the SAR at EPRC ). The Samples have     }
{              associated results and specifications. A Sample Report is      }
{              required which presents the Test Components, the Test Results  }
{              and the Specifications for the Components. In the majority of  }
{              cases where the result meets the specification, there is a     }
{              requirement to substitute the actual result with the text      }
{              "Complies". In cases where the results does not meet the       }
{              specification, the text "Does not Comply" should be substituted}
{              for the result.                                                }
{                                                                             }
{=============================================================================}
{                                                                             }
{  Modification History                                                       }
{                                                                             }
{  Ver.     Date        By          Description                               }
{  ----     ----        --          -----------                               }
{  1.05      11/04/07    AF         Major cleanup as much of the code was     }
{                                   un-necessary or obsolete.                 }
{ ============================================================================}


SET NOTPROTECTED
ENABLE WINDOWS

SET NAME "DEFER/"

JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_DDE

JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_TRANSFER

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_CSMLP
JOIN LIBRARY $LIB_MLPS
JOIN LIBRARY $PROMPT_IMPRINT

JOIN LIBRARY DDE_LIB1

level_id = "SPEC"

setup_program_constants ()
main ()

{==============================================================================}
{                                                                              }
{ ROUTINE main                                  Controls main flow of the      }
{                                               program .                      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE main


    lib_mlps_initialise ()

    got_sample = browse_single_sample ("A")

    IF got_sample = "" THEN 
	    EXIT 
	ENDIF

    sample_id = SELECT SAMPLE  . id_numeric
                WHERE id_numeric = got_sample
                                          
        { Write temporary tables for imprint }
		
        get_results ( sample_id )
        get_word_res_array ()
        get_comment_info ()
        get_record_details (sample_id)

		
        the_samp = SELECT sample . id_text
        number_to_print = 1

        imprint_print ( the_samp ) 

        delete_record (sample_id)

ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE setup_program_constants               sets up constants used in the  }
{                                               program .                      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }

{                                                                              }
{==============================================================================}

ROUTINE setup_program_constants


ARRAY res_arr        ARRAYSIZE ( 0 , 10 )

ARRAY word_usp_res_array

ARRAY word_ep_res_array
ARRAY word_jp_res_array
ARRAY usp_array

ARRAY ep_array
ARRAY jp_array



AR0  = "AR0"
AR1  = "AR1"
AR2  = "AR2"

CONSTANT TEST_NAME  = 1
CONSTANT RES_VAL    = 2
CONSTANT TEST_UNIT  = 3
CONSTANT TEST_STAT  = 4
CONSTANT SMP_NAME   = 5
CONSTANT SMP_STAT   = 6
CONSTANT ANL_NAME   = 7
CONSTANT SPC_VALUE  = 8
CONSTANT TEST_NUMB  = 9

{ JOD 13-MAR-2000 : New constant for no comments }

CONSTANT ORBIS_NC = "ORBIS_NC"

ENDROUTINE



{==============================================================================}
{                                                                              }
{ ROUTINE get_word_res_array                    Puts headings in the first row }
{                                               of word_res_array and selects  }
{                                               all data required from         }
{                                               res_array and puts it into     }
{                                               word_res_array. Only data that }
{                                               appears on the analysis report }
{                                               is selected.                   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE get_word_res_array

DECLARE i
i = 1

end_of_array = SIZE_OF_ARRAY ( res_arr )

word_usp_res_array [ i , 1 ] = "COMMENT"
word_usp_res_array [ i , 2 ] = "TEST"
word_usp_res_array [ i , 3 ] = "SPECIFICATIONS"
word_usp_res_array [ i , 4 ] = "RESULT"

word_ep_res_array [ i , 1 ] = "COMMENT"
word_ep_res_array [ i , 2 ] = "TEST"
word_ep_res_array [ i , 3 ] = "SPECIFICATIONS"
word_ep_res_array [ i , 4 ] = "RESULT"

word_jp_res_array [ i , 1 ] = "COMMENT"
word_jp_res_array [ i , 2 ] = "TEST"
word_jp_res_array [ i , 3 ] = "SPECIFICATIONS"
word_jp_res_array [ i , 4 ] = "RESULT"

usp_count = 2
ep_count = 2
jp_count = 2

WHILE ( i < end_of_array + 1 )

    i = i + 1

    anal_id = res_arr [ i - 1 , ANL_NAME ]

    description = SELECT analysis . description
                         WHERE ( identity = anal_id )

    pos = INDEX ( description, "{EP}" )

    IF ( pos = 0 ) THEN

        pos = INDEX ( description, "{JP}" )

        IF ( pos = 0 ) THEN

            word_usp_res_array [ usp_count , 1 ] = i
            word_usp_res_array [ usp_count , 2 ] = STRIP ( res_arr [ i - 1 , TEST_NAME ] )
            word_usp_res_array [ usp_count , 3 ] = STRIP ( res_arr [ i - 1 , SPC_VALUE ] )
            word_usp_res_array [ usp_count , 4 ] = STRIP ( res_arr [ i - 1 , RES_VAL   ] )

            usp_count = usp_count + 1

        ELSE

            word_jp_res_array [ jp_count , 1 ] = i
            word_jp_res_array [ jp_count , 2 ] = STRIP ( res_arr [ i - 1 , TEST_NAME ] )
            word_jp_res_array [ jp_count , 3 ] = STRIP ( res_arr [ i - 1 , SPC_VALUE ] )
            word_jp_res_array [ jp_count , 4 ] = STRIP ( res_arr [ i - 1 , RES_VAL   ] )

            jp_count  = jp_count + 1

        ENDIF

    ELSE

        word_ep_res_array [ ep_count , 1 ] = i
        word_ep_res_array [ ep_count , 2 ] = STRIP ( res_arr [ i - 1 , TEST_NAME ] )
        word_ep_res_array [ ep_count , 3 ] = STRIP ( res_arr [ i - 1 , SPC_VALUE ] )
        word_ep_res_array [ ep_count , 4 ] = STRIP ( res_arr [ i - 1 , RES_VAL   ] )

        ep_count  = ep_count + 1

    ENDIF

ENDWHILE

ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE get_comment_info                      Prompts user for comments for  }
{                                               tests stored in word_res_array.}
{                                               Will display comments in       }
{                                               output_gui report later.       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE get_comment_info

        CREATE OBJECT PROMPT_CLASS_FORM , comment_form

        comment_form . height = 12
        comment_form . width  = 90

        comment_form . row    = 10
        comment_form . column = 10

        comment_form . border = TRUE
        comment_form . header = "Comment Entry Form"

        comment_form . proportional = TRUE
        comment_form . return_behaviour = FORM_RETURN_STAY
        comment_form . button_style = FORM_BUTTON_NONE

        create_comment_grid ( comment_form, comment_grid )

        populate_comment_form ( comment_grid )

        comment_form . prompt_objects [ 1 ] = comment_grid

        add_button_to_comment_form ( comment_form )

        comment_form . start_prompt ()
        comment_form . wait_prompt ()

        ARRAY comment_array

        count = 1
        comment_count = 1
        usp_count1 = 2
        ep_count1 = 2
        jp_count1 = 2

        WHILE ( count <= SIZE_OF_ARRAY (comment_grid . user_info) ) AND
              ( comment_grid . user_info [ count, 1 ] <> "" ) DO

            IF ( comment_grid . user_info [ count, 4 ] <> EMPTY ) AND 
                 NOT ( BLANK ( comment_grid . user_info [ count, 4 ] )) THEN

                comment_array [ comment_count, 1 ] = comment_count
                comment_array [ comment_count, 2 ] = comment_grid . user_info [ count, 4 ]

                IF ( comment_grid . user_info [ count, 5 ] = "USP" ) THEN

                    word_usp_res_array [ usp_count1, 1 ] = comment_count
                    usp_count1 = usp_count1 + 1

                ELSEIF ( comment_grid . user_info [ count, 5 ] = "EP" ) THEN

                    word_ep_res_array [ ep_count1, 1 ] = comment_count
                    ep_count1 = ep_count1 + 1
    
                ELSEIF ( comment_grid . user_info [ count, 5 ] = "JP" ) THEN

                    word_jp_res_array [ jp_count1, 1 ] = comment_count
                    jp_count1 = jp_count1 + 1


                ENDIF

                comment_count = comment_count + 1

            ELSE

                IF ( comment_grid . user_info [ count, 5 ] = "USP" ) THEN

                    word_usp_res_array [ usp_count1, 1 ] = ""
                    usp_count1 = usp_count1 + 1

                ELSEIF( comment_grid . user_info [ count, 5 ] = "EP" ) THEN

                    word_ep_res_array [ ep_count1, 1 ] = ""
                    ep_count1 = ep_count1 + 1
    
                ELSEIF( comment_grid . user_info [ count, 5 ] = "JP" ) THEN

                    word_jp_res_array [ jp_count1, 1 ] = ""
                    jp_count1 = jp_count1 + 1


                ENDIF

            ENDIF

            count = count + 1

        ENDWHILE

        comment_form . end_prompt ()

ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE populate_comment_form         Populates the comment form             }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/09/99     TC              Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE populate_comment_form ( grid )

    DECLARE count, count2, count3

    ARRAY grid . user_info

    count = 2

    WHILE ( count <= SIZE_OF_ARRAY ( word_usp_res_array ) ) DO

        grid . user_info [ count - 1, 1 ] = count - 1
        grid . user_info [ count - 1, 2 ] = word_usp_res_array [ count, 2 ]
        grid . user_info [ count - 1, 3 ] = word_usp_res_array [ count, 4 ]
        grid . user_info [ count - 1, 4 ] = ""
        grid . user_info [ count - 1, 5 ] = "USP"

        count = count + 1

    ENDWHILE

    count2 = 2

    WHILE ( count2 <= SIZE_OF_ARRAY ( word_ep_res_array ) ) DO

        grid . user_info [ count - 1, 1 ] = count - 1
        grid . user_info [ count - 1, 2 ] = word_ep_res_array [ count2, 2 ]
        grid . user_info [ count - 1, 3 ] = word_ep_res_array [ count2, 4 ]
        grid . user_info [ count - 1, 4 ] = ""
        grid . user_info [ count - 1, 5 ] = "EP"

        count  = count + 1
        count2 = count2 + 1

    ENDWHILE

    count3 = 2

    WHILE ( count3 <= SIZE_OF_ARRAY ( word_jp_res_array ) ) DO

        grid . user_info [ count - 1, 1 ] = count - 1
        grid . user_info [ count - 1, 2 ] = word_jp_res_array [ count3, 2 ]
        grid . user_info [ count - 1, 3 ] = word_jp_res_array [ count3, 4 ]
        grid . user_info [ count - 1, 4 ] = ""
        grid . user_info [ count - 1, 5 ] = "JP"

        count  = count + 1
        count3 = count3 + 1

    ENDWHILE

ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE create_comnment_grid          Creates the grid in the comment_form   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/09/99     TC              Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE create_comment_grid ( comment_form, dk_grid )

    DECLARE rows

    CREATE OBJECT PROMPT_CLASS_GRID , dk_grid

    ARRAY dk_grid . user_info

    dk_grid . column       = 3
    dk_grid . row          = 1
    dk_grid . width        = 85
    dk_grid . height       = 9
    dk_grid . title_separator_top = GRID_SEPARATOR_NONE

    dk_grid . cell_columns = 4

    rows = SIZE_OF_ARRAY ( word_usp_res_array )

    rows = rows + SIZE_OF_ARRAY ( word_ep_res_array )
    rows = rows + SIZE_OF_ARRAY ( word_jp_res_array )


    dk_grid . cell_rows = rows + 1

    dk_grid . column_size [ 1 ] = 5
    dk_grid . column_size [ 2 ] = 15
    dk_grid . column_size [ 3 ] = 30
    dk_grid . column_size [ 4 ] = 30
                                                       { Setup the headings on the grid }

    dk_grid . title_rendition_top = PROMPT_RENDITION_BOLD
    dk_grid . title_size_top = 2
    dk_grid . title_text_top [ 1, 1 ] = ""
    dk_grid . title_text_top [ 1, 2 ] = "No."
    dk_grid . title_text_top [ 2, 1 ] = ""
    dk_grid . title_text_top [ 2, 2 ] = "Test Name"
    dk_grid . title_text_top [ 3, 1 ] = ""
    dk_grid . title_text_top [ 3, 2 ] = "Result"
    dk_grid . title_text_top [ 4, 1 ] = ""
    dk_grid . title_text_top [ 4, 2 ] = "Comment"

    dk_grid . display_cell_ROUTINE = "display_grid_cell"
    dk_grid . prompt_cell_ROUTINE = "prompt_grid_cell"

ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE populate_comment_form         Populates the comment form             }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/09/99     TC              Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE add_button_to_comment_form ( comment_form )

    PROMPT OBJECT comment_form . prompt_objects [ 2 ]
        CLASS "STD_PROMPT_BUTTON"
        WITH ( caption             = "Close",
               sendlast_key        = "DO",
               row                 = 11,
               width               = 10,
               column              = (comment_form . width / 2 ) - 5)

    comment_form . add_prompt ( comment_form . prompt_objects [ 2 ] )

ENDROUTINE



{==============================================================================}
{                                                                              }
{  ROUTINE display_grid_cell                                                   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  self                   ref                  grid object                     }
{  cell_column            value                the cell column in the grid     }
{  cell_row               value                the cell row    in the grid     }
{  window                 ref                  the window the grid is in       }
{  column                 value                prompt column in cell           }
{  row                    value                prompt row    in cell           }
{  cell_width             value                cell width                      }
{  cell_height            value                cell height                     }
{                                                                              }
{==============================================================================}
ROUTINE display_grid_cell  (       self        ,
                             VALUE cell_column ,
                             VALUE cell_row    ,
                                   window      ,
                             VALUE column      ,
                             VALUE row         ,
                             VALUE cell_width  ,
                             VALUE cell_height )

    IF ( self . user_info [ cell_row, cell_column ] ) = EMPTY THEN

        self . user_info [ cell_row, cell_column ] = " "

    ENDIF

    DISPLAY self . user_info [ cell_row, cell_column ]
            AT column, row
            IN WINDOW window
            TO column + cell_width - 1


ENDROUTINE


{==============================================================================}
{                                                                              }
{  ROUTINE prompt_grid_cell                                                    }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  self                   ref                  grid object                     }
{  cell_column            value                the cell column in the grid     }
{  cell_row               value                the cell row    in the grid     }
{  window                 ref                  the window the grid is in       }
{  column                 value                prompt column in cell           }
{  row                    value                prompt row    in cell           }
{  cell_width             value                cell width                      }
{  cell_height            value                cell height                     }
{                                                                              }
{==============================================================================}
ROUTINE prompt_grid_cell  (       self        ,
                            VALUE cell_column ,
                            VALUE cell_row    ,
                                  window      ,
                            VALUE column      ,
                            VALUE row         ,
                            VALUE cell_width  ,
                            VALUE cell_height )


    IF ( self . user_info [ cell_row, cell_column ] ) = EMPTY THEN

        self . user_info [ cell_row, cell_column ] = " "

    ENDIF

    IF ( cell_column < 4  ) THEN

        PROMPT FOR self . user_info [ cell_row, cell_column ]
               AT column, row
               IN WINDOW window
               TO column + cell_width - 1
               WITH ( display_only = TRUE )

    ELSE

        PROMPT FOR self . user_info [ cell_row, cell_column ]
               BROWSE ON  PHRASE . COMM_PHR
               AT column, row
               IN WINDOW window
               TO column + cell_width - 1

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE create_prompt_form            Creates a form for user input          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE create_prompt_form (       prompt_form   ,
                             VALUE window_width  ,
                             VALUE window_height ,
                                   window_header ,
                                   window_footer )

        CREATE OBJECT PROMPT_CLASS_FORM , prompt_form

        prompt_form . height = window_height
        prompt_form . width  = window_width
        prompt_form . row    = 11
        prompt_form . column = ROUND ( ( GLOBAL ( "SCREEN_WIDTH" ) -
                                        window_width  ) / 2 )
        prompt_form . border = TRUE
        prompt_form . header = window_header
        prompt_form . footer = window_footer
        prompt_form . proportional = TRUE
        prompt_form . return_behaviour = FORM_RETURN_LEAVE

ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE browse_single_sample                browses on samples and adds      }
{                                             prompt to prompt_form            }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  mode                   value                sample status                   }
{==============================================================================}

ROUTINE browse_single_sample ( VALUE mode )

        DECLARE sample_id , sample_text , samp_numeric_string , tsr_header ,
                tsr_footer , samp_text_string , window_width , prompt_form ,
                title_width , samp_text_title , samp_id_title , button

        IF mode = "A" THEN
                set sample_status "A"
        ELSEIF mode = "CA" THEN
                set sample_status "CA"
        ELSEIF mode = "AC" THEN
                set sample_status "CA"
        ELSEIF mode = "VCA" THEN
                set sample_status "VCA"
        ELSEIF mode = "ACV" THEN
                set sample_status "VCA"
        ELSEIF mode = "CAV" THEN
                set sample_status "VCA"
        ELSE
                set sample_status "A"
        ENDIF

        tsr_header = " Standard Analysis Report"
        message_fetch ( "RES_ENTRY_FOOT_1", tsr_footer )

        message_fetch ( "RES_ENTRY_DISPLAY_1", samp_numeric_string )
        message_fetch ( "RES_ENTRY_DISPLAY_2", samp_text_string )


        IF stringlength ( samp_numeric_string ) >
           stringlength ( samp_text_string ) THEN

                title_width = stringlength ( samp_numeric_string )
        ELSE
                title_width = stringlength ( samp_text_string )
        ENDIF

        window_width = 31 + title_width

        create_prompt_form ( prompt_form  ,
                             window_width ,
                             2            ,
                             tsr_header   ,
                             tsr_footer   )

        PROMPT OBJECT samp_id_title
                FORMAT TEXT
                ON LINE 1 FROM 1
                WITH ( bold   = TRUE                ,
                       width  = title_width         ,
                       value  = samp_numeric_string )

        prompt_form . add_display ( samp_id_title )

        PROMPT OBJECT samp_text_title
                FORMAT TEXT
                ON LINE 2 FROM 1
                WITH ( bold   = TRUE             ,
                       width  = title_width      ,
                       value  = samp_text_string )

        prompt_form . add_display ( samp_text_title )

        PROMPT OBJECT sample_id
                BROWSE ON sample
                THEN select
                ON LINE 1 FROM title_width + 2 {TO title_width + 30}

        prompt_form . add_prompt ( sample_id )

        PROMPT OBJECT sample_text
                BROWSE ON sample . id_text
                ON LINE 2 FROM title_width + 2
                WITH ( lowered = TRUE )

        prompt_form . add_display ( sample_text )

        IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

                prompt_form . button_style = FORM_BUTTON_NONE

                prompt_form . height = 5
                prompt_form . width  = 48

                samp_id_title . column = 2
                samp_id_title . row = 1

                samp_text_title . column = 2
                samp_text_title . row = 3

                sample_id . column = 2
                sample_id . row = 2

                sample_text . column = 2
                sample_text . row = 4

                prompt_form . add_frame ( "" , 1 , 1 , 4 , prompt_form . width - 13 )

                PROMPT OBJECT button
                        CLASS "STD_PROMPT_BUTTON"
                        ON LINE 1
                        FROM    prompt_form . width - 10
                        WITH ( caption      =
                               get_user_message ( "SMP_PROMPT_BUTTON_OK" , 1 ) ,
                               enabled      = TRUE    ,
                               width        = 10 ,
                               send_lastkey = "DO"  )

                prompt_form . add_prompt ( button )

                PROMPT OBJECT button
                        CLASS "STD_PROMPT_BUTTON"
                        ON LINE 3
                        FROM    prompt_form . width - 10
                        WITH ( caption      =
                             get_user_message ( "SMP_PROMPT_BUTTON_CANCEL" , 1 ) ,
                               enabled      = TRUE      ,
                               width        = 10  ,
                               send_lastkey = "EXIT"  )

                prompt_form . add_prompt ( button )

        ENDIF

        prompt_form . start_prompt ()
        prompt_form . wait_prompt ()
        prompt_form . end_prompt ()

RETURN ( prompt_form . prompt_objects [ 1 ] . value  )

ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE get_results                Gets tests and results for sample, only   }
{                                    components marked with the flag AR0, AR1  }
{                                    and AR2. The result type of each          }
{                                    component determines how the specification}
{                                    is held.                                  }
{                                                                              }
{                                    If text the textual specification is      }
{                                    stored.                                   }
{                                                                              }
{                                    If Numeric then: (1) if the spec is       }
{                                    MIN/MAX the the MIN/MAX is stored.        }
{                                    (2) if the spec is open ended the MIN is  }
{                                    stored.                                   }
{                                                                              }
{                                    If Boolean TRUE or FALSE value is stored. }
{                                                                              }
{                                    Each result is compared with the          }
{                                    specification. If the component flag is   }
{                                    set to ARO the actual result is displayed.}
{                                    If the component flag is set to AR1 then  }
{                                    COMPLIES or DOES NOT COMPLY is held in    }
{                                    place of the result. If the component flag}
{                                    is set to AR2 then  <result> COMPLIES or  }
{                                    <result> DOES NOT COMPLY is held in place }
{                                    of the result.                            }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{  31/1/98      DMcN            Modified to move fix outspc initialisation bug }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  sample_id              value                sample identifier               }
{==============================================================================}

ROUTINE get_results ( VALUE sample_id )

DECLARE outspc, result_found, test_found, component_found, the_units, anal_ver, the_test


result_found    = FALSE
component_found = FALSE
test_found      = FALSE
the_units       = EMPTY




samp_txt = SELECT SAMPLE . id_text
           WHERE id_numeric = sample_id

			{------------------------------------------}
			{MC MOD 04/07/02                           }
			{The analysis verion of the test is needed }
			{so that the sample is related to the      }
			{correct version of the analysis           }
			{------------------------------------------}

anal_ver = SELECT TEST . analysis_version 
           WHERE sample = sample_id

			{MC End}





test_no  = SELECT TEST . test_number
           WHERE    ( sample = sample_id  )
           AND      ( status <> "X"       )
           ORDER ON order_num

i = 1


IF  test_no = EMPTY  THEN
    res_arr [ i , TEST_NAME ] = "No Test Assigned"
    res_arr [ i , RES_VAL   ] = " "
    res_arr [ i , TEST_UNIT ] = " "
    res_arr [ i , TEST_STAT ] = " "
    res_arr [ i , SMP_NAME  ] = STRIP ( sample_id )
    res_arr [ i , SMP_STAT  ] = SELECT SAMPLE . status
    res_arr [ i , SPC_VALUE ] = " "
    res_arr [ i , TEST_NUMB ] = test_no
    i = i + 1
ENDIF

WHILE ( test_no <> EMPTY ) DO

    test_found = TRUE

    product_id = SELECT sample . product_name

    IF product_id = EMPTY
        product_id = ""
    ENDIF

    version     = SELECT sample . product_version
    anal_id     = SELECT test . analysis_id
    test_status = SELECT test . status
    anal_ver    = SELECT test . analysis_version



    IF ( test_status <> "A" ) THEN
        flash_message ( "Test, ":anal_id:" is not Authorised", TRUE )
    ENDIF

				{------------------------------------------------}
				{MC, 07/06/02, Modification                      }
				{A rejected result(staus R) is not to be printed }
				{------------------------------------------------}

    comp = SELECT result . component_name
           WHERE   ( test_number = test_no )
           AND     ( order_number <> 0     )
	   AND     ( result . status <> "R")
	   AND     ( result . rep_control <> " "){MC MOD 15/07/02. Components with no flags are to be omitted) 
           ORDER ON order_number

				{MC, End Modification}


    WHILE comp <> EMPTY DO

        component_found = TRUE
        res_status = SELECT result . status
        res        = SELECT result . text

        outspc = "N/A"             {Moved from outside loop, DMcN 31/01/98}
                                   {ref change control LIMS-98-02         }
        IF res <> EMPTY
           result_found = TRUE
           res = STRIP ( res )
        ENDIF

		{---------------------------------------}
		{MC, 23/07/02, Modification             }
		{The following SELECT statement picks up}
		{the correct flag for a particular      }
		{analysis version.                      }
		{---------------------------------------}


	{flag = SELECT versioned_component . rep_control 
		WHERE ( analysis_version = anal_ver)
		AND   ( name = comp )}

		{MC END MOD 23/07/02}


{begin MK 09/01/03 Ref CC2003-001}
	flag = SELECT versioned_component . rep_control
       WHERE ( analysis         = anal_id )
	 AND   ( analysis_version = anal_ver) 
       AND   ( name             = comp    )

{end MK 09/01/03 Ref CC2003-001}

        IF TOUPPER ( LEFTSTRING ( anal_id, 4 )) = "DISS"

            IF ( INDEX ( comp, "% Released" )  > 0 ) OR
               ( INDEX ( comp, "Mean %VHCL" ) > 0 ) THEN

                flag = AR0
                outspc = ""

            ENDIF
        ENDIF

        IF ( flag = AR0 ) OR ( flag = AR1 ) OR ( flag = AR2 ) THEN

            {result_type = SELECT component . result_type}

		  {result_type = SELECT component_view . result_type}

	{	result_type = SELECT versioned_component . result_type
	        WHERE ( analysis = anal_id )
	        AND   ( name     = comp )
}
{begin MK 09/01/03 Ref CC2003-001}


result_type = SELECT versioned_component . result_type{MC 24/07/02}
	        WHERE ( analysis = anal_id )
	        AND   (analysis_version = anal_ver) 
		  AND   ( name     = comp )



{end MK 09/01/03 Ref CC2003-001}


            comp_entry_code =
                      SELECT mlp_components . entry_code
                      WHERE ( product_id      = product_id )
                      AND   ( product_version = version    )
                      AND   ( analysis_id     = anal_id    )
                      AND   ( component_name  = comp       )

            IF comp_entry_code <> EMPTY THEN

                in_spec = FALSE
                CSMLP_result ( product_id, version, anal_id, comp, level_id,
                               res, in_spec )

                IF res = EMPTY THEN
                    res = "No Result Entered"
                ELSE
                                         {====================================}
                                         { JMW, 01/05/96, Modification        }
                                         { Include the Units in the Result    }
                                         {====================================}

                    the_units = SELECT RESULT . units
                    IF the_units <> EMPTY  THEN
                        res = res : " " : the_units
                    ENDIF
			
	
                                         {====================================}
                                         { End of Modification                }
                                         {====================================}

                level_id = PAD ( level_id, " ", 10 )

                IF ( result_type = "N" ) OR ( result_type = "K" ) THEN

                                                  { JOD 18/08/1997     }
                    min = SELECT mlp_values . min_limit
                          WHERE ( entry_code = comp_entry_code )
                            AND ( level_id   = level_id        ) {MK 09/01/03 Ref CC2003-001}

                                                  { JOD 18/08/1997     }
                    max = SELECT mlp_values . max_limit
                          WHERE ( entry_code = comp_entry_code )
                            AND ( level_id   = level_id        ) {MK 09/01/03 Ref CC2003-001}




                   IF ( max = EMPTY ) OR ( STRIP ( max ) = "" ) THEN
                                                  { JMW, 31/05/96 }
                        outspc = min
                        outspc = substr ( outspc, "<", "<" )
                        outspc = substr ( outspc, ">", "> " )
                        outspc = substr ( outspc, "<=", "<= " )
                        outspc = substr ( outspc, ">=", ">=" )

                    ELSE
                        outspc = STRIP ( min ) : " to " : STRIP ( max )
                    ENDIF

                ELSEIF ( result_type = "B" ) THEN
                    outspc = STRIP ( SELECT mlp_values . boolean_pass )

                ELSE
                    outspc = SELECT mlp_values . text_spec
                               WHERE entry_code = comp_entry_code

                ENDIF

                IF outspc = EMPTY THEN outspc = "N/A" ENDIF

      		



		IF outspc <> "N/A" THEN
                    IF  NOT in_spec  THEN
                        IF  flag = AR1   THEN
                            res = "Does Not Comply"
                        ELSEIF  flag = AR2  THEN
                            res = STRIP ( res ) : " - " : "Does Not Comply"
                        ENDIF
                    ELSE
                        IF   flag = AR1    THEN
                            res = "Complies"
                        ELSEIF flag = AR2    THEN
                            res = STRIP ( res ) : " - " : "Complies"
                        ENDIF
                    ENDIF
	  	ENDIF
		

                ENDIF { res = EMPTY }
                                                  { JOD 18/08/1997     }

           
            ENDIF

                                       {====================================}
                                         { JMW, 01/05/96, Modification        }
                                         { Include the Units in the Spec.     }
                                         {====================================}

          
            IF ( the_units <> EMPTY ) AND ( outspc <> "N/A" )THEN
                 outspc = outspc : " " : the_units
            ENDIF
      
				{=============================}
				{Modification by MC 11/03/02  }
				{ Concatenate units to all    } 
				{results whether specification}
				{ exists or not.              } 
				{=============================}

	    
	    the_units = SELECT RESULT . units
	    IF ( the_units <> EMPTY ) AND ( outspc =  "N/A" ) AND ( flag = AR0 )  THEN
		 res = res : " " : the_units 
	    ELSEIF ( the_units <> EMPTY ) AND ( outspc =  "N/A" ) AND ( flag = AR1 )  THEN
		 res = res : " " : the_units  
	    ELSEIF ( the_units <> EMPTY ) AND ( outspc =  "N/A" ) AND ( flag = AR2 )  THEN
		 res = res : " " : the_units  
	    ENDIF 
 
           
      
      
				{=============================}
				{ MC: End of Modification     }
				{=============================}

                              { JOD, 28/10/1997 }

            IF ( result_type = "D" ) AND ( ( res <> EMPTY ) AND
                NOT ( BLANK ( res ) ) ) THEN

                res = LEFTSTRING ( res, 11 )

            ENDIF
                                {====================================}
                                { End of Modification                }
                                {====================================}

            res_arr [ i , ANL_NAME ]  = anal_id
            res_arr [ i , SMP_NAME ]  = STRIP ( sample_id )
            res_arr [ i , SMP_STAT ]  = SELECT SAMPLE . status
            res_arr [ i , TEST_NAME]  = comp
            res_arr [ i , RES_VAL  ]  = res
            res_arr [ i , TEST_UNIT]  = SELECT RESULT . units
            res_arr [ i , TEST_STAT]  = " "
            res_arr [ i , SPC_VALUE]  = outspc
            res_arr [ i , TEST_NUMB] = test_no

            i = i + 1

        ENDIF
        NEXT result
        comp = SELECT result . component_name

    ENDWHILE  { While t_comp }

    NEXT test
    test_no = SELECT test . test_number
ENDWHILE



IF     NOT test_found

   flash_message ( " No Reportable Tests Found for this Sample " , TRUE )
   EXIT

ELSEIF NOT component_found

   flash_message ( " No components found for Reportable Tests " , TRUE )
   EXIT

ELSEIF NOT result_found  THEN

   flash_message ( " No results found for Reportable Tests " , TRUE )
   EXIT

ENDIF

ENDROUTINE




{==============================================================================}
{                                                                              }
{ ROUTINE substr                          String Substitution Function         }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  31/05/96     JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  str                    VALUE                String                          }
{  inp_str                VALUE                Search String                   }
{  out_str                VALUE                Substitute String               }
{==============================================================================}

ROUTINE substr ( VALUE str, VALUE inp_str, VALUE out_str )

IF ( INDEX ( str, inp_str ) > 0 )
                                    { Accounts for length of <= and >= }
    len_inp_str = LENGTH ( STRIP ( inp_str ) )
    len_str     = LENGTH ( STRIP ( str     ) )
    str = SUBSTRING ( str, len_inp_str+1, len_str )
    str = out_str : str

ENDIF
RETURN ( str )
ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE padstr                          Pads the String                      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  31/05/96     JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  str                    VALUE                String                          }
{==============================================================================}

ROUTINE padstr ( VALUE str )

DECLARE len_str, padded_str
CONSTANT four_zeroes = 4


    str        = STRIP ( str )
    len_str    = LENGTH ( str )
    padded_str = PAD ( "", "0", four_zeroes - len_str )
    str        = padded_str : str

RETURN ( str )
ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE get_record_details                                                   }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/03/00     GF              Selects the data to appear in each of the      }
{                               records of the temporary table.                }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{==============================================================================}
ROUTINE get_record_details (sample_id)

    DECLARE x, y, z, type, comment, test, specification, result, com1, com2, i, comment_count

    comment_count = 1
    x = size_of_array(word_usp_res_array)


    y = size_of_array(word_ep_res_array)
    z = size_of_array(word_jp_res_array)



    IF (x > 1) THEN
      
       type = "USP"
       com1 = ""
       com2 = ""

       i = 1

        WHILE ( i <= x ) 
          
            comment = word_usp_res_array [ i, 1]
            test = word_usp_res_array [ i, 2]
            specification = word_usp_res_array [ i, 3]
            result = word_usp_res_array [ i, 4]

                IF (comment <> "" ) AND (comment <> "COMMENT") THEN
                    com1 = comment_array [ comment_count, 1]
                    com2 = comment_array [ comment_count, 2]
                    comment_count = comment_count + 1
                ELSE 
                    com1 = ORBIS_NC
                    com2 = ORBIS_NC
                ENDIF

        IF (comment <> "COMMENT") THEN

            create_record (sample_id, type, comment, test, specification, result, com1, com2)

        ENDIF
    
            i = i + 1

        ENDWHILE

    ENDIF

    IF (y > 1) THEN
      
       type = "EP"
       com1 = ""
       com2 = ""

       i = 1

        WHILE ( i <= y ) 
          
            comment = word_ep_res_array [ i, 1]
            test = word_ep_res_array [ i, 2]
            specification = word_ep_res_array [ i, 3]
            result = word_ep_res_array [ i, 4]

                IF (comment <> "" ) AND ( comment <> "COMMENT") THEN
                    com1 = comment_array [ comment_count, 1]
                    com2 = comment_array [ comment_count, 2]
                    comment_count = comment_count + 1
                ELSE 
                    com1 = ORBIS_NC
                    com2 = ORBIS_NC
                ENDIF

        IF (comment <> "COMMENT") THEN

        create_record (sample_id, type, comment, test, specification, result, com1, com2)

        ENDIF
    
            i = i + 1

        ENDWHILE

    ENDIF

    IF ( z > 1) THEN
      
       type = "JP" 
       com1 = ""
       com2 = ""

       i = 1

        WHILE ( i <= z ) 
          
            comment = word_jp_res_array [ i, 1]
            test = word_jp_res_array [ i, 2]
            specification = word_jp_res_array [ i, 3]
            result = word_jp_res_array [ i, 4]

                IF (comment <> "" ) AND (comment <> "COMMENT")THEN
                    com1 = comment_array [ comment_count, 1]
                    com2 = comment_array [ comment_count, 2]
                    comment_count = comment_count + 1
                ELSE 
                    com1 = ORBIS_NC
                    com2 = ORBIS_NC
                ENDIF

        IF (comment <> "COMMENT") THEN

            create_record (sample_id, type, comment, test, specification, result, com1, com2)

        ENDIF
    
            i = i + 1


        ENDWHILE

    ENDIF


ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE create_record                                                        }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/03/00     GF              assigns collected data to a temporary          }
{                                      table factor                            }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{==============================================================================}

ROUTINE create_record (sample_id, type, comment, test, specification, result, com1, com2)

    DECLARE test_info_no, check_ok, x, i

            test_info_no = INCREMENT ( "TEST_INFO", "TEST_INFO_INCREMENT")

            test_info_no = PAD ( STRIP(test_info_no), "", 10 )
            
            RESERVE ENTRY TEST_INFO, test_info_no, check_ok

{            flash_message ( "-" : test_info_no : "-", true )
 }
            IF (check_ok <> EMPTY )
            
                flashmessage (check_ok, true)

            ELSE
                ASSIGN TEST_INFO . info_sample_id = sample_id
                ASSIGN TEST_INFO . info_type = type
                ASSIGN TEST_INFO . info_comment = comment
                ASSIGN TEST_INFO . info_test = test
                ASSIGN TEST_INFO . info_specification = specification
                ASSIGN TEST_INFO . info_result = result
                ASSIGN TEST_INFO . info_com1 = com1
                ASSIGN TEST_INFO . info_com2 = com2

                START WRITE TRANSACTION "Enter test details "

                UPDATE TEST_INFO

                COMMIT 
           
            ENDIF
            
ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE delete_record                                                        }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/03/00     GF              Deletes all records from the temporary table   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{==============================================================================}

ROUTINE delete_record (sample_id)

    DECLARE name_table, name_key, cont, rec_count, db_rec, status

        name_table = "TEST_INFO"
        name_key = "test_info_no"
        cont = TRUE
        rec_count = 0

        WHILE cont DO

            START READ TRANSACTION "remove the record"
           
            db_rec = SELECT 'name_table' . 'name_key'
                FOR UPDATE
                WHERE ( info_sample_id = sample_id )

            IF ( db_rec = EMPTY ) THEN
    
                cont = FALSE 
            
            ELSE 

                START WRITE TRANSACTION "remove the record"
                DELETE 'name_table'
                COMMIT, status

                IF status <> EMPTY THEN
                    flash_message ( "Remove Status : ":status, TRUE)
                ELSE 
                    rec_count = rec_count + 1
                ENDIF
        

            ENDIF

        ENDWHILE

ENDROUTINE 


{ Generate Infomaker report }
ROUTINE imprint_print ( sample_id )


	DECLARE imprint_report

	{ Define the class, then create an instance }

	define_imprint_class ( )

	CREATE OBJECT IMPRINT, imprint_report

	
	{ Generate a report }

	imprint_report . create_ole_object( )

	imprint_report . reset_ole_object( )

	imprint_report . add_parameter ( sample_id )

  { 1.05 }
        DECLARE path

        path = get_imprint_dir ()

        imprint_report . library  = path : "\" : "elan_custom.pbl"
	imprint_report . report  = "sar"

	imprint_report . generate ( )

	imprint_report . ole_object = EMPTY 

ENDROUTINE


{ 1.05 }
{ Gets imprint directory on server }

ROUTINE get_imprint_dir 

   { "smp$imprint:":xxx.yyy   didnt work }

    DECLARE dir , delim, i
    
    delim = ";"
    dir = LOGICAL("SMP$imprint")

    i = INDEX (dir, delim)

    IF (i>0) THEN

        dir = SUBSTRING (dir, 1, i-STRINGLENGTH (delim))

    ENDIF

    dir = STRIP (dir)

    RETURN (dir)

ENDROUTINE    {  get_imprint_dir   }










