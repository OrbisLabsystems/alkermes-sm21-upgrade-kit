{==============================================================================}
{                                                                              }
{  ORBIS INFORMATION SYSTEMS                                                   }
{                                                                              }
{  Filename         : TOC_PROCESS_RESULTS2.RPF                                 }
{  Version          : 3.0                                                      }
{  Document Ref.    : OR01019-1                                                }
{  Author           : Damian Kelly and Darragh Cunnigham                       }
{  Date Created     : 25/04/01                                                 }
{  Responsible      :                                                          }
{  Description      : This program parses results from the files generated by  }
{                     the Anatel TOC Analyser and downloads results to LIMS.   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Libraries Used           Routine             Description                    }
{  --------------           -------             -----------                    }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{                                                                              }
{  Ver.     Date        By          Description                                }
{  ----     ----        --          -----------                                }
{  1.0      25/04/01    DK          Release Version                            }
{  2.0      16/05/02    MK          Modified Code to check for events that are }
{				    greated then 24 hours in length            }
{  3.0      06/08/02    MK          Modified to process each instrument in the }
{				    result output file separately. i.e. logs in}
{				    a separate sample for each instrument      }
{  4.0      29/01/09    MF          Modified to remove references to SN2703 &  }
{                                   replace with new sensor ASTHEC TOC2 as per }
{                                   Change Control 2100012863                  }
{  5.0      20/02/09    MF          Modified to remove refer to ASTEC TOC2 &   }
{                                   replace with SN2703  as per                }
{                                   Change Control 2100012892                  }  
{  6.0      14-MAR-14   LD          Replaced SELECT MAX statement for          } 
{                                   SQL server with ORDER ON ... DESCENDING.   }                 
{==============================================================================}

SET COMPILE_OPTION DECLARE
ENABLE WINDOWS

SET NAME "DEFER\"
SET NOTPROTECTED

JOIN STANDARD_LIBRARY STD_PROMPT
JOIN LIBRARY $LIB_UTILS
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_TRANSFER

{==============================================================================}
{                                                                              }
{ TOC PROGRAM CONSTANTS.........ANY CHANGES TO BE MADE HERE................... }
{                                                                              }
{==============================================================================}

{ FTP Specific Constants }

CONSTANT IP_ADDRESS           = "10.1.1.154"
CONSTANT THE_USERNAME         = "administrator"
CONSTANT THE_PASSWORD         = "administrator"

CONSTANT VMS_SERVER_PATH      = "SMP$ROOT:[USERFILES]"

{MK 3 December 2001 - Constants added to hold file paths of where FTP transfers
 and file path where the file is copied to. [VGSM_DB.SERVER] handles 
 all background reports therefore specifed full VMS location to allow
 transfer of files to smp$userfiles  }

CONSTANT VMS_FTP_PATH         = "DISK$PRDSMP:[VGSM_DB.SERVER]"
CONSTANT VMS_USERFILES_PATH   = "DISK$PRDSMP:[VGSM_DB.USERFILES]"

{ TOC File Details }

CONSTANT TOC_FILE_EXTENSION   = ".TOC"
CONSTANT ARC_TOC_FILE_EXT     = ".TOC"

CONSTANT VMS_CLIENT_PATH      = "C:\TOC Files"
CONSTANT VMS_CLIENT_ARC_PATH  = "C:\TOC Files\Archive"


{ TOC Analyses Details }

CONSTANT TOC_SAMPLE_TEMPLATE  = "TOC_TEMP2"
CONSTANT TOC_ANALYSIS         = "TOC_SPEC"
CONSTANT TOC_ANALYSIS_NO_SPEC = "TOC_NOSPEC"
CONSTANT TIME_COMPONENT       = "Time Stamp"
CONSTANT TOC_COMPONENT        = "TOC"
CONSTANT COND_COMPONENT       = "Conductivity"
CONSTANT TEMP_COMPONENT       = "Temperature"

{ TOC Summary Analysis Details }

CONSTANT SUMM_TOC_COMP        = "Summary TOC"
CONSTANT SUMM_COND_COMP       = "Summary Conductivity"
CONSTANT SUMM_NOTES           = "Notes"

{ TOC Summary Analysis Limit Checking Details }

CONSTANT SUMM_IN_SPEC_RES     = "Does Comply"
CONSTANT SUMM_OUT_SPEC_RES    = "Does Not Comply"
CONSTANT SUMM_DEFAULT_NOTES   = "All Tests Compared against Specifications"

{ TOC Program Constants}

CONSTANT TOC_FILE_DATA_ROW_NO = 3 { TOC Raw data starts on row 3 of file   }
CONSTANT NO_OF_COMPS_TO_CHECK = 2 { 2 Components to do auto limit checking }

GLOBAL CONSTANT TOC_INSTRUMENT_1 = "SN-2724" {Name of TOC Instrument for which results are reported}
GLOBAL CONSTANT TOC_INSTRUMENT_2 = "SN-2703" {Name of TOC Instrument for which results are reported}
GLOBAL CONSTANT TOC_INSTRUMENT_3 = "SN-2710" {Name of TOC Instrument for which results are reported}
GLOBAL CONSTANT NO_TOC_INSTRUMENTS = 2

GLOBAL CONSTANT TOC_SAMPLE_TEMPLATE_1  = "TOC_TEMP2"
GLOBAL CONSTANT TOC_SAMPLE_TEMPLATE_2  = "TOC_TEMP4"
GLOBAL CONSTANT TOC_SAMPLE_TEMPLATE_3  = "TOC_TEMP3"
 
main()

{==============================================================================}
{                                                                              }
{  ROUTINE main                                                                }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  25/04/01     DK              Main Routine for Report.                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE main

    DECLARE file_name, mapped_drive, the_date, result_array, arc_file,
            arc_map_drive, status, check_exist, samp_id, test_array,
            summary_test, maintanence_times, summ_notes_res{,
            client_file, server_file}

    DECLARE operation, node, username, password, input_filename, count,
	    toc_instrument, samp_template

    ARRAY result_array
    ARRAY test_array
    ARRAY maintanence_times

    summ_notes_res = ""

    IF GLOBAL("PLATFORM") = "NT" THEN

        mapped_drive =  LOGICAL("SMP$TOCDATA_2")
        arc_map_drive = LOGICAL("SMP$TOC_ARCDATA_2")

    ENDIF

    SET DATE FORMAT "MONDZ"

    the_date = TODAY - "0001 00:00:00.00"


    IF GLOBAL("PLATFORM") = "NT" THEN

        file_name = mapped_drive:the_date:TOC_FILE_EXTENSION
        arc_file = arc_map_drive:the_date:ARC_TOC_FILE_EXT

    ELSE
{
        client_file = VMS_CLIENT_PATH:"\":the_date:TOC_FILE_EXTENSION
        server_file = VMS_CLIENT_ARC_PATH:"\":the_date:TOC_FILE_EXTENSION
}
        file_name   = VMS_USERFILES_PATH:the_date:TOC_FILE_EXTENSION
{
        transfer_to_server( client_file,
                            file_name   )
}
        operation = "get"
        node = IP_ADDRESS
        username = THE_USERNAME
        password = THE_PASSWORD
        input_filename = the_date:TOC_FILE_EXTENSION
        file_name = VMS_USERFILES_PATH:the_date:TOC_FILE_EXTENSION

        transfer_file ( operation,
                        node,
                        username,
                        password,
                        input_filename,
                        file_name,
                        status)

        IF status <> EMPTY THEN

            log_toc_error ( status ) { WRITE ERRORS TO LOGFILE }

        ENDIF


    ENDIF

    RESTORE DATE FORMAT

    check_exist = FILE EXISTS(file_name)

    IF check_exist THEN

        { COPY FILE TO ARCHIVE FOLDER BEFORE PARSING }

        IF GLOBAL("PLATFORM") = "NT" THEN

            FILE COPY file_name, arc_file, status

        ELSE
{
            transfer_from_server( file_name   ,
                                  server_file )
}


            status = EMPTY

        ENDIF

        IF status <> EMPTY THEN

            log_toc_error ( status ) { WRITE ERRORS TO LOGFILE }

        ENDIF

{==============================================================================}
{Orbis - 06/08/02 - SOM - loops around to process each instrument separatly    }
{==============================================================================}

	count = 0

	REPEAT 

    	    ARRAY result_array
    	    ARRAY test_array
    	    ARRAY maintanence_times

	    count =  count + 1
	
	    IF count = 1 THEN 

		toc_instrument = TOC_INSTRUMENT_1
		samp_template  = TOC_SAMPLE_TEMPLATE_1
	    ELSEIF count = 2 THEN

		toc_instrument = TOC_INSTRUMENT_2
		samp_template  = TOC_SAMPLE_TEMPLATE_2
	    ELSEIF count = 3 THEN

		toc_instrument = TOC_INSTRUMENT_3
		samp_template  = TOC_SAMPLE_TEMPLATE_3
	    ENDIF

            parse_file (file_name,
                        result_array,
		        toc_instrument )

            IF SIZE_OF_ARRAY(result_array) > 0 THEN

            	check_toc_maintanence( maintanence_times,
                                       the_date,
				       toc_instrument          )

            	create_sample_tests_and_results ( samp_id,
                                                  test_array,
                                                  result_array,
                                                  summary_test,
                                                  maintanence_times,
                                                  summ_notes_res,
					          samp_template,
						  toc_instrument )

            	check_result_limits ( samp_id,
                                      test_array,
                                      summary_test,
                                      summ_notes_res )

            ENDIF


	UNTIL count = NO_TOC_INSTRUMENTS

{==============================================================================}
{Orbis - 06/08/02 - EOM =======================================================}

        { DELETE FILE AFTER PARSING }

        IF GLOBAL("PLATFORM") = "NT" THEN

            FILE DELETE file_name, status

            IF ( status <> EMPTY )

                log_toc_error ( status )

           ENDIF

        ENDIF

    ELSE

        status = "ERROR.........File ":STRIP(file_name):" does not Exist!"
        log_toc_error ( status ) { WRITE ERRORS TO LOGFILE }

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE parse_file                                                          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  25/04/01     DK              Routine to Parse TOC File contents.            }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE parse_file( file_name, result_array, toc_instrument )

    DECLARE file_to_parse, file_open_status, parsed_string, file_read_status,
            column_count, row_count, delim, counter, tab_posn, toc_row_count,
            file_close_status

    DECLARE date_entered,time_entered, inst, inst_check

    delim = ASCII(44)
    file_to_parse = file_name
    toc_row_count = 0

    FILE OPEN file_to_parse, file_open_status

    IF file_open_status <> EMPTY THEN

        log_toc_error ( file_open_status ) { WRITE ERRORS TO LOGFILE }

    ENDIF

    inst_check = FALSE
    row_count = 1
    column_count = 1

    { Compensate for First Two rows in File with no Data }

    REPEAT

        FILE READ file_to_parse, parsed_string, file_read_status
        toc_row_count = toc_row_count + 1

    UNTIL toc_row_count = TOC_FILE_DATA_ROW_NO

    IF file_read_status <> EMPTY THEN

        log_toc_error ( file_read_status) { WRITE ERRORS TO LOGFILE }

    ELSE

        WHILE (file_read_status = EMPTY) DO

            tab_posn = INDEX (parsed_string,delim)

            counter = 1

            WHILE (tab_posn <> 0) DO

                parsed_string = parsed_string # LEFTSTRING(parsed_string, tab_posn)

                counter = counter + 1

		IF (counter = 2) THEN

                    tab_posn = INDEX (parsed_string,delim)
                    date_entered = LEFTSTRING(parsed_string, tab_posn-1)
		    
		ENDIF

		IF (counter = 3) THEN

                    tab_posn = INDEX (parsed_string,delim)
                    time_entered = LEFTSTRING(parsed_string, tab_posn-1)
		    
		ENDIF

		IF (counter = 6) THEN

  		    tab_posn = INDEX (parsed_string,delim)
                    inst = LEFTSTRING(parsed_string, tab_posn-1)

{Orbis 06/08/02 - Check for three different instruments associated with NCD suite}
		    
		    IF 	(inst = toc_instrument) THEN

		    	inst_check = TRUE

		    	date_entered = DATE(date_entered:" ":time_entered:".00")
		 
			result_array[row_count, 1] = date_entered

			column_count = 2

                    ENDIF

		ENDIF

                IF (counter = 13)|(counter = 20)|(counter = 21) THEN

		    IF inst_check = TRUE THEN

                    	tab_posn = INDEX (parsed_string,delim)
                    	result_array[row_count, column_count] = LEFTSTRING(parsed_string, tab_posn-1)
                    	column_count = column_count + 1
		
		    ENDIF

                ELSE

                    tab_posn = INDEX (parsed_string,delim)

                ENDIF

            ENDWHILE

            FILE READ file_to_parse, parsed_string, file_read_status

            IF ( file_read_status <> EMPTY ) AND
               ( STRIP(file_read_status) <> "Attempt to read past end of text file") THEN

                log_toc_error ( file_read_status) { WRITE ERRORS TO LOGFILE }

            ENDIF

	    IF inst_check = TRUE THEN

                row_count = row_count + 1

	    ENDIF

            column_count = 1
	    inst_check = FALSE

        ENDWHILE

    ENDIF

    FILE CLOSE file_to_parse, file_close_status

    IF file_close_status <> EMPTY THEN

        log_toc_error ( file_close_status ) { WRITE ERRORS TO LOGFILE }

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE check_toc_maintanence                                               }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  01/05/01     DK              Check Maintanence/Sanitistaion times           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE check_toc_maintanence( maintanence_times,
                               the_date,
			       toc_instrument          )

    DECLARE the_rec, day_after, count, any_recs

    count = 1

    day_after = the_date + "001 00:00:00.00"

    { Find any sanitisation records for the day }

    the_rec = select toc_maintenance_2 . modified_on
               WHERE modified_on >= the_date
                AND  modified_on <= day_after
		AND  analyser_id = toc_instrument
                ORDER ON toc_sequence ASCENDING

    IF the_rec <> EMPTY THEN

        WHILE the_rec <> EMPTY DO

            maintanence_times[count, 1] = the_rec
            maintanence_times[count, 2] = select toc_maintenance_2 . started
            maintanence_times[count, 3] = select toc_maintenance_2 . toc_sequence
            maintanence_times[count, 4] = select toc_maintenance_2 . toc_sequence
            maintanence_times[count, 5] = select toc_maintenance_2 . old_toc_seq
            maintanence_times[count, 6] = select toc_maintenance_2 . event_id

            count = count + 1

            NEXT TOC_MAINTENANCE_2
            the_rec = select toc_maintenance_2 . modified_on

        ENDWHILE

    ELSE

        { IF No Records found for current day, find last record on last day
          that records were generated.                                    }

        any_recs = select toc_maintenance_2 . toc_sequence
                    WHERE modified_on > " 1-JAN-1900 00:00:00.00"

        IF any_recs <> EMPTY THEN

            the_rec = SELECT TOC_MAINTENANCE_2 . modified_on    {6.0}
                      WHERE modified_on < the_date
		          AND analyser_id = toc_instrument
                      ORDER ON modified_on DESCENDING

	    IF the_rec <> EMPTY THEN

            	the_rec = select toc_maintenance_2 . modified_on
                       		WHERE modified_on = the_rec

            	maintanence_times[count, 1] = the_rec
            	maintanence_times[count, 2] = select toc_maintenance_2 . started
            	maintanence_times[count, 3] = select toc_maintenance_2 . toc_sequence
            	maintanence_times[count, 4] = select toc_maintenance_2 . toc_sequence
            	maintanence_times[count, 5] = select toc_maintenance_2 . old_toc_seq
            	maintanence_times[count, 6] = select toc_maintenance_2 . event_id

	    ENDIF

       ENDIF


    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE create_sample_tests_and_results                                     }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  25/04/01     DK              Create Sample, add tests and Results           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE create_sample_tests_and_results( samp_id,
                                         test_array,
                                         result_array,
                                         summary_test,
                                         maintanence_times,
                                         summ_notes_res,
					 samp_template,
					 toc_instrument     )

    DECLARE counter, test_id, put_test_array, status_array, log_mess,
            count, the_date, limit_check_on, result_date, toc_proc_no,
            event_id, the_anal

    ARRAY put_test_array
    ARRAY status_array

    limit_check_on = TRUE

    count = 1
    the_date = TODAY - "0001 00:00:00.00"

    the_date = LEFTSTRING(the_date, 11)

    samp_id = NEW_SAMPLE(" ",samp_template," ")
    summary_test = SELECT TEST . test_number WHERE
                    sample = samp_id

    log_mess = "Logged in TOC Sample ":STRIP(samp_id): " for TOC instrument ":toc_instrument

    log_toc_error (log_mess)

    counter = 1

    put_test_array[1,1] = "component_name"
    put_test_array[1,2] = "text"
    put_test_array[2,1] = TIME_COMPONENT
    put_test_array[3,1] = TOC_COMPONENT
    put_test_array[4,1] = COND_COMPONENT
    put_test_array[5,1] = TEMP_COMPONENT

    WHILE (counter <= size_of_array(result_array)) DO

       {result_date = the_date:" ":result_array[counter, 1]:".00"}

	result_date = result_array[counter, 1]
       check_results_for_maintanence ( limit_check_on,
                                       result_date,
                                       maintanence_times,
                                       toc_proc_no,
                                       event_id    )

       IF limit_check_on THEN { No Maintanence Occuring }

           test_id = NEW_TEST(samp_id, TOC_ANALYSIS)

           test_id = STRIP(test_id)

           log_mess = "New Test ":STRIP(Test_id):". Limits applied to Test Results taken at ":
                       STRIP(result_date)

           summ_notes_res = summ_notes_res:""

       ELSE { TOC Maintanence, DO NOT Check results against Specifications }

           test_id = NEW_TEST(samp_id, TOC_ANALYSIS_NO_SPEC)

           test_id = STRIP(test_id)

           log_mess = "New Test ":STRIP(Test_id):" for results taken at ":STRIP(result_date):
                      ". NO Limits applied to Results due to ":STRIP(event_id):
                      ". TOC Event No. ": STRIP(toc_proc_no)

           the_anal = TOC_ANALYSIS_NO_SPEC

           summ_notes_res = "No Limits Checked on any tests called ":STRIP(the_anal)


       ENDIF

       test_array[counter] = test_id

       log_toc_error (log_mess)

       put_test_array[2,2] = result_date
       put_test_array[3,2] = result_array[counter, 2]
       put_test_array[4,2] = result_array[counter, 3]
       put_test_array[5,2] = result_array[counter, 4]

       PUT_TEST_RESULTS test_id, put_test_array, status_array

       {ERROR LOGGING}

       WHILE (count <> 5) DO

           IF (status_array[count] <> EMPTY) THEN

               log_toc_error ( status_array[count] )

           ENDIF

           count = count + 1

       ENDWHILE

       counter = counter + 1

    ENDWHILE

ENDROUTINE


{==============================================================================}
{                                                                              }
{  ROUTINE check_result_limits                                                 }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  30/04/01     DK              Check TOC results against specifications       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE check_result_limits ( samp_id,
                              test_array,
                              summary_test,
                              summ_notes_res )

    DECLARE out_of_spec, count, comp_counter, the_comp, summ_comp, summ_res,
            log_mess

    count = 1
    comp_counter = 1
    the_comp = TOC_COMPONENT
    summ_comp = SUMM_TOC_COMP
    summ_res = SUMM_IN_SPEC_RES

    { Do Limit Checking for TOC Component first then loop and do Condunctivity }

    WHILE comp_counter <= NO_OF_COMPS_TO_CHECK

        REPEAT

            out_of_spec = SELECT RESULT . out_of_range
                           WHERE test_number = test_array[count]
                           AND name = the_comp

            count = count + 1

        UNTIL ( count > SIZE_OF_ARRAY ( test_array ) ) OR
              ( out_of_spec = TRUE)

        IF out_of_spec = TRUE THEN

            summ_res = SUMM_OUT_SPEC_RES

        ELSE

            summ_res = SUMM_IN_SPEC_RES

        ENDIF

        NEWRESULT(samp_id, summary_test, summ_comp, summ_res, "")

        log_mess = STRIP(summ_comp):" ":summ_res
        log_toc_error(log_mess)

        comp_counter = comp_counter + 1
        the_comp = COND_COMPONENT
        summ_comp = SUMM_COND_COMP

        count = 1
        out_of_spec = FALSE

     ENDWHILE

     summ_comp = SUMM_NOTES

     IF summ_notes_res <> "" THEN

         summ_res = summ_notes_res

     ELSE

         summ_res  = SUMM_DEFAULT_NOTES

     ENDIF

     { Enter Summary Notes Result }

     NEWRESULT(samp_id, summary_test, summ_comp, summ_res, "")

     log_mess = STRIP(summ_comp):" ":summ_res
     log_toc_error(log_mess)

     summ_notes_res = ""

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE check_results_for_maintanence                                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  01/05/01     DK              Check TOC File Results against Maintanence     }
{                               Records.                                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE check_results_for_maintanence ( limit_check_on,
                                        result_date,
                                        maintanence_times,
                                        toc_proc_no,
                                        event_id    )

    DECLARE count, no_of_recs, is_started, maintanence_time, stop_time,
            stop_toc_seq, pre_maintanence_time

{Orbis - MK 16-MAY-2002 - Removed - ", res_day, event_day"}

    count = 1
    limit_check_on = TRUE

    no_of_recs = SIZE_OF_ARRAY ( maintanence_times )

    IF no_of_recs > 0 THEN

        WHILE count <= no_of_recs DO

            maintanence_time = maintanence_times [count, 1]
            is_started       = maintanence_times [count, 2]

{Orbis - MK 16-MAY-2002 - Removed
            res_day = LEFTSTRING(result_date, 11)
            event_day = LEFTSTRING(maintanence_time, 11)
Orbis - MK 16-MAY-2002 - End of Modifications}
            IF maintanence_time <> EMPTY THEN

                IF ( ( result_date >= maintanence_time )   AND
                     ( is_started = TRUE               ) )  OR

		 ( ( result_date <= maintanence_time )   AND
                     ( is_started = FALSE              ) 
		{ AND ( event_day <> res_day            )  }
							)  THEN

                    toc_proc_no = maintanence_times [count, 4]
                    event_id    = maintanence_times [count, 6]

                    stop_toc_seq = maintanence_times [count + 1, 5]
                    stop_time    = maintanence_times [count + 1, 1]



{Orbis - MK 16-MAY-2002 - Modification made to check for events greater then a day }

		    IF is_started = FALSE THEN

	    		IF count = 1 THEN

			    stop_toc_seq = empty

	    		ELSE
			    pre_maintanence_time = maintanence_times [count - 1, 1]

			    IF result_date <= pre_maintanence_time THEN
				stop_toc_seq = 1
			    ENDIF

			ENDIF
		    ENDIF

{Orbis - MK 16-MAY-2002 - End of Modifications ************************************}	

                    IF ( stop_toc_seq = EMPTY ) THEN

                        limit_check_on = FALSE { Maintanence ON, Dont Check Specs }
                        count = no_of_recs + 1 { Break out of loop                }

                    ELSEIF (( stop_toc_seq >= toc_proc_no ) AND
                        ( result_date <= stop_time   )) THEN

                        limit_check_on = FALSE { Maintanence ON, Dont Check Specs }
                        count = no_of_recs + 1 { Break out of loop                }

                    ENDIF

                    count = count + 1 { Keep on checking records }

                ELSE

                    count = count + 1 { Keep on checking records }
                    limit_check_on = TRUE

                ENDIF

            ELSE

                count = count + 1 { Keep on checking records }

            ENDIF

        ENDWHILE

    ELSE

        { No Maintanence Records to Check for this Day }
        limit_check_on = TRUE

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE log_toc_error                                                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  25/04/01     DK              Log Any TOC File Manipulation Errors           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

GLOBAL ROUTINE log_toc_error ( file_error_status )

    DECLARE mapped_drive, the_date, file_name, check_ok, check_exist

    IF GLOBAL("PLATFORM") = "NT" THEN

        mapped_drive = "SMP$TOCDATA_2:"

    ELSE

        mapped_drive = "SMP$LOGFILES:"

    ENDIF

    the_date = TODAY
    the_date = LEFTSTRING(the_date, 11)
    the_date = STRIP(the_date)
    file_name = mapped_drive:the_date:"_TOC_LOGFILE.TXT"

    the_date = NOW
    file_error_status = the_date:"...":STRIP(file_error_status)

    check_exist = FILE EXISTS(file_name)

    IF check_exist = TRUE THEN

        FILE EXTEND file_name, check_ok
        FILE WRITE file_name, file_error_status, check_ok
        FILE CLOSE file_name, check_ok

    ELSE

        FILE CREATE file_name, check_ok

        IF (check_ok = EMPTY) THEN

        FILE OPEN file_name, check_ok
        FILE WRITE file_name, file_error_status, check_ok
        FILE CLOSE file_name, check_ok

        ENDIF

    ENDIF

ENDROUTINE

ROUTINE lib_file_write ( VALUE filename,
                               lines,
                               status   )

    DECLARE i

    FILE CREATE filename, status

    i = 1

    WHILE ( i <= size_of_array( lines ) )
      AND ( lib_file_write_line( filename, lines[i], status ) )

        i = i + 1

    ENDWHILE

    IF ( status = EMPTY )

        FILE CLOSE filename, status

    ENDIF

    RETURN( status = EMPTY )

ENDROUTINE

ROUTINE lib_file_write_line ( VALUE filename,
                              VALUE line,
                                    status )

    FILE WRITE filename, line, status

    RETURN( status = EMPTY )

ENDROUTINE

ROUTINE transfer_file ( VALUE operation,
                        VALUE node,
                        VALUE username,
                        VALUE password,
                        VALUE input_filename,
                        VALUE local_filename,
                        status)

    DECLARE ftp
    DECLARE i
    DECLARE success
    DECLARE ftp_com_file
    DECLARE directory

    ARRAY ftp       	 ARRAY_SIZE(0)

    success = FALSE
    status = EMPTY

    directory = "smp$textreports:"
    ftp_com_file = directory : "ftp.com"

    i = 0
    i = i + 1       ftp[i] = "ftp"
    i = i + 1       ftp[i] = "open ":node
    i = i + 1       ftp[i] = "user ":username: " ":password
    i = i + 1       ftp[i] = operation : " " : input_filename : " " : local_filename 
    i = i + 1       ftp[i] = "bye"

    IF lib_file_write( ftp_com_file, ftp, status )

        SPAWN "@":ftp_com_file, status quietly

        IF status = EMPTY THEN

            FILE DELETE ftp_com_file

        ENDIF

    ENDIF

    RETURN( success )

ENDROUTINE














                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          