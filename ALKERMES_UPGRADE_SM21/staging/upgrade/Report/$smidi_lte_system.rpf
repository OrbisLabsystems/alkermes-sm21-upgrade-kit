{******************************************************************************
*
* Module Name   : $SMIDI_LTE_SYSTEM
*
* Purpose       : Laboratory Table Editor for SM-IDI servers
*
* Document Ref. :
*
* Specification :
*
* Portability   : OVMS, Unix, NT and Windows 2000
*
* Re-entrant    :
*
*
* Modification History
* By        Date        Reason _____________________________________________
*
*******************************************************************************}

ENABLE WINDOWS

SET NOTPROTECTED
SET NAME "DISPLAY/"
SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_ARRAY            {   add_slice, remove_slice          }
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT     {   prompt with select array         }
JOIN STANDARD_LIBRARY STD_CLASS            {   identity of the smidi_server     }
JOIN STANDARD_LIBRARY STD_CLIENT           { client_do_popup_menu               }
JOIN STANDARD_LIBRARY STD_PROMPT           {   grid. and the prompt             }
JOIN STANDARD_LIBRARY STD_SMIDI            { R3logon, r3connect, r3encrypt      }
JOIN STANDARD_LIBRARY STD_UTILS            {   standard utilities               }

JOIN LIBRARY $LIST_EDITOR                  { The List Editor smidi_config_item  }
JOIN LIBRARY $LIB_GRID                     { Grid Functionality.                }

JOIN LIBRARY $LIB_UTILS                    {                                    }
JOIN LIBRARY $LABTABLIB                    { LabTableEditor library             }

JOIN LIBRARY $SMIDI_LIB_SAP                { Test button, sse                   }

{*******************************************************************************}
{   CONSTANTS                                                                   }
{*******************************************************************************}

CONSTANT TABLE_ID            = "SMIDI_SYSTEM"
CONSTANT BUTTON_WIDTH        = 10
CONSTANT BUTTON_SPACE        = 5

{*******************************************************************************}
{   GLOBAL DECLARATIONS                                                         }
{*******************************************************************************}

DECLARE retval                { general use return from routines                }
DECLARE option                { mode for LTE                                    }

DECLARE name_of_table		,
	help_context		,
	directory		,
	extn			,
	default_value		,
	input_mess		,
	header_mess		,
	footer_mess		,
	display_footer_mess	,
	displayed_name_of_table	,
	prompt_details		,
	fields_to_output	,
	special_actions_report	,
	labtable_messages	, 
	operation		, 
	fld			, 
	count			,
	list_downtimes		,
	config_items		,
	list_r3_units		,
	menu_array		,
	program_array           ,
	action			,
	i
	

	do_the_work ( "MODIFY_IDENT" )
	EXIT

{ -------------------------- Table Setup Routine ---------------------------- }
ROUTINE table_setup ( VALUE operation )

	define_smidi_cnf_collection_class()    { for config items }

	name_of_table           = TABLE_ID
	header_mess             = get_user_message("SMIDI_LTE_SYS_HEADER", 1)
	footer_mess             = get_user_message("SMIDI_LTE_SYS_FOOTER1", 1)
	display_footer_mess     = get_user_message("SMIDI_LTE_SYS_FOOTER2", 1)
	displayed_name_of_table = get_user_message("SMIDI_LTE_SYS_TABLE", 1)
	input_mess              = get_user_message("SMIDI_LTE_SYS_TABLE", 1)
	help_context            = "SMIDI_SYSTEM_EDIT"
	default_value           = "DEFAULT"
	directory               = EMPTY
	extn                    = EMPTY
	
	
	ARRAY fields_to_output  ARRAY_SIZE ( 0 )
	fields_to_output [ 1 ]  = "3"

	ARRAY prompt_details    ARRAY_SIZE ( 0 , 6 )
	count = 1
		prompt_details [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_GROUP", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "GROUP_ID"
	count = count + 1
		prompt_details [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_DESCR", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "DESCRIPTION"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_SUBSYS", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "SUBSYSTEM_ID"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_DEST", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "R3_DESTINATION"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_CLIENT", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "R3_CLIENT"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_USER", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "R3_USER"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_R3HOST", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "R3_HOSTNAME"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_R3SYSNR", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "R3_SYSNR"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_LANGUAGE", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "R3_LANGUAGE"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_R3GWHOST", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "R3_GWHOST"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_R3GWSERV", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "R3_GWSERVICE"
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_MODE", 1)
		PROMPT_DETAILS [ count, TYPE_POSITION    ] = "ROUTINE"
		PROMPT_DETAILS [ count, ROUTINE_POSITION ] = "MODE_PROMPT"
		PROMPT_DETAILS [ count, LIBRARY_POSITION ] = GLOBAL ( "CURRENT_LIBRARY" )
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_R3TRACE", 1)
		PROMPT_DETAILS [ count, TYPE_POSITION    ] = "ROUTINE"
		PROMPT_DETAILS [ count, ROUTINE_POSITION ] = "TRACE_PROMPT"
		PROMPT_DETAILS [ count, LIBRARY_POSITION ] = GLOBAL ( "CURRENT_LIBRARY" )
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_HOST", 1)
		PROMPT_DETAILS [ count, TYPE_POSITION    ] = "ROUTINE"
		PROMPT_DETAILS [ count, ROUTINE_POSITION ] = "SMIDI_HOST_PROMPT"
		PROMPT_DETAILS [ count, LIBRARY_POSITION ] = GLOBAL ( "CURRENT_LIBRARY" )
	count = count + 1
		PROMPT_DETAILS [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_SERVICE", 1)
		PROMPT_DETAILS [ count, TYPE_POSITION    ] = "ROUTINE"
		PROMPT_DETAILS [ count, ROUTINE_POSITION ] = "SMIDI_SERVICE_PROMPT"
		PROMPT_DETAILS [ count, LIBRARY_POSITION ] = GLOBAL ( "CURRENT_LIBRARY" )
	count = count + 1
		prompt_details [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_SAP_VERSION", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "QMIDI_OBJECT"
	count = count + 1
		prompt_details [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_SAP_QMIDI", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "QMIDI_VERSION"
	count = count + 1
		prompt_details [ count , MESSAGE_POSITION    ] = get_user_message("SMIDI_LTE_SYS_MOD", 1)
		PROMPT_DETAILS [ count , FIELD_NAME_POSITION ] = "MODIFIABLE"

	ARRAY special_actions_report    ARRAY_SIZE ( 0 , 4 )

	IF ( index ( TOUPPER(operation), "ADD" ) > 0 ) | ( index ( TOUPPER(operation), "MODIFY" ) > 0 ) THEN

		special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
		special_actions_report [ 1 , TITLE_POSITION     ] = get_user_message("SMIDI_LTE_SYS_MENUHDR", 1)

		special_actions_report [ 2 , CHARACTER_POSITION ] = get_user_message("SMIDI_LTE_SYS_MENU", 1 )
		special_actions_report [ 2 , TITLE_POSITION     ] = get_user_message("SMIDI_LTE_SYS_MENU", 2 )
		special_actions_report [ 2 , LIBRARY_POSITION   ] =  GLOBAL ( "CURRENT_LIBRARY" )
		special_actions_report [ 2 , ROUTINE_POSITION   ] = "smidi_setup_menu"

		special_actions_report [ 3 , CHARACTER_POSITION ] = get_user_message("SMIDI_LTE_SYS_MENU", 3 )
		special_actions_report [ 3 , TITLE_POSITION     ] = get_user_message("SMIDI_LTE_SYS_MENU", 4 )
		special_actions_report [ 3 , LIBRARY_POSITION   ] =  GLOBAL ( "CURRENT_LIBRARY" )
		special_actions_report [ 3 , ROUTINE_POSITION   ] = "smidi_downtimes"

		special_actions_report [ 4 , CHARACTER_POSITION ] = get_user_message("SMIDI_LTE_SYS_MENU", 5 )
		special_actions_report [ 4 , TITLE_POSITION     ] = get_user_message("SMIDI_LTE_SYS_MENU", 6 )
		special_actions_report [ 4 , LIBRARY_POSITION   ] =  GLOBAL ( "CURRENT_LIBRARY" )
		special_actions_report [ 4 , ROUTINE_POSITION   ] = "smidi_system_config"

		special_actions_report [ 5 , CHARACTER_POSITION ] = get_user_message("SMIDI_LTE_SYS_MENU", 7 )
		special_actions_report [ 5 , TITLE_POSITION     ] = get_user_message("SMIDI_LTE_SYS_MENU", 8 )
		special_actions_report [ 5 , LIBRARY_POSITION   ] =  GLOBAL ( "CURRENT_LIBRARY" )
		special_actions_report [ 5 , ROUTINE_POSITION   ] = "smidi_r3_units"

	ENDIF  { only on ADD or Modify do you get buttons }

	ARRAY   labtable_messages       ARRAY_SIZE ( 0 )
	        labtable_messages [ IDENTITY_MESSAGE ] = GET MESSAGE ( 2545 , 1 )
	        labtable_messages [ MOD_ON_MESSAGE   ] = GET MESSAGE ( 2546 , 1 )
	        labtable_messages [ MOD_BY_MESSAGE   ] = GET MESSAGE ( 2547 , 1 )
	        labtable_messages [ READ_MESSAGE     ] = GET MESSAGE ( 2566 , 1 )
	        labtable_messages [ WRITE_MESSAGE    ] = GET MESSAGE ( 2567 , 1 )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE read_data_routine ( labtable, VALUE operation )

	DECLARE protocol, host, service

	IF operation = "ADD" THEN

		ASSIGN smidi_system.smidi_host = get_machine_name()

	ELSEIF ( operation = "READ" ) OR ( operation = "MODIFY" ) THEN

		protocol = SELECT smidi_system.smidi_protocol
		host     = SELECT smidi_system.smidi_host
		service  = SELECT smidi_system.smidi_service

		IF protocol = "LOCAL" THEN
			flash_message ( "SMIDI_LTE_UPGRADE", TRUE )
			ASSIGN smidi_system.smidi_protocol = "TCP"
		ENDIF

		IF BLANK ( host ) THEN
			ASSIGN smidi_system.smidi_host = get_machine_name()
		ENDIF

		IF BLANK ( service ) THEN	
			ASSIGN smidi_system.smidi_service = "smidi_46c"
		ENDIF

	ENDIF

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE validation_routine

	DECLARE protocol, host, service, ok

	ok       = TRUE
	protocol = SELECT smidi_system.smidi_protocol
	host     = SELECT smidi_system.smidi_host
	service  = SELECT smidi_system.smidi_service

	IF ( protocol = "LOCAL" ) OR BLANK ( host ) OR BLANK ( service ) THEN
        	ok = FALSE
		flash_message ( "SMIDI_LTE_INVALID_GATEWAY", TRUE )
	ENDIF
                
	RETURN ( ok )

ENDROUTINE

{ --------------------------------------------------------------------------- }
ROUTINE update_routine ( labtable )

	{ Called on pressing the DO key to save LTE screen.               }
	{ Called after the LTE write transaction has been started.        }
	{                                                                 }
	{ labtable is the labtable object.                                }
	{                                                                 }
	{ The return value is TRUE  if updates have been performed        }
	{                     FALSE if updates have NOT been performed    }
	{                     EMPTY - the systems checks for updates      }


	RETURN ( EMPTY )

ENDROUTINE  { update routine }

{ --------------------------------------------------------------------------- }
ROUTINE remove_restore_routine ( labtable )

	{ ------------------------------------------------- }
	{ If this server is removed then remove all queries }
	{ ------------------------------------------------- }


	DECLARE a_server, a_query, status, query_array, cnt

	status = EMPTY

	ARRAY query_array

	cnt      = 0
	a_server = SELECT SMIDI_SYSTEM.IDENTITY
	a_query  = SELECT SMIDI_QUERY.IDENTITY WHERE SMIDI_SYSTEM = a_server

	WHILE a_query <> EMPTY DO

		cnt = cnt + 1
		query_array[cnt,1] = a_server
		query_array[cnt,2] = a_query
		query_array[cnt,3] = SELECT SMIDI_QUERY.INSP_STATUS

		NEXT SMIDI_QUERY

		a_query = SELECT SMIDI_QUERY.IDENTITY

	ENDWHILE

	{ ------------------------------------------------- }
	{ Got some to remove then remove them all           }
	{ ------------------------------------------------- }

	IF cnt > 0 THEN

		cnt = 1

		WHILE ( query_array[cnt,1] <> EMPTY ) DO

			a_query = SELECT SMIDI_QUERY.IDENTITY FOR UPDATE
					WHERE SMIDI_SYSTEM = query_array[cnt,1]
					AND IDENTITY       = query_array[cnt,2]
					AND INSP_STATUS    = query_array[cnt,3]

			IF ( a_query <> EMPTY ) AND ( a_query <> LOCKED ) THEN

				ASSIGN SMIDI_QUERY.REMOVEFLAG = NOT ( SELECT SMIDI_QUERY.REMOVEFLAG) 
				UPDATE SMIDI_QUERY, status

			ENDIF


			cnt = cnt + 1

		ENDWHILE

	ENDIF   { cnt > 0 got some to remove }

	RETURN ( status = EMPTY )

ENDROUTINE  { remove_restore_routine }

{ --------------------------------------------------------------------------- }
ROUTINE do_the_work  ( VALUE operation )

	IF ( smp_lte_initialise() ) THEN

		table_setup ( operation )
		smp_lte_perform_option  ( name_of_table            ,
					displayed_name_of_table    ,
					prompt_details             ,
					labtable_messages          ,
					default_value              ,
					input_mess                 ,
					header_mess                ,
					footer_mess                ,
					display_footer_mess        ,
					directory                  ,
					extn                       ,
					help_context               ,
					GLOBAL ("CURRENT_LIBRARY") ,
					fields_to_output           ,
					special_actions_report     ,
					operation                  )

	ENDIF


ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE add_option ( option )
	do_the_work ( "add_ident" )
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE copy_option ( option )
	do_the_work ( "copy_ident" )
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE modify_option ( option )
	do_the_work ( "modify_ident" )
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE display_option ( option )
	do_the_work ( "display_ident" )
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE remove_option ( option )
	do_the_work ( "remove_ident" )
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE restore_option ( option )
	do_the_work ( "restore_ident" )
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE list_option ( option )
	do_the_work ( "list_idents" )
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE print_option ( option )
	do_the_work ( "print_ident" )
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE spreadsheet_option ( option )
	LTE_spreadsheet ( TABLE_ID, "IDENTITY" )   { SMIDI_LIB_SAP }
ENDROUTINE
{ --------------------------------------------------------------------------- }
ROUTINE smp_lte_initialise
	RETURN ( TRUE )
ENDROUTINE

{ --------------------------------------------------------------------------- }
{                            Prompt Routines.                                 }
{ --------------------------------------------------------------------------- }

ROUTINE trace_prompt  ( VALUE column, VALUE row, VALUE cell_width, window, VALUE is_display )

	DECLARE sel_array, val
	ARRAY sel_array

	sel_array [ 1, 1 ] = "OFF"
	sel_array [ 1, 2 ] = "OFF"
	sel_array [ 2, 1 ] = "ON"
	sel_array [ 2, 2 ] = "ON"

	val = array_prompt ( column, row, cell_width, window, is_display, sel_array, "R3_TRACE" )

	IF val <> EMPTY THEN
		ASSIGN smidi_system.r3_trace = val
	ENDIF

ENDROUTINE { trace_prompt }

{******************************************************************************}

ROUTINE mode_prompt  ( VALUE column, VALUE row, VALUE cell_width, window, VALUE is_display )

	DECLARE sel_array, val
	ARRAY sel_array

	sel_array [ 1, 1 ] = "R/3"
	sel_array [ 1, 2 ] = "R/3"
	sel_array [ 2, 1 ] = "R/2"
	sel_array [ 2, 2 ] = "R/2"

	val = array_prompt ( column, row, cell_width, window, is_display, sel_array, "R3_MODE" )

	IF val <> EMPTY THEN
		ASSIGN smidi_system.r3_mode = val
	ENDIF

ENDROUTINE { trace_prompt }

{******************************************************************************}

ROUTINE smidi_service_prompt  ( VALUE column, VALUE row, VALUE cell_width, window, VALUE is_display )

	DECLARE val, orig_val, display_only

	val          = SELECT smidi_system.smidi_service
	orig_val     = val
	display_only = ( SELECT smidi_system.smidi_protocol = "LOCAL" )

	IF is_display THEN

		DISPLAY val ON LINE row FROM column TO column + cell_width - 1 IN WINDOW window FORMAT    TEXT30

	ELSE

		PROMPT FOR val ON LINE row FROM column TO column + cell_width - 1 IN WINDOW window FORMAT TEXT30 WITH ( display_only  = display_only )

		IF ( val <> orig_val ) THEN
			ASSIGN smidi_system.smidi_service = val 
		ENDIF

	ENDIF

ENDROUTINE { smidi_service_prompt }

{******************************************************************************}

ROUTINE smidi_host_prompt  ( VALUE column, VALUE row, VALUE cell_width, window, VALUE is_display )

	DECLARE val, display_only, orig_val

	val          = SELECT smidi_system.smidi_host
	orig_val     = val

	IF BLANK ( val ) THEN 
		val = get_machine_name()
	ENDIF

	display_only = ( SELECT smidi_system.smidi_protocol = "LOCAL" )

	IF is_display THEN

		DISPLAY val ON LINE row FROM column TO column + cell_width - 1 IN WINDOW window FORMAT TEXT10

	ELSE

		PROMPT FOR val ON LINE row FROM column TO column + cell_width - 1 IN WINDOW window FORMAT smidi_system.smidi_host WITH ( display_only = display_only )

		IF ( val <> orig_val ) THEN
			ASSIGN smidi_system.smidi_host = val 
		ENDIF

	ENDIF

ENDROUTINE { smidi_service_prompt }

{******************************************************************************}

ROUTINE array_prompt  ( VALUE column     ,
                        VALUE row        ,
                        VALUE cell_width ,
                              window     ,
                        VALUE is_display ,
                              sel_array  ,
                        VALUE field      )

	DECLARE val, orig_val, ret_val

	ret_val  = EMPTY
	val      = SELECT smidi_system.'field'
	orig_val = val

	IF is_display THEN

		DISPLAY val ON LINE row FROM column TO column + cell_width - 1 IN WINDOW window FORMAT TEXT10

	ELSE

		PROMPT FOR val ON LINE row FROM column TO column + cell_width - 1 IN WINDOW window CHOOSE OUTOF sel_array

		IF ( val <> orig_val ) THEN
			ret_val = val
		ENDIF

	ENDIF

	RETURN ( ret_val )

ENDROUTINE  { array prompt }

{ ---------------------------------------------------------------------------- }
{                                                                              }
{ MENU's for each of the buttons on the bottom of the QM System LTE            }
{                                                                              }
{ ---------------------------------------------------------------------------- }

ROUTINE smidi_setup_menu ( VALUE id, VALUE old_id, VALUE mode )

	IF ( mode = "ADD" ) | ( mode = "MODIFY" ) THEN
		do_menu ( id, old_id, mode, "SMIDI_LTE_SYS_MENU_SETUP", "SMIDI_LTE_SYS_PROGRAM_SETUP", 4 )
	ENDIF

ENDROUTINE   { smidi_setup_menu - button on main LTE form }

{******************************************************************************}

ROUTINE do_menu ( VALUE id, VALUE old_id, VALUE mode, VALUE mess1, VALUE mess2, VALUE num_items )

	ARRAY menu_array
	ARRAY program_array

	i = 1
	WHILE i <= num_items DO 
		menu_array[i]    = GET_USER_MESSAGE ( mess1, i )
		program_array[i] = GET_USER_MESSAGE ( mess2, i )
		i = i + 1
	ENDWHILE

	action = client_do_popup_menu ( menu_array, 0, 0, 0 )

	i = 1
	WHILE i <= num_items DO

		IF action = menu_array[i] THEN
			CALL_ROUTINE program_array[i] IN LIBRARY SMIDI_LTE_SYSTEM USING id, old_id, mode
		ENDIF
		i = i + 1

	ENDWHILE	

ENDROUTINE  { do_menu }

{ ---------------------------------------------------------------------------- }
{                                                                              }
{ The signon menu actions - called from the smidi_setup_menu                   }
{                                                                              }
{ ---------------------------------------------------------------------------- }

ROUTINE smidi_signon_new( VALUE id, VALUE old_id, VALUE mode )

	IF mode = "COPY" THEN
		assign smidi_system.r3_password = " "
	ENDIF

	IF index( "#MODIFY#", mode ) <> 0 THEN

		smidi_signon_set_password ( id, old_id, mode, TRUE )

	ELSEIF mode = "DISPLAY" THEN

		flash_message ( "SMIDI_LTE_DISPLAY_PASSWORD", TRUE )

	ENDIF

ENDROUTINE { smidi_signon_new }

{******************************************************************************}

ROUTINE smidi_signon_change( VALUE id, VALUE old_id, VALUE mode )

	IF mode = "COPY" THEN
		assign smidi_system.r3_password = " "
	ENDIF

	IF index( "#MODIFY#", mode ) <> 0 THEN

		smidi_signon_set_password ( id, old_id, mode, FALSE )

	ELSEIF mode = "DISPLAY" THEN

		flash_message ( "SMIDI_LTE_DISPLAY_PASSWORD", TRUE )

	ENDIF

ENDROUTINE { smidi_signon_change }

{******************************************************************************}

ROUTINE smidi_signon_set_password ( VALUE id, VALUE old_id, VALUE mode, VALUE is_new )

	DECLARE pwd_form

	IF smidi_lib_check_license() THEN

		smidi_lib_init( OPERATOR:PACKED_DECIMAL(1) )
		pwd_main_form( pwd_form, id, old_id, mode, is_new )

		pwd_form.start_prompt()
		pwd_form.wait_prompt()

		REPEAT
			pwd_form.end_prompt()
		UNTIL ( ( pwd_form.get_lastkey() = "EXIT") | ( pwd_form.get_lastkey() = "DO" ) )

	ELSE

		flash_message ( "SMIDI_LTE_NO_LICENSE", TRUE )

	ENDIF

ENDROUTINE  { smidi_signon_set_password }

{******************************************************************************}
ROUTINE pwd_store_1(self)

	declare temp

	temp = TOUPPER ( pad(self.text," ",10) )
	r3_encrypt(temp)
	self.parent_prompt.user_info[1] = temp	

ENDROUTINE

{******************************************************************************}
ROUTINE pwd_store_2(self)

	declare temp

	temp = TOUPPER ( pad(self.text," ",10) )
	r3_encrypt(temp)
	self.parent_prompt.user_info[2] = temp	

ENDROUTINE

{******************************************************************************}
ROUTINE pwd_store_3(self)

	declare temp, pwd

	temp  = TOUPPER ( pad(self.text," ",10) )
	r3_encrypt(temp)

	self.parent_prompt.user_info[3] = temp	

	IF (( NOT blank(self.parent_prompt.user_info[2] )) & ( NOT blank(self.parent_prompt.user_info[3] )) )

		pwd = select smidi_system.r3_password

		IF ((self.parent_prompt.user_info[1] = pwd ) OR ( blank(pwd) ) ) THEN

			IF ( self.parent_prompt.user_info[2] ) = ( self.parent_prompt.user_info[3] ) THEN

				assign smidi_system.r3_password = self.parent_prompt.user_info[2]
				flash_message(get_user_message("SMIDI_LTE_PW_UPDATED",1),TRUE)

			ELSE
				flash_message(get_user_message("SMIDI_LTE_PW_NOTUPD",1),TRUE)
			ENDIF
		ELSE
			flash_message(get_user_message("SMIDI_LTE_PW_NOTUPD",1),TRUE)
		ENDIF
	ELSE
		flash_message(get_user_message("SMIDI_LTE_PW_NOTUPD",1),TRUE)
	ENDIF

ENDROUTINE   { pwd_store_3 }

{******************************************************************************}

ROUTINE pwd_main_form( pwd_form, id, old_id, mode, VALUE is_new )

	DECLARE pwd_prompts, cnt
	ARRAY pwd_prompts

	CREATE OBJECT PROMPT_CLASS_FORM, pwd_form
		pwd_form.height            = 5
		pwd_form.width             = 50
		pwd_form.column            = 10
		pwd_form.row               = 10
		pwd_form.header            = mode : " " : id
		pwd_form.footer            = "Not used"
		pwd_form.border            = TRUE
		pwd_form.confirm_required  = FALSE
		pwd_form.help_context      = "SMP"
		pwd_form.RETURN_BEHAVIOUR  = FORM_RETURN_STAY

	ARRAY pwd_form.user_info
		pwd_form.user_info[4] = id
		pwd_form.user_info[5] = old_id
		pwd_form.user_info[6] = mode

	cnt = 1

	IF is_new THEN

		PROMPT OBJECT pwd_prompts[cnt] ON LINE cnt FROM 32 WITH ( length=10,width=10,zap_on_first=TRUE,leave_prompt_routine="pwd_store_1",silent_mode=TRUE )
		pwd_form.add_display( pad( get_user_message("SMIDI_LTE_PW_OLDPW",1 ), " ", 27 ),3,cnt, PROMPT_RENDITION_BOLD + PROMPT_RENDITION_RAISED )
		cnt = cnt + 1

	ENDIF

	PROMPT OBJECT pwd_prompts[cnt] ON LINE cnt FROM 32 WITH ( length=10,width=10,zap_on_first=TRUE,leave_prompt_routine="pwd_store_2",silent_mode=TRUE )
	pwd_form.add_display( pad( get_user_message("SMIDI_LTE_PW_NEWPW",1 ), " ", 27 ),3,cnt, PROMPT_RENDITION_BOLD + PROMPT_RENDITION_RAISED )

	cnt = cnt + 1
	PROMPT OBJECT pwd_prompts[cnt] ON LINE cnt FROM 32 WITH ( length=10,width=10,zap_on_first=TRUE,leave_prompt_routine="pwd_store_3",silent_mode=TRUE )
	pwd_form.add_display( pad( get_user_message("SMIDI_LTE_PW_VERIFY",1), " ", 27 ),3,cnt, PROMPT_RENDITION_BOLD + PROMPT_RENDITION_RAISED )

	i = 1
	WHILE pwd_prompts[i] <> EMPTY DO

		pwd_form.add_prompt( pwd_prompts[ i ] )
		i = i + 1

	ENDWHILE

ENDROUTINE  { pwd_form }

{******************************************************************************}

ROUTINE smidi_signon_delete ( VALUE id, VALUE old_id, VALUE mode )

	ASSIGN smidi_system.r3_password = ""

ENDROUTINE  { smidi_signon_delete }

{******************************************************************************}

ROUTINE smidi_signon_test ( VALUE id, VALUE old_id, VALUE mode )

	DECLARE status, protocol, host, service, ignore, parent, push_rec, qmidi_object

	protocol     = STRIP ( SELECT smidi_system.smidi_protocol )
	service      = STRIP ( SELECT smidi_system.smidi_service  )
	host         = STRIP ( SELECT smidi_system.smidi_host     )
	qmidi_object = SELECT smidi_system.qmidi_object

	IF ( protocol = EMPTY   ) | ( service = EMPTY   ) | ( host = EMPTY   ) | ( qmidi_object = EMPTY   ) |
	   ( BLANK ( protocol ) ) | ( BLANK ( service ) ) | ( BLANK ( host ) ) | ( BLANK ( qmidi_object ) ) THEN

		flash_message ( "SMIDI_LTE_NOT_CONNECT_NOT_SETUP", TRUE )	

	ELSE

		push_file_descriptor ( "SMIDI_SYSTEM", push_rec )

		smidi_lib_init ( OPERATOR:PACKED_DECIMAL(1) )
		smidi_lib_SAP_define_base_class ( qmidi_object )

		CREATE OBJECT SMIDI_BASE_CLASS, parent

		status = smidi_lib_client_logon( id )

		IF status = SMIDI_NORMAL THEN

			status = alt_idi_get_catalog_types ( ignore, parent )

			IF status <> SMIDI_NORMAL THEN

				flash_message ( "SMIDI_LTE_CONNECT_BAD", TRUE )	

			ELSE

				parent.logout()
				flash_message ( "SMIDI_LTE_CONNECTED", TRUE )

			ENDIF

		ELSE

			flash_message ( "SMIDI_LTE_CONNECT_BAD", TRUE )

		ENDIF

		pop_file_descriptor ( push_rec )

	ENDIF { cannot have blank values in main LTE for protocol,service or host }

ENDROUTINE  { smidi_signon_test }

{******************************************************************************}

ROUTINE smidi_system_config ( VALUE id, VALUE old_id, VALUE mode )

	smidi_config_items( id, old_id, mode, "SYSTEM" )

ENDROUTINE  { smidi_system_config }

{ ---------------------------------------------------------------------------- }
{                                                                              }
{              Routines shared by all list object LTE buttons                  }
{                                                                              }
{ ---------------------------------------------------------------------------- }

ROUTINE print_a_table ( VALUE identity, VALUE the_table ) 

	DECLARE field_details, field_print, cnt

	ARRAY field_print ARRAY_SIZE ( 0 , 2 )
	ARRAY field_details

	GET_FIELD_NAMES ( the_table, field_details )

	cnt   = 1
	WHILE cnt <= SIZE_OF_ARRAY ( field_details ) DO

		IF NOT field_details[cnt,2] THEN      { get rid of aliases }

			field_print[cnt,1] = field_details[cnt,1]
			field_print[cnt,2] = field_details[cnt,1]

		ENDIF

		cnt = cnt + 1

	ENDWHILE

	print_fields ( the_table, identity, "", "", 2, 28, field_details   )

ENDROUTINE { print_a_table }

{ --------------------------------------------------------------------------- }
ROUTINE pre_insert_list_object ( self,grid,cell_column,cell_row,window,column,row,cell_width,cell_height,new_value )


	{ Get the value entered by the user }
	
	new_value = enter_new_value ( self, grid )

	IF BLANK ( grid.value ) THEN

		IF ( cell_row = grid.cell_rows ) THEN

			{ If cancelled the very first item - remove the screen
			i.e. The row is the first one and no value is entered   }
			IF ( new_value = "" ) THEN
				IF ( cell_row = 1 ) THEN
					SET GLOBAL "LASTKEY" TO "DO"
				ELSE
					SET GLOBAL "LASTKEY" TO "UP"
				ENDIF

			ENDIF

		ELSE

			{ User has clicked somewhere on the grid }
			IF ( new_value = "" ) THEN
				SET GLOBAL "LASTKEY" TO "REMOVE"
			ELSE
				{ User wants to insert a value }
				SET GLOBAL "LASTKEY" TO "CONTINUE"
			ENDIF

		ENDIF

	ELSE
		{ Grid already has a value}
		new_value = ""
		SET GLOBAL "LASTKEY" TO "UP"

	ENDIF  

ENDROUTINE  { delete_list_object }

{ --------------------------------------------------------------------------- }
ROUTINE post_insert_list_object ( self, cell_row, window )
	
	RETURN ( TRUE )

ENDROUTINE { post_insert_list_object }

{ --------------------------------------------------------------------------- }
ROUTINE delete_list_object ( self )

	RETURN ( TRUE )

ENDROUTINE { delete_list_object }

{ --------------------------------------------------------------------------- }
ROUTINE enter_new_value ( self, grid )

	DECLARE new_value

	new_value = ""

	IF self.table = "SMIDI_R3_UNITS" THEN

		new_value = prompt_new_unit( "SAP Unit" )

	ELSEIF self.table = "SMIDI_SYSTEM_DOWNTIMES" THEN
		
		new_value = prompt_new_downtime( "Date/Interval" )

	ELSEIF self.table = "SMIDI_CONFIG_ITEM" THEN

		new_value = ""
		flash_message ( "Use configuration LTE to set items to query or server level", TRUE )

	ENDIF

	RETURN ( new_value )

ENDROUTINE { enter_new_value }

{ --------------------------------------------------------------------------- }
ROUTINE prompt_new_unit ( VALUE title )

	DECLARE prompt_object, form, retval

	PROMPT OBJECT form CLASS "STD_FORM"
        form . header           = title
        form . row              = 10
        form . column           = 10
        form . height           = 1
        form . width            = 60
        form . vgl_library      = global ( "current_library" )
        form . button_style     = FORM_BUTTON_OK_CANCEL
        form . return_behaviour = FORM_RETURN_STAY
        form . add_display ( title, 1 , 1, PROMPT_RENDITION_NORMAL ) 

	PROMPT OBJECT prompt_object CLASS "STD_PROMPT_TEXT"
        prompt_object . value                = ""
        prompt_object . row                  = 1
        prompt_object . column               = 16
        prompt_object . height               = 1
        prompt_object . width                = 40
        prompt_object . vgl_library          = global ( "current_library" )

        form . add_prompt ( prompt_object ) 

        form . start_prompt () 
        form . wait_prompt ()
        form . end_prompt ()

	IF NOT ( BLANK ( form.prompt_objects[1].value ) ) THEN
		retval = form.prompt_objects[1].value
	ELSE
		retval = ""
	ENDIF

	RETURN ( retval )

ENDROUTINE  { prompt_new_unit }

{ --------------------------------------------------------------------------- }
ROUTINE prompt_new_downtime ( VALUE title )

	DECLARE prompt_object, form, retval

	PROMPT OBJECT form CLASS "STD_FORM"
        form . header           = title
        form . row              = 10
        form . column           = 10
        form . height           = 1
        form . width            = 60
        form . vgl_library      = global ( "current_library" )
        form . button_style     = FORM_BUTTON_OK_CANCEL
        form . return_behaviour = FORM_RETURN_STAY
        form . add_display ( title, 1 , 1, PROMPT_RENDITION_NORMAL ) 

	PROMPT OBJECT prompt_object CLASS "STD_PROMPT_TEXT_BOOLEAN"
        prompt_object . value                = ""
        prompt_object . row                  = 1
        prompt_object . column               = 16
        prompt_object . height               = 1
        prompt_object . width                = 40
        prompt_object . vgl_library          = global ( "current_library" )
	prompt_object . true_word            = "Date"
	prompt_object . false_word           = "Interval"

        form . add_prompt ( prompt_object ) 

        form . start_prompt () 
        form . wait_prompt ()
        form . end_prompt ()

	IF form . get_last_key() <> "EXIT" THEN
		
		retval = form.prompt_objects[1].value

	ELSE
		retval = ""
	ENDIF
	
	RETURN ( retval )

ENDROUTINE  { prompt_new_downtime }

{******************************************************************************}

ROUTINE make_list_object ( 	VALUE identity		,  
				VALUE copied_identity	, 
				VALUE operation		, 
				VALUE the_table		, 
				list_object_id  	,
				VALUE query_type        )
    
	DECLARE prompt_details, heading, ndex, delete_tables, insert_tables

	{ ---------------------------------------------------------------------------------------------- }
	{ was all inside an endif so it was done only 1 time but lots of SMP bugs when you do this DEREK }
	{ ---------------------------------------------------------------------------------------------- }

	list_editor_create_object ( list_object_id )

	ARRAY delete_tables
	ARRAY insert_tables

	delete_tables[1] = "SMIDI_R3_UNITS"
	delete_tables[2] = "SMIDI_SYSTEM_DOWNTIMES"
	delete_tables[3] = "SMIDI_CONFIG_ITEM"
	delete_tables[4] = "SMIDI_INSPPOINT"

	insert_tables[1] = "SMIDI_R3_UNITS"
	insert_tables[2] = "SMIDI_SYSTEM_DOWNTIMES"
	insert_tables[3] = "SMIDI_CONFIG_ITEM"
	insert_tables[4] = "SMIDI_INSPPOINT"

	initialize_details ( prompt_details, heading, the_table )

	list_object_id.table           = the_table
	list_object_id.header          = the_table:" : ":identity
	list_object_id.footer          = ""
	list_object_id.pre_insert      = "pre_insert_list_object"
	list_object_id.post_insert     = "post_insert_list_object"
	list_object_id.delete          = "delete_list_object"
	list_object_id.library         = GLOBAL ( "CURRENT_LIBRARY" )
	list_object_id.compatability   = PROMPT_DETAILS_310

	{ ------------------------------------------------------------- }
	{ The list above decides what can be deleted/inserted           }
	{ ------------------------------------------------------------- }

	IF ( OBJECT_CHECK_PROPERTY ( list_object_id, "DELETES_ENABLED" ) ) THEN
		list_object_id.deletes_enabled  = smidi_lib_array_contains_slice( delete_tables,the_table,ndex )
	ENDIF

	IF ( OBJECT_CHECK_PROPERTY ( list_object_id, "INSERTS_ENABLED" ) ) THEN
		list_object_id.inserts_enabled  = smidi_lib_array_contains_slice( insert_tables,the_table,ndex )
	ENDIF

	IF the_table = "SMIDI_CONFIG_ITEM" THEN

		list_object_id.select_callback = "MAP_CRITERIA_":query_type
		
	ENDIF   { only config items has criteria/select callback }
 
	{ ------------------------------------------------------------- }
	{ Prompt details are read from the database fields by table     }
	{ ------------------------------------------------------------- }

	list_object_id.setup_prompt_details ( prompt_details, heading )

	{ was all inside an endif so it was done only 1 time but lots of SMP bugs when you do this DEREK }

ENDROUTINE { make_list_object }

{******************************************************************************}

ROUTINE initialize_details ( prompt_details, heading, the_table )

	DECLARE count, field_details, message_prompt, a_field, field_size, is_key0, cnt, ndex

	ARRAY prompt_details ARRAY_SIZE ( 0 , 6 )
	ARRAY fld

	GET_FIELD_NAMES ( the_table, field_details )
	
	{ ---------------------------------------------------------------------------- }
	{ The n fields in array are critical user input & have special routines/table  }
	{ ---------------------------------------------------------------------------- }

	cnt     = 1
	heading = ""

	IF the_table = "SMIDI_SYSTEM_DOWNTIMES" THEN
			
		fld[1] = "TYPE"
		fld[2] = "START_DOWNTIME"
		fld[3] = "END_DOWNTIME"

		WHILE fld[cnt] <> EMPTY DO

			GET_FIELD_DETAILS 'the_table'.'fld[cnt]', "PROMPT_DESCRIPTION", message_prompt
			GET_FIELD_DETAILS 'the_table'.'fld[cnt]', "FIELD_SIZE"        , field_size

			IF cnt = 1 THEN
				field_size = 10 
				heading = PAD ( message_prompt, " ", field_size )
			ELSE
				heading = heading : " " : PAD ( message_prompt, " ", field_size )
			ENDIF
			
			prompt_details [ cnt, 1 ] = message_prompt
			prompt_details [ cnt, 2 ] = "ROUTINE"
			prompt_details [ cnt, 3 ] = GLOBAL ( "CURRENT_LIBRARY" )
			prompt_details [ cnt, 4 ] = "downtime_prompt"
			prompt_details [ cnt, 5 ] = 0
			prompt_details [ cnt, 6 ] = field_size

			cnt = cnt + 1

		ENDWHILE

	ELSEIF the_table = "SMIDI_CONFIG_ITEM" THEN

		fld[1] = "VALUE"
		{fld[2] = "IDENTITY"}
		{fld[3] = "QUERY"}
		{fld[4] = "Server"}
		
		WHILE fld[cnt] <> EMPTY DO
	
			GET_FIELD_DETAILS 'the_table'.'fld[cnt]',  "PROMPT_DESCRIPTION", message_prompt
			GET_FIELD_DETAILS 'the_table'.'fld[cnt]', "FIELD_SIZE", field_size
	
			If cnt = 1 THEN
				field_size = 50
				heading =  PAD ( message_prompt, " ", field_size )
			ELSE
				heading = heading : " " : PAD ( message_prompt, " ", field_size )
			ENDIF
			
			{prompt_details [ cnt , 1 ] = GET_USER_MESSAGE ( "SMIDI_MAP_MSG_ITEM", 5 )} 
			prompt_details [ cnt, 1 ] = message_prompt
			prompt_details [ cnt , 2 ] = "ROUTINE"
			prompt_details [ cnt , 3 ] = GLOBAL ( "CURRENT_LIBRARY" )
			prompt_details [ cnt , 4 ] = "DEFAULT_PROMPT"
			prompt_details [ cnt , 5 ] = 0
			prompt_details [ cnt , 6 ] = field_size

			
			{heading = PAD ( prompt_details [ cnt, 1 ], " ", prompt_details [ cnt, 6 ] )}
			
			cnt     = cnt + 1
		ENDWHILE

	ELSEIF the_table = "SMIDI_INSPPOINT" THEN

		fld[1] = ""
		fld[2] = ""
		fld[3] = ""

		WHILE fld[cnt] <> EMPTY DO

			GET_FIELD_DETAILS 'the_table'.'fld[cnt]', "PROMPT_DESCRIPTION", message_prompt
			GET_FIELD_DETAILS 'the_table'.'fld[cnt]', "FIELD_SIZE"        , field_size

			IF cnt = 1 THEN
				field_size = 10 
				heading = PAD ( message_prompt, " ", field_size )
			ELSE
				heading = heading : " " : PAD ( message_prompt, " ", field_size )
			ENDIF

			prompt_details [ cnt, 1 ] = message_prompt
			prompt_details [ cnt, 2 ] = "ROUTINE"
			prompt_details [ cnt, 3 ] = "$SMIDI_LTE_POINTS"
			prompt_details [ cnt, 4 ] = "points_prompt"
			prompt_details [ cnt, 5 ] = 0
			prompt_details [ cnt, 6 ] = field_size

			cnt = cnt + 1

		ENDWHILE

	ENDIF
	
	{ ------------------------------------------------ }
	{ Now get whatever else the user put on the table  }
	{ ------------------------------------------------ }

	cnt   = cnt - 1
	count = 1

	WHILE count <= SIZE_OF_ARRAY ( field_details ) DO

		IF NOT field_details[count,2] THEN                      { get rid of aliases }

			a_field  = field_details[count,1]

			GET_FIELD_DETAILS 'the_table'.'a_field', "PROMPT_DESCRIPTION", message_prompt
			GET_FIELD_DETAILS 'the_table'.'a_field', "FIELD_SIZE"        , field_size
			GET_FIELD_DETAILS 'the_table'.'a_field', "KEY0_FIELD"        , is_key0

			IF field_size > 35 THEN
				field_size = 35
			ELSEIF field_size < 5 THEN
				field_size = 5
			ENDIF

			{ -------------------------------------------------------------------- }
			{ If this field is not one of the above special ones, then add to form }
			{ -------------------------------------------------------------------- }
			
			IF NOT ( smidi_lib_array_contains_slice ( fld, a_field, ndex ) ) THEN
	
				{ MSM 800 remove currauth display of keys for CONFIG ITEMS and all others }

				cnt = cnt + 1

				prompt_details [ cnt , 1 ] = message_prompt
				prompt_details [ cnt , 2 ] = "FORMAT"
				prompt_details [ cnt , 3 ] = the_table 
				prompt_details [ cnt , 4 ] = field_details[count,1]
				prompt_details [ cnt , 5 ] = 0
				prompt_details [ cnt , 6 ] = field_size

				IF cnt = 1 THEN
					heading = PAD ( message_prompt, " ", field_size )
				ELSE
					heading = heading : " " : PAD ( message_prompt, " ", field_size )
				ENDIF
			
			ENDIF   { do not repaste special prompt fields }

		ENDIF  { don't show aliases }

		count    = count + 1 

	ENDWHILE

ENDROUTINE { initialise_details }

{*******************************************************************************}
{                                                                               }
{ SAP Downtimes - smidi_Setup_menu list editor maintain smidi_system_downtimes  }
{                                                                               }
{*******************************************************************************}

ROUTINE smidi_downtimes( VALUE identity, VALUE copied_identity, VALUE operation )

	DECLARE answer

	IF operation = "PRINT" THEN

		print_a_table ( identity, "SMIDI_SYSTEM_DOWNTIMES" )

	ELSEIF ( operation <> "COPY" ) THEN     { $list_editor cannot copy correctly }

		copied_identity = EMPTY
		answer = make_list_object ( 	identity		, 
						copied_identity		, 
						operation		, 
						"SMIDI_SYSTEM_DOWNTIMES", 
						list_downtimes	        , 
						"QUERY" 		)


		answer = list_downtimes.operation ( identity, copied_identity, operation )

		{ ------------------------------------------------------------------------------------------ }
		{ in 2001 you have to do this otherwise getting in, out, in, out, in, out of buttons crashes }
		{ ------------------------------------------------------------------------------------------ }
		IF ( answer <> EMPTY ) & ( NOT answer ) & ( list_downtimes <> EMPTY ) THEN
	
			list_downtimes.initialised = FALSE
			list_downtimes.data_read   = FALSE

		ENDIF
		
		RETURN ( answer )

	ENDIF

ENDROUTINE  { smidi_downtimes }

{******************************************************************************}

ROUTINE downtime_prompt   (        self        ,
                                  grid        ,
                            VALUE cell_column ,
                            VALUE cell_row    ,
                            VALUE column      ,
                            VALUE row         ,
                            VALUE cell_width  ,
                                  window      ,
                            VALUE is_display   )


	DECLARE display_only, orig_def, def, status, type_is_date, a_field
					
	a_field      = fld[cell_column]
	type_is_date = SELECT 'self.table'.type      IN OBJECT self
	def          = SELECT 'self.table'.'a_field' IN OBJECT self
	orig_def     = def

	
	IF is_display = EMPTY THEN

		{ This is called from a List }	

	ELSEIF is_display THEN
		
		PAD ( def, " ", 30 )
		DISPLAY def ON LINE row FROM column TO column+cell_width-1 IN WINDOW window FORMAT 'self.table'.'a_field'

	ELSE
		
		display_only = grid.parent_prompt.display_only

		IF cell_column = 1 THEN
			
			PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
			IN WINDOW window FORMAT 'self.table'.type 
			WITH ( display_only=display_only, true_word = "Date", false_word = "Interval" )
			
		ELSEIF type_is_date THEN

			PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
			IN WINDOW window BROWSE ON DATETIME WITH ( display_only=display_only )

		ELSE

			PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
			IN WINDOW window BROWSE ON INTERVAL WITH ( display_only=display_only )

		ENDIF

		IF ( NOT display_only ) AND ( def <> orig_def ) THEN
			
			IF ( NOT TRANSACTION_IS_WRITE() ) THEN
				START WRITE TRANSACTION "This is required see status from UPDATE"
			ENDIF

			ASSIGN 'self.table'.'a_field' IN OBJECT self = def
			UPDATE 'self.table', status

		ENDIF  

	ENDIF

ENDROUTINE { downtime_prompt }

{*******************************************************************************}
{                                                                               }
{ LIST EDITOR's for each of the main "LTE" buttons                              }
{                                                                               }
{*******************************************************************************}

ROUTINE smidi_r3_units( VALUE identity, VALUE copied_identity, VALUE operation )

	DECLARE answer

	IF operation = "PRINT" THEN

		print_a_table ( identity, "SMIDI_R3_UNITS" )

	ELSEIF ( operation <> "COPY" ) THEN     { $list_editor cannot copy correctly }

		copied_identity = EMPTY
		answer = make_list_object ( 	identity		, 
						copied_identity		, 
						operation		, 
						"SMIDI_R3_UNITS"	, 
						list_r3_units 		,
						"R3_UNITS"              )

		answer = list_r3_units.operation ( identity, copied_identity, operation )

		{ ------------------------------------------------------------------------------------------ }
		{ in 2001 you have to do this otherwise getting in, out, in, out, in, out of buttons crashes }
		{ ------------------------------------------------------------------------------------------ }

		IF ( answer <> EMPTY ) & ( NOT answer ) & ( list_r3_units <> EMPTY ) THEN
	
			list_r3_units.initialised = FALSE
			list_r3_units.data_read   = FALSE

		ENDIF

		RETURN ( answer )
	ENDIF

ENDROUTINE  { smidi_r3_units }

{ ---------------------------------------------------------------------------- }
{                                                                              }
{  CONFIG ITEMS - set the config items based upon the caller                   }
{                                                                              }
{ ---------------------------------------------------------------------------- }

GLOBAL ROUTINE smidi_config_items( VALUE identity, VALUE copied_identity, VALUE operation, VALUE type )

	DECLARE answer
	

	IF operation = "PRINT" THEN

		print_a_table ( identity, "SMIDI_CONFIG_ITEM" )
	
	ELSEIF ( operation <> "COPY" ) THEN     { $list_editor cannot copy correctly }
	
		{ User should not be able to modify the objects from this screen}
		IF ( operation = "MODIFY") THEN
			operation = "DISPLAY"
		ENDIF

		copied_identity = EMPTY
		answer          = make_list_object ( 	identity		, 
							copied_identity		, 
							operation		, 
							"SMIDI_CONFIG_ITEM"	, 
							config_items 		,
							type		        )

		answer = config_items.operation ( identity, copied_identity, operation )
	
		

		{ ------------------------------------------------------------------------------------------ }
		{ in 2001 you have to do this otherwise getting in, out, in, out, in, out of buttons crashes }
		{ ------------------------------------------------------------------------------------------ }

		IF ( answer <> EMPTY ) & ( NOT answer ) & ( config_items <> EMPTY ) THEN
	
			config_items.initialised = FALSE
			config_items.data_read   = FALSE

		ENDIF

		RETURN ( answer )
	ENDIF

ENDROUTINE   { smidi_config_items - grid editor of the configuration items for the query }

{*******************************************************************************
*     R O U T I N E S     F O R      C O N F I G U R A T I O N      I T E M S
*******************************************************************************}

ROUTINE map_criteria_QUERY ( self, select_array )

	ARRAY select_array
	ARRAY_SELECT_ADD ( select_array, ARRAY_SELECT_EQ, "QUERY", self.identity )

	add_new_records ( self, select_array )

ENDROUTINE  { map_criteria_query }

{******************************************************************************}

ROUTINE map_criteria_SYSTEM ( self, select_array )

	ARRAY select_array
	ARRAY_SELECT_ADD ( select_array, ARRAY_SELECT_EQ, "SERVER", self.identity )

	add_new_records ( self, select_array )

ENDROUTINE  { map_criteria_server }

{******************************************************************************}

ROUTINE add_new_records ( self, select_array )

	DECLARE key, idlen, srvlen, qrylen, cnt, upd_aray, calling_report, 
		level_id, the_server, the_query, item, status

	GET_FIELD_DETAILS smidi_config_item.identity, "FIELD_SIZE", idlen
	GET_FIELD_DETAILS smidi_config_item.server  , "FIELD_SIZE", srvlen
	GET_FIELD_DETAILS smidi_config_item.query   , "FIELD_SIZE", qrylen

	{ ========================================================== }
	{ The calling report tells us if we are SERVER or QUERY      }
	{ ========================================================== }

	calling_report = GLOBAL ( "CURRENT_REPORT" )

	IF ( INDEX ( calling_report, "SYSTEM" ) > 0 ) THEN

		level_id   = "SERVER"
		the_server = PAD ( self.identity, " ", srvlen )
		the_query  = PAD ( " "          , " ", qrylen )

	ELSE

		level_id   = "QUERY"
		the_server = PAD ( " "          , " ", srvlen )
		the_query  = PAD ( self.identity, " ", qrylen )

	ENDIF

	{ ========================================================== }
	{ Get all the config items that must be done                 }
	{ ========================================================== }

	ARRAY upd_aray
	cnt = 0
	key = SELECT SMIDI_CONFIG_HEADER.IDENTITY WHERE LEVEL_ID = level_id AND REMOVEFLAG = FALSE

	WHILE key <> EMPTY DO

		cnt             = cnt + 1
		upd_aray[cnt,1] = key
		upd_aray[cnt,2] = SELECT SMIDI_CONFIG_HEADER.VALUE

		NEXT SMIDI_CONFIG_HEADER
		key = SELECT SMIDI_CONFIG_HEADER.IDENTITY

	ENDWHILE

	{ ========================================================== }
	{ Part of the key is the server or query config items        }
	{ ========================================================== }

	IF ( SIZE_OF_ARRAY ( upd_aray ) > 0 ) THEN

		cnt = 1

		WHILE ( upd_aray[cnt] <> EMPTY ) DO
	
			IF level_id = "SERVER" THEN
				key = PAD(upd_aray[cnt,1]," ",idlen):the_server:the_query
			ELSE
				key = PAD(upd_aray[cnt,1]," ",idlen):the_server:the_query
			ENDIF

			{ ----------------------------------------------------------------- }
			{ The list_editor repeats all this after we are done..... HOWEVER   }
			{ we must go through it now to see if new records must be added     }
			{ ----------------------------------------------------------------- }

			IF ( INDEX ( operation, "MODIFY" ) > 0 ) THEN
				self.collection.select_for_update ( select_array )
			ELSE
				self.collection.select ( select_array )
			ENDIF

			status = FALSE

			IF ( self.collection.size() > 0 ) THEN

				self.collection.set_first()
				item = self.collection.current

				WHILE ( item <> EMPTY ) DO

					item = SELECT SMIDI_CONFIG_ITEM.IDENTITY IN OBJECT self.collection.current

					IF ( item = ( PAD(upd_aray[cnt,1]," ",idlen) ) ) THEN

						item   = EMPTY
						status = TRUE

					ELSE

						self.collection.set_next()
						item = self.collection.current
					ENDIF
	
				ENDWHILE

			ENDIF  { if the collection size is 0 there are no records }

			{ ----------------------------------------------------------------- }
			{ If this key is not currently in the object/collection then add it }
			{ ----------------------------------------------------------------- }

			IF NOT status THEN

		                CREATE OBJECT "STD_OBJECT_RECORD", item
					item.new   = TRUE
					item.table = "SMIDI_CONFIG_ITEM"

				object_add_table (  item, "SMIDI_CONFIG_ITEM" )

				RESERVE ENTRY SMIDI_CONFIG_ITEM IN OBJECT item, key, status

				IF status = EMPTY THEN
					self.collection.add ( item )
				ENDIF

			ENDIF  { only attempt to add to the collection when it is not there already }

			cnt = cnt + 1

		ENDWHILE

	ENDIF  { got no records, then do no writes }

ENDROUTINE { add_new_records }

{******************************************************************************}

ROUTINE default_prompt   (        self        ,
                                  grid        ,
                            VALUE cell_column ,
                            VALUE cell_row    ,
                            VALUE column      ,
                            VALUE row         ,
                            VALUE cell_width  ,
                                  window      ,
                            VALUE is_display   )

{ Routine for the Default Value Prompt.
*
* Parameters   : Self        - Object
*                Grid        - A Grid Object.
*                Cell_Column - An Integer holding the Current Grid Column.
*                Cell_Row    - An Integer holding the Current Grid Row.
*                Column      - An Integer holding the Window Column for Display
*                Row         - An Integer holding the Window Row for Display.
*                Cell_Width  - An Integer representing the cell width.
*                Window      - The Current Window
*                Is_Display  - Display Only
* Return Value : N/a
*
*******************************************************************************}

	DECLARE display_only, orig_def, def, status, identity, prompt_type

	identity  = SELECT smidi_config_item.identity IN OBJECT self
	def       = SELECT smidi_config_item.value    IN OBJECT self
	orig_def  = def

	IF is_display = EMPTY THEN

		{ This is called from a List }	

	ELSEIF is_display THEN

		pad ( def, " ", 50 )
		DISPLAY def ON LINE row FROM column TO column+cell_width-1 IN WINDOW window FORMAT TEXT50

	ELSE

		display_only = grid.parent_prompt.display_only
		
		prompt_type  = SELECT SMIDI_CONFIG_HEADER.DATA_TYPE WHERE IDENTITY = identity

		{ ============================================================= }
		{ prompt for the stuff in the mode that it needs                }
		{ ============================================================= }

		IF prompt_type = "ROUTINE" THEN

			IF ( INDEX ( identity, "MAPPING" ) > 0 ) THEN

				PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
				    IN WINDOW window BROWSE ON SMIDI_MAP_HEADER.IDENTITY WITH ( display_only=display_only )

			ELSEIF ( INDEX ( identity, "PHRASE" ) > 0 ) THEN

				PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
				    IN WINDOW window BROWSE ON PHRASE_HEADER.IDENTITY WITH ( display_only=display_only )

			ELSEIF ( INDEX ( identity, "CALC" ) > 0 ) THEN
			
				PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
				    IN WINDOW window BROWSE ON LIMIT_CALCULATION.IDENTITY WITH ( display_only=display_only )

			ELSEIF ( INDEX ( identity, "LEVEL" ) > 0 ) THEN

				PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
				    IN WINDOW window BROWSE ON MLP_LEVEL.LEVEL_ID WITH ( display_only=display_only )

			ELSEIF ( INDEX ( identity, "VGL_LIBRARY" ) > 0 ) THEN

				PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
				    IN WINDOW window BROWSE ON REPORT.IDENTITY WITH ( display_only=display_only )

			ELSE
				PROMPT FOR def ON LINE row FROM column TO column+cell_width-1
				    IN WINDOW window FORMAT TEXT50 WITH ( display_only=display_only )

			ENDIF

		ELSE
		
			PROMPT FOR def ON LINE row FROM column TO column+cell_width-1 IN WINDOW window FORMAT 'prompt_type' WITH ( display_only=display_only )
	
			
			
		ENDIF

		IF ( NOT display_only ) AND ( def <> orig_def ) THEN

			IF ( NOT TRANSACTION_IS_WRITE() ) THEN
				START WRITE TRANSACTION "This is required see status from UPDATE when it aint here"
			ENDIF

			ASSIGN smidi_config_item.value IN OBJECT self = def
			UPDATE smidi_config_item, status

		ENDIF

	ENDIF

ENDROUTINE { default_prompt }
{******************************************************************************}

GLOBAL ROUTINE get_sm_unit (VALUE system, VALUE sap_unit)

	DECLARE sm_unit

	sm_unit = SELECT smidi_r3_units.id_sm_unit 
		  WHERE smidi_system = system
		  AND identity = sap_unit

	IF (sm_unit = EMPTY) THEN

		sm_unit = sap_unit

	ELSEIF ( BLANK ( sm_unit ) ) THEN

		sm_unit = sap_unit

	ENDIF

	RETURN (sm_unit)

ENDROUTINE {get_sm_unit}

{******************************************************************************}
{ end $smidi_lte_system }
