{******************************************************************************
*
* Module Name   : BE_BATCH_RE
*
* Purpose       : Results Entry for Batch
*
* Document Ref. : 
*
* Specification : 
*
* Portability   : Not Checked
*
* Re-entrant    : 
*
*******************************************************************************}

ENABLE WINDOWS
SET NOTPROTECTED
SET NAME "DEFER/"
SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_CLASS

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $RESULT_LIST
JOIN LIBRARY $LIB_RE_GLOBALS


{*****************************************************************************}

GLOBAL
ROUTINE result_list_batch ( VALUE batch, VALUE mode )

{*****************************************************************************}

    DECLARE test, select_array, test_db, num_test

    ARRAY select_array

    CREATE OBJECT "STD_OBJECT_DATABASE", test_db
    test_db . initialise ( "TEST" )

    test = SELECT batch_entry . test 
           WHERE identity = batch 
           ORDER ON order_number ASCENDING

    num_test = 0

    WHILE ( test <> EMPTY )

        num_test = num_test + 1

        array_select_add ( select_array    , 
                           ARRAY_SELECT_EQ ,
                           "TEST_NUMBER"   ,
                           test            )

        test_db . select ( select_array )

        select_array = EMPTY  
        ARRAY select_array

        NEXT batch_entry
        test = SELECT batch_entry . test      

    ENDWHILE
    
    IF ( num_test > 0 ) THEN

        result_list_tests( test_db, mode )

    ENDIF

ENDROUTINE

{*****************************************************************************}
 
ROUTINE result_list_batch_menu ( VALUE option )

{*****************************************************************************}
	DECLARE prompt_object ,
		    terminator    ,
		    message_1     ,
		    max_size      ,
            form          ,
            batch_id

    SET BATCHSTATUS "VC"

    IF global ( "TERMTYPE" ) = "GUI" THEN

        terminator = " "

    ELSE

        terminator = ":"     

    ENDIF

    message_1 = get_user_message ( "BATCH_RESULT_BATCH_TITLE"      , 1 )

    max_size  = string_length ( message_1 )

    message_1 = pad ( message_1 , " " , max_size ) : terminator

    CREATE OBJECT PROMPT_CLASS_FORM , form
           
    form . height = 2
    form . width  = 50
    form . row    = 2
    form . column = 9
    form . border = TRUE
    form . header = get_user_message ( "BATCH_RESULT_HEADER" ,1 ) 
    form . footer = get_user_message ( "BATCH_RESULT_FOOTER" , 1 )

    form . button_style     = FORM_BUTTON_OK_CANCEL
    form . return_behaviour = FORM_RETURN_STAY

    form . add_frame ( ""            ,
                       1             ,
                       1             ,
                       1             ,
                       form . width  )    

    form . add_display ( message_1                ,
                         2                        ,
                         1                        ,
                        PROMPT_RENDITION_BOLD    +
                        PROMPT_RENDITION_RAISED  )

    PROMPT OBJECT prompt_object
           ON LINE 1
           FROM 2 + max_size + 3
           BROWSE ON BATCH_HEADER 
           THEN SELECT        
    
    form . add_prompt ( prompt_object )

    form . start_prompt()
    form . wait_prompt()

    IF form . get_lastkey () = "DO" THEN    
            
        batch_id        = form . prompt_objects [ 1 ] . value

        result_list_batch(batch_id, RE_MODIFY)
            
    ENDIF

    form . end_prompt   ()

ENDROUTINE

{*****************************************************************************}

ROUTINE result_list_batch_rmb( explorer_rmb  , 
                               record_object , 
                               collection    )

{*****************************************************************************}

    DECLARE batch_id
    
    collection . set_first()

    batch_id = SELECT batch_header . identity IN OBJECT collection . current

    IF batch_id <> EMPTY THEN

        result_list_batch(batch_id, RE_MODIFY)

    ENDIF       

ENDROUTINE

{*****************************************************************************}
{*****************************************************************************}
{*****************************************************************************}
