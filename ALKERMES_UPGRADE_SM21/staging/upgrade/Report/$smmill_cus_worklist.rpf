{==============================================================================}
{                                                                              }
{  ORBIS INFORMATION SYSTEMS                                                   }
{                                                                              }
{  Filename         : $SMMILL_CUS_WORKLIST.RPF                                 }
{  Version          :                                                          }
{  Document Ref.    :                                                          }
{  Author           : D. Kelly                                                 }
{  Date Created     : 09-Nov-2001                                              }
{  Description      : Report to for generating and transferring Millennium     }
{                     custom worklists.                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{                                                                              }
{  Ver.     Date        By          Description                                }
{  ----     ----        --          -----------                                }
{  1.0      06-Nov-2001 DK          Release version                            }
{                                                                              }
{==============================================================================}

SET NAME "DEFER/"
ENABLE WINDOWS

SET NOTPROTECTED

SET COMPILE_OPTION DECLARE

JOIN STANDARD_LIBRARY STD_CLASS
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_WINDOW
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_CLIENT

JOIN LIBRARY $CRITERIA_EDIT
JOIN LIBRARY $CRITERIA_SAVED
JOIN LIBRARY $CRITERIA_CACHE
JOIN LIBRARY $CRITERIA_LIB
JOIN LIBRARY $LIB_STAN
JOIN LIBRARY $WKSBROWSE

JOIN LIBRARY $lib_utils
JOIN LIBRARY $SMMILL_DYNAMIC_SQL
JOIN LIBRARY $SMMILL_TRANSFER

JOIN LIBRARY $SMMILL_CONST

CONSTANT FORM_WIDTH       = 105
CONSTANT FORM_HEIGHT_GUI  = 22
CONSTANT FORM_HEIGHT_TERM = 20

CONSTANT BLANK_CELL = ""

CONSTANT BUTTON_WIDTH     = 16
CONSTANT BUTTON_SPACE     = 10

CONSTANT GRID_WIDTH       = 30
CONSTANT STANDARD_ID      = 8
CONSTANT ID_TEXT          = 3
CONSTANT REPLICATE_NO     = 16

DECLARE std_array

ARRAY std_array

main()

{==============================================================================}
{                                                                              }
{  ROUTINE main                                                                }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Main Routine                                   }
{                                                                              }
{==============================================================================}

ROUTINE main

    DECLARE main_form, smp_user, mill_user, mill_password

    smp_user = GLOBAL("OPERATOR")

    mill_user = SELECT MILL_SECURITY . mill_user
                 WHERE lims_user = smp_user AND
                       removeflag = FALSE
                       

    IF mill_user <> EMPTY THEN

        mill_password = SELECT MILL_SECURITY . mill_password

        IF ( mill_password <> EMPTY ) AND
           ( STRIP(mill_password <> "") ) AND
           ( mill_password <> Null) THEN

            get_std_array()
            setup_form ( main_form )

            main_form . start_prompt ()

            REPEAT 

                main_form . wait_prompt ()

                IF ( main_form . get_lastkey () = "DO" ) THEN

                    transfer_worklist ( main_form,
                                        mill_user,
                                        mill_password)

                ENDIF


            UNTIL  main_form . get_lastkey () = "EXIT" 

            main_form . end_prompt ()

        ELSE

            flashmessage("No password assigned for Millennium User ":STRIP(mill_user), TRUE)

        ENDIF

    ELSE

        flashmessage("SampleManager User ": STRIP(smp_user):" cannot transfer data to Millennium", TRUE)

    ENDIF


ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE setup_form                                                          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Sets up properties for the main form           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE setup_form ( main_form )

    DECLARE the_header, proj, temp, send, criteria, propogate_button,
            select_samples, clear_samples, add_1, add_2, remove_2, remove_1,
            std_button, generate_button, help_button, cancel_button,
            rem_std_button, info, vial_pos, no_injections,
            proj_array, smp_version

    ARRAY proj_array

    proj_array[1,1] = "NONE SELECTED"

    the_header = "SampleManager -> Millennium Worklist Generation and Transfer"

    PROMPT OBJECT main_form
        CLASS PROMPT_CLASS_FORM
        WITH ( width  = FORM_WIDTH                          ,
               row    = 5                                   ,
               column = 10                                  ,
               header = the_header                          ,
               footer = "<DO> to Continue, <EXIT> to Cancel",
               proportional = TRUE                          ,
               button_style = FORM_BUTTON_NONE              ,
               return_behaviour = FORM_RETURN_WRAP          )

    main_form . height = FORM_HEIGHT_GUI


                                  {============================================}
                                  { Form Frames.                               }    
                                  {============================================}

    main_form . add_frame ("Millennium Specific Options", 1 , 1 , 3 , 37)
    main_form . add_frame ("Sample Selection"           , 40, 1 , 3 , 25)
    main_form . add_frame ("Millennium Worklist Options", 67, 1 , 3 , 22)
    main_form . add_frame ("Send Automatically?"        , 90, 1 , 3 , 15)
    main_form . add_frame (""                           , 94, 2 , 1 , 6 )
    main_form . add_frame ("Samples"                    , 34, 6 , 7 , 15)
    main_form . add_frame ("Standards"                  , 34, 15, 3 , 15)
    main_form . add_frame ("Available Samples"          , 1 , 6 , 6 , 32)
    main_form . add_frame ("Millennium Worklist"        , 50, 6 , 12, 55)
    main_form . add_frame (""                           , 1 , 21, 1 , 104)
    main_form . add_frame ("Available Standards"        , 1 , 14, 4 , 32)
  


                                  {============================================}
                                  { Millennium Options Prompts.                }    
                                  {============================================}



    PROMPT OBJECT proj
                BROWSE ON TEXT 
                ON LINE 1 FROM 15 to 34
                WITH ( ALWAYS_VALIDATE = TRUE ,
                       LOWERED = TRUE,
                       BROWSE_ROUTINE = "select_project_data",
                       VALIDATION_ROUTINE = "validate_project",
                       USER_INFO = proj_array)

    main_form . add_display ( "Project    ",
                              2         ,
                              1         ,
                              PROMPT_RENDITION_BOLD + PROMPT_RENDITION_RAISED)


    PROMPT OBJECT temp
                BROWSE ON TEXT
                ON LINE 2 FROM 15 to 34
                WITH ( LOWERED = TRUE,
                       LEAVE_PROMPT_ROUTINE = "enable_buttons",
                       BROWSE_ROUTINE = "select_sampleset_data",
                       VALIDATION_ROUTINE = "validate_sset",
                       ALWAYS_VALIDATE = TRUE )



    main_form . add_display ( "SampleSet  ",
                              2         ,
                              2         ,
                              PROMPT_RENDITION_BOLD + PROMPT_RENDITION_RAISED)

    PROMPT OBJECT no_injections
	    FORMAT MILL_INT_SSET . no_of_injections
	    on line 3 from 32 TO 34
            WITH (value = GLOBAL("MILL_NO_INJECTIONS_DEFAULT"),
                  foreground_colour = PROMPT_COLOUR_BLUE)

    smp_version = STRIP(smp_version_number ( ))

    IF LEFTSTRING(smp_version, 4) = "2001" THEN

        main_form . add_display ( "No of Injections Per Sample?", 
                                   2, 
                                   3,
                                   PROMPT_RENDITION_BOLD )

    ELSE

        main_form . add_display ( "No of Injections Per Sample?", 
                                   2, 
                                   3,
                                   PROMPT_RENDITION_BOLD + PROMPT_RENDITION_RAISED )

    ENDIF



                                  {============================================}
                                  { Send Automtically Check Box.               }    
                                  {============================================}

    PROMPT OBJECT send
	    BROWSE ON BOOLEAN
	    on line 2 from 96
            WITH ( is_check        = TRUE,
                   status_text     = "Enabled",
                   value           = GLOBAL("MILL_INTERFACE_AUTO_SEND"),
                   vgl_library     = GLOBAL ( "CURRENT_LIBRARY" ) )

                                  {============================================}
                                  { Sample Criteria Buttons.                   }    
                                  {============================================}



    PROMPT OBJECT criteria
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 1                           ,
                   width               = BUTTON_WIDTH+7              ,
                   column              = 41                          ,
                   caption             = "Sample Selection Filter",
                   mouse_click_routine = "get_criteria"              ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = FALSE                      )


    PROMPT OBJECT select_samples
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 3                           ,
                   width               = BUTTON_WIDTH - 5            ,
                   column              = 41                          ,
                   caption             = "Get Samples"               ,
                   mouse_click_routine = "get_samples"               ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = FALSE                       )

    PROMPT OBJECT clear_samples
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 3                           ,
                   width               = BUTTON_WIDTH - 5            ,
                   column              = 53                          ,
                   caption             = "Clear Samples"             ,
                   mouse_click_routine = "clear_samps"               ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = TRUE                        )



    PROMPT OBJECT vial_pos
	    BROWSE ON INTEGER
	    on line 1 from 84 TO 87
            WITH (value = GLOBAL("MILL_VIAL_POSITION_DEFAULT"),
                  leave_prompt_routine = "update_vials",
                  foreground_colour = PROMPT_COLOUR_BLUE)

    main_form . add_display ( "First Vial No.", 
                               68, 
                               1,
                               PROMPT_RENDITION_BOLD + PROMPT_RENDITION_RAISED )

    PROMPT OBJECT propogate_button
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 3                           ,
                   width               = BUTTON_WIDTH +4             ,
                   column              = 68                          ,
                   caption             = "Propagate Column Data"     ,
                   mouse_click_routine = "propogate_data"            ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = TRUE                        )

                                  {============================================}
                                  { Sample Add/Remove Buttons.                 }    
                                  {============================================}

    PROMPT OBJECT add_1
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 6                           ,
                   width               = BUTTON_WIDTH - 3            ,
                   column              = 35                          ,
                   caption             = "Add >"                     ,
                   mouse_click_routine = "add_single"                ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = FALSE                       )

    PROMPT OBJECT add_2
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 8                          ,
                   width               = BUTTON_WIDTH - 3            ,
                   column              = 35                          ,
                   caption             = "Add >>"                    ,
                   mouse_click_routine = "add_all"                   ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = FALSE                       )

    PROMPT OBJECT remove_2
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 10                          ,
                   width               = BUTTON_WIDTH - 3            ,
                   column              = 35                          ,
                   caption             = "<< Remove"                 ,
                   mouse_click_routine = "remove_all"                ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = FALSE                       )

    PROMPT OBJECT remove_1
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 12                          ,
                   width               = BUTTON_WIDTH - 3            ,
                   column              = 35                          ,
                   caption             = "< Remove"                  ,
                   mouse_click_routine = "remove_single"             ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = FALSE                       )



                                  {============================================}
                                  { Standard Buttom Prompt.                    }    
                                  {============================================}

    PROMPT OBJECT std_button
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 15                          ,
                   width               = BUTTON_WIDTH - 3            ,
                   column              = 35                          ,
                   caption             = "Standard >"                ,
                   mouse_click_routine = "add_standard"              ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = FALSE                       )

    PROMPT OBJECT rem_std_button
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 17                          ,
                   width               = BUTTON_WIDTH - 3            ,
                   column              = 35                          ,
                   caption             = "< Standard"                ,
                   mouse_click_routine = "rem_standard"              ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = FALSE                       )

    PROMPT OBJECT info
                FORMAT TEXT
                ON LINE 19 FROM 19 to 89
                WITH ( TEXT =  "",
                       DISPLAY_ONLY = TRUE )


                                  {============================================}
                                  { Generate, Help and Cancel Prompts.         }    
                                  {============================================}

    PROMPT OBJECT generate_button
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 21                          ,
                   width               = BUTTON_WIDTH*2              ,
                   column              = 3                           ,
                   caption             = "Generate Millennium Worksheet",
                   {mouse_click_routine = "transfer_worklist"         ,}
                   send_lastkey        = "DO"                        ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = TRUE                         )

    PROMPT OBJECT help_button
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 21                          ,
                   width               = BUTTON_WIDTH - 3            ,
                   column              = 71                          ,
                   caption             = "Help"                      ,
                   mouse_click_routine = "execute_help_file"         ,
                   vgl_library         = "$SMMILL_HELP"              ,
                   enabled             = TRUE                         )


    PROMPT OBJECT cancel_button
            CLASS "STD_PROMPT_BUTTON"
            WITH ( row                 = 21                          ,
                   width               = BUTTON_WIDTH - 3            ,
                   column              = 88                          ,
                   caption             = "Cancel"                    ,
                   send_last_key       = "EXIT"                      ,
                   vgl_library         = GLOBAL( "CURRENT_LIBRARY" ) ,
                   enabled             = TRUE                         )

                                  {============================================}
                                  { Add Millennium Options Prompts.            }    
                                  {============================================}

    main_form . add_prompt ( proj  )           { PROMPT 1 }
    main_form . add_prompt ( temp  )           { PROMPT 2 }
    main_form . add_prompt ( propogate_button ){ PROMPT 3 }

                                  {============================================}
                                  { Add Sample Criteria Buttons.               }    
                                  {============================================}

    main_form . add_prompt ( criteria )        { PROMPT 4 }
    main_form . add_prompt ( select_samples )  { PROMPT 5 }


                                  {============================================}
                                  { Create and Add Grids to the form.          }    
                                  {============================================}

    setup_grids ( main_form )  {Sample Grid}   { PROMPT 6 }
                               {Worklist Grid} { PROMPT 7 }
                               {Standard Grid} { PROMPT 8 }

                                  {============================================}
                                  { Add Sample Clear Button.                   }    
                                  {============================================}

    main_form . add_prompt ( clear_samples )   { PROMPT 9 }

                                  {============================================}
                                  { Add Sample Add/Remove Buttons.             }    
                                  {============================================}

    main_form . add_prompt ( add_1 )           { PROMPT 10}
    main_form . add_prompt ( add_2 )           { PROMPT 11}
    main_form . add_prompt ( remove_2 )        { PROMPT 12}
    main_form . add_prompt ( remove_1 )        { PROMPT 13}


                                  {============================================}
                                  { Add Standard Button.                       }    
                                  {============================================}

    main_form . add_prompt ( std_button )      { PROMPT 14}
    main_form . add_prompt ( rem_std_button )  { PROMPT 15}

                                  {============================================}
                                  { Add Generate, Help and Cancel Prompts.     }    
                                  {============================================}

    main_form . add_prompt ( generate_button ) { PROMPT 16}
    main_form . add_prompt ( help_button )     { PROMPT 17}
    main_form . add_prompt ( cancel_button )   { PROMPT 18}


    main_form . add_prompt ( info )            { PROMPT 19}
    main_form . add_prompt ( send  )           { PROMPT 20}
    main_form . add_prompt ( no_injections )   { PROMPT 21}
    main_form . add_prompt ( vial_pos        ) { PROMPT 22}

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE setup_grids                                                         }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  06-Nov-2001  DK              Sets up the grids                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            The main form                   }
{                                                                              }
{==============================================================================}

ROUTINE setup_grids ( form )

    DECLARE sample_grid, worklist_grid, standard_grid

                                  {============================================}
                                  { Setup Samples Selected Grid.               }    
                                  {============================================}

    PROMPT OBJECT sample_grid
	CLASS PROMPT_CLASS_GRID
	WITH ( row                  = 6 ,
	       column               = 2,
	       height               = 6 ,
	       width                = GRID_WIDTH ,
	       cell_columns         = 1 ,
	       cell_rows            = 1 ,
	       current_column       = 1 ,
	       current_row          = 1 ,
	       check_move_routine   = "grid_check_move" ,
	       prompt_cell_routine  = "grid_prompt" ,
	       display_cell_routine = "grid_display" )

    sample_grid . column_size [ 1 ] = GRID_WIDTH

    sample_grid . title_size_top          = 1
    sample_grid . title_text_top [ 1  ,1] = "SampleManager Samples"

    ARRAY sample_grid . user_info = ""


    form . add_prompt ( sample_grid )

                                  {============================================}
                                  { Setup Worklist Grid.                       }    
                                  {============================================}

    PROMPT OBJECT worklist_grid
	CLASS "STD_GRID_EDITOR"
	WITH ( row                  = 6 ,
	       column               = (form . width - 23) - GRID_WIDTH-1 ,
	       height               = 12 ,
	       width                = GRID_WIDTH + 23,
	       cell_columns         = 11 ,
	       cell_rows            = 1 ,
	       current_column       = 1 ,
	       current_row          = 1 ,
	       check_move_routine   = "grid_check_move" ,
	       prompt_cell_routine  = "grid_prompt" ,
	       display_cell_routine = "grid_display" )

    worklist_grid . column_size [ VIAL_NO        ] = 5
    worklist_grid . column_size [ SAMP_NAME      ] = GRID_WIDTH - 8
    worklist_grid . column_size [ SAMP_TYPE      ] = GRID_WIDTH - 17
    worklist_grid . column_size [ NO_INJECT      ] = 8
    worklist_grid . column_size [ SS_METHOD      ] = GRID_WIDTH - 8
    worklist_grid . column_size [ SS_FUNCTION    ] = GRID_WIDTH - 12
    worklist_grid . column_size [ SS_INJ_VOL     ] = 7
    worklist_grid . column_size [ SS_RUN_TIME    ] = 7
    worklist_grid . column_size [ SS_INJ_DELAY   ] = 7
    worklist_grid . column_size [ SS_SAMP_WEIGHT ] = 10
    worklist_grid . column_size [ SS_DILUTION    ] = 7

    worklist_grid . title_size_top                      = 1
    worklist_grid . title_text_top [ VIAL_NO        ,1] = "No."
    worklist_grid . title_text_top [ SAMP_NAME      ,1] = "Sample Name"
    worklist_grid . title_text_top [ SAMP_TYPE      ,1] = "Sample Type"
    worklist_grid . title_text_top [ NO_INJECT      ,1] = "No.of Injs"
    worklist_grid . title_text_top [ SS_METHOD      ,1] = "Method"
    worklist_grid . title_text_top [ SS_FUNCTION    ,1] = "Function"
    worklist_grid . title_text_top [ SS_INJ_VOL     ,1] = "Inj. Vol."
    worklist_grid . title_text_top [ SS_RUN_TIME    ,1] = "Run Time"
    worklist_grid . title_text_top [ SS_INJ_DELAY   ,1] = "Inj. Delay"
    worklist_grid . title_text_top [ SS_SAMP_WEIGHT ,1] = "Sample Wght."
    worklist_grid . title_text_top [ SS_DILUTION    ,1] = "Dilution"



    ARRAY worklist_grid . user_info ARRAYSIZE(0,2)
    ARRAY worklist_grid . user_info = ""

    form . add_prompt ( worklist_grid )


                                  {============================================}
                                  { Setup Standards Grid.                      }    
                                  {============================================}


    PROMPT OBJECT standard_grid
	CLASS "STD_GRID_EDITOR"
	WITH ( row                  = 14 ,
	       column               = 2 ,
	       height               = 4 ,
	       width                = GRID_WIDTH ,
	       cell_columns         = 2 ,
	       cell_rows            = 100 ,
	       current_column       = 1 ,
	       current_row          = 1 ,
	       check_move_routine   = "grid_check_move" ,
	       prompt_cell_routine  = "grid_prompt" ,
	       display_cell_routine = "grid_display" )



    standard_grid . column_size [ 1 ] = 5
    standard_grid . column_size [ 2 ] = GRID_WIDTH - 8

    standard_grid . title_size_top        = 1
    standard_grid . title_text_top [1 ,1] = "SMP?"
    standard_grid . title_text_top [2 ,1] = "Standard Name"

    ARRAY standard_grid . user_info = ""

    form . add_prompt ( standard_grid )

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE grid_check_move                                                     }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Check Grid Movement.                           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE grid_check_move (       self        ,
	  		  VALUE cell_column ,
	   		  VALUE cell_row    ,
                                new_column  ,
                                new_row     )

    IF ( cell_row <> new_row ) THEN

        self . current_row = new_row
	self . current_column = new_column

	IF ( cell_row > 0 ) AND
           ( cell_row <= SIZE_OF_ARRAY ( self . user_info )) THEN

            IF ( STRIP(self . user_info [ cell_row, 1]) <> "" ) AND
               ( self . user_info [ cell_row, 1 ] <> EMPTY ) THEN

	        self . redisplay_row ( cell_row )

            ENDIF

	ENDIF

	self . redisplay_row ( new_row )

    ENDIF

    self . redisplay_row ( new_row )

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE grid_prompt                                                         }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Grid Prompt Routine.                           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE grid_prompt (       self        ,
	              VALUE cell_column ,
		      VALUE cell_row    ,
			    window      ,
		      VALUE column      ,
		      VALUE row         ,
		      VALUE cell_height ,
	              VALUE cell_width  )

    DECLARE meth_array, no_of_rows

    ARRAY meth_array


    no_of_rows = self . cell_rows

    IF ( self . tag = 8  { Standard Grid Prompt } ) THEN

        IF ( cell_column = 2 )

            IF (self . user_info [ cell_row, 1] = "") OR
               (self . user_info [ cell_row, 1] = "-") OR
               (self . user_info [ cell_row, 1] = FALSE) OR
               (self . user_info [ cell_row, 1] = EMPTY) OR
               (self . user_info [ cell_row, 1] = self . user_info [ cell_row, 2]) THEN

                PROMPT FOR self . user_info [ cell_row, cell_column]
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width - 1
                    BROWSE ON TEXT
                    WITH(foreground_colour = PROMPT_COLOUR_RED )

            ELSE

                IF SIZE_OF_ARRAY(std_array) = 0 THEN
 
                    IF STRIP(self . user_info [ cell_row, cell_column]) = "" THEN

                        flashmessage("No Standards to choose from!", TRUE)

                    ENDIF

                    PROMPT FOR self . user_info [ cell_row, cell_column]
                        AT column, row
                        IN WINDOW window
                        TO column + cell_width - 1
                        BROWSE ON TEXT
                        WITH(foreground_colour = PROMPT_COLOUR_RED )
                    

                ELSE

                    PROMPT FOR self . user_info [ cell_row, cell_column]
		        CHOOSE OUTOF std_array
                        AT column, row
                        IN WINDOW window
                        TO column + cell_width + 254
                        WITH ( parent_prompt = self,
                               foreground_colour = PROMPT_COLOUR_RED )
                ENDIF

            ENDIF

        ELSEIF ( cell_column = 1 )

            PROMPT FOR self . user_info [ cell_row, cell_column]
                AT column, row
                IN WINDOW window
                TO column + cell_width - 1
                BROWSE ON BOOLEAN
                WITH ( IS_CHECK = TRUE ,
	               TRUE_WORD = "*" ,
	               FALSE_WORD = "",
                       foreground_colour = PROMPT_COLOUR_RED )

        ENDIF

 
        self . parent_prompt . prompt_objects [14] . set_enabled ( TRUE )


    ELSEIF ( self . tag = 6  { Sample Grid Prompt } ) THEN

        PROMPT IN WINDOW window AT column , row

    ENDIF

    IF self . tag = 7 { Worklist Grid Prompt }THEN

        IF cell_row < no_of_rows THEN

            IF ( cell_column = NO_INJECT ) THEN

               PROMPT FOR self . user_info [ cell_row, cell_column]
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width - 1
                    FORMAT MILL_INT_SSET . no_of_injections

            ELSEIF ( cell_column = SS_FUNCTION  ) THEN

               PROMPT FOR self . user_info [ cell_row, cell_column]
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width - 1
                    BROWSE ON PHRASE . MILL_FUNC

            ELSEIF ( cell_column = SS_METHOD  ) THEN

               select_method_data(self,
                                  meth_array)


	    PROMPT FOR self . user_info [ cell_row, cell_column]
		    CHOOSE OUTOF meth_array
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width + 254
                    WITH ( parent_prompt = self)


            ELSEIF ( cell_column = SS_INJ_VOL ) THEN

               PROMPT FOR self . user_info [ cell_row, cell_column]
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width - 1
                    BROWSE ON REAL
                    WITH ( places = 1 )

               SET FORMAT "999.9"

            ELSEIF ( cell_column = SS_RUN_TIME ) THEN


                PROMPT FOR self . user_info [ cell_row, cell_column]
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width - 1
                    BROWSE ON REAL
                    WITH ( places = 2 )

                SET FORMAT "999.99"

            ELSEIF ( cell_column = SS_INJ_DELAY ) THEN


               PROMPT FOR self . user_info [ cell_row, cell_column]
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width - 1
                    BROWSE ON REAL
                    WITH ( places = 2 )

               SET FORMAT "999.99"

            ELSEIF ( cell_column = SS_SAMP_WEIGHT ) THEN

               PROMPT FOR self . user_info [ cell_row, cell_column]
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width - 1
                    BROWSE ON REAL
                    WITH ( places = 5 )

               SET FORMAT "999.99999"

            ELSEIF ( cell_column = SS_DILUTION ) THEN

               PROMPT FOR self . user_info [ cell_row, cell_column]
                    AT column, row
                    IN WINDOW window
                    TO column + cell_width - 1
                    BROWSE ON REAL
                    WITH ( places = 5 )


               SET FORMAT "999.99999"

            ELSE

                PROMPT IN WINDOW window AT column , row

            ENDIF

        ELSE


             PROMPT FOR self . user_info [ cell_row, cell_column]
                AT column, row
                IN WINDOW window
                TO column + cell_width - 1
                WITH( DISPLAY_ONLY = TRUE)

        ENDIF

    ENDIF


ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE grid_display                                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Grid Display Routine.                          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE grid_display (       self        ,
	  	       VALUE cell_column ,
	   	       VALUE cell_row    ,
			     window      ,
		       VALUE column      ,
		       VALUE row         ,
		       VALUE cell_height ,
		       VALUE cell_width  )

    DECLARE inverse_mode , colour_mode , display_val, display_val_1,
            display_val_2, display_val_3, display_val_4, display_val_5,
            display_val_6, display_val_7, display_val_8, display_val_9,
            display_val_10, display_val_11

    inverse_mode = FALSE

    { Format the columns }

    IF cell_column = SS_INJ_VOL THEN

        SET FORMAT "999.9"

    ELSEIF cell_column = SS_RUN_TIME THEN

        SET FORMAT "99.99"

    ELSEIF cell_column = VIAL_NO THEN

        SET FORMAT "9999"

    ELSEIF cell_column = NO_INJECT THEN

        SET FORMAT "9999"

    ELSEIF cell_column = SS_INJ_DELAY THEN

        SET FORMAT "999.99"

    ELSEIF cell_column = SS_SAMP_WEIGHT THEN

        SET FORMAT "99.99999"

    ELSEIF cell_column = SS_DILUTION THEN

        SET FORMAT "99.99999"

    ELSE


    ENDIF

    IF self . user_info [cell_row, THE_TYPE] = "SAMPLE" THEN

        colour_mode = PROMPT_COLOUR_BLACK

    ELSE

        colour_mode = PROMPT_COLOUR_RED

    ENDIF

    display_val_1  = strip ( self . user_info [ cell_row , VIAL_NO        ] )
    display_val_2  = strip ( self . user_info [ cell_row , SAMP_NAME      ] )
    display_val_3  = strip ( self . user_info [ cell_row , SAMP_TYPE      ] )
    display_val_4  = strip ( self . user_info [ cell_row , NO_INJECT      ] )
    display_val_5  = strip ( self . user_info [ cell_row , SS_METHOD      ] )
    display_val_6  = strip ( self . user_info [ cell_row , SS_FUNCTION    ] )
    display_val_7  = strip ( self . user_info [ cell_row , SS_INJ_VOL     ] )
    display_val_8  = strip ( self . user_info [ cell_row , SS_RUN_TIME    ] )
    display_val_9  = strip ( self . user_info [ cell_row , SS_INJ_DELAY   ] )
    display_val_10 = strip ( self . user_info [ cell_row , SS_SAMP_WEIGHT ] )
    display_val_11 = strip ( self . user_info [ cell_row , SS_DILUTION    ] )


    IF self . current_row = cell_row THEN

        IF ( self . tag = 6)  THEN
 
    	    inverse_mode = TRUE

        ENDIF

    ENDIF

    IF ( self . tag = 8) { Standard Grid } THEN

        IF cell_column = 2  THEN

            DISPLAY self.user_info[cell_row, cell_column]
	        IN WINDOW window
	        ON LINE row FROM column
	        WITH ( foreground_colour =  PROMPT_COLOUR_RED)

        ELSEIF cell_column = 1  THEN

	   DISPLAY self . user_info [ cell_row , cell_column ]
	       AT column , row
	       IN WINDOW window
	       TO column + cell_width - 1
	       FORMAT BOOLEAN
	       WITH ( IS_CHECK = TRUE ,
	              TRUE_WORD = "*" ,
	              FALSE_WORD = "",
                      foreground_colour = PROMPT_COLOUR_RED )

        ENDIF
 
    ENDIF

    IF ( self . tag = 6 ) THEN

        DISPLAY display_val_1
	    IN WINDOW window
	    ON LINE row FROM column
	    INVERSE = inverse_mode
	    WITH ( foreground_colour = colour_mode )

    ELSEIF ( self . tag = 7 ) THEN

        IF cell_column = VIAL_NO  THEN

            display_val = display_val_1
            colour_mode = PROMPT_COLOUR_RED

        ELSEIF cell_column= SAMP_NAME THEN

            display_val = display_val_2
            colour_mode = PROMPT_COLOUR_BLUE

        ELSEIF cell_column= SAMP_TYPE THEN

            display_val = display_val_3
            colour_mode = PROMPT_COLOUR_BLACK

        ELSEIF cell_column= NO_INJECT THEN

            display_val = display_val_4
            colour_mode = PROMPT_COLOUR_MAGENTA

        ELSEIF cell_column= SS_METHOD THEN

            display_val = display_val_5
            colour_mode = PROMPT_COLOUR_BLACK

        ELSEIF cell_column= SS_FUNCTION THEN

            display_val = display_val_6
            colour_mode = PROMPT_COLOUR_BLACK

        ELSEIF cell_column= SS_INJ_VOL THEN

            SET FORMAT "999.9"

            display_val = display_val_7
            colour_mode = PROMPT_COLOUR_BLACK

        ELSEIF cell_column= SS_RUN_TIME THEN

            SET FORMAT "99.99"

            display_val = display_val_8
            colour_mode = PROMPT_COLOUR_BLACK

        ELSEIF cell_column= SS_INJ_DELAY THEN

            SET FORMAT "999.99"

            display_val = display_val_9
            colour_mode = PROMPT_COLOUR_BLACK

        ELSEIF cell_column= SS_SAMP_WEIGHT THEN

            SET FORMAT "99.99999"

            display_val = display_val_10
            colour_mode = PROMPT_COLOUR_BLACK

        ELSEIF cell_column= SS_DILUTION THEN

            SET FORMAT "99.99999"

            display_val = display_val_11
            colour_mode = PROMPT_COLOUR_BLACK

        ENDIF

        DISPLAY display_val
	    IN WINDOW window
	    ON LINE row FROM column
	    INVERSE = inverse_mode
	    WITH ( foreground_colour = colour_mode )


    ENDIF
{

    self . current_row = row

}
ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE transfer_worklist                                                   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Creates Records in the Interface Transaction   }
{                               Tables.                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE transfer_worklist (       self,
                            VALUE mill_user,
                            VALUE mill_password )

    DECLARE work_grid, count, do_send, is_auto, seq_array, the_proj,
            the_temp, worklist_id, the_inc, pos, status, samp_grid, stan_grid,
            is_cancel, the_anal, list_type, rec_count, the_mess, add_1,
            add_every, rem_1, rem_all, add_std, rem_std, get_samp, samp_crit,
            continue

    ARRAY seq_array
    rec_count = 1

    the_anal = ""
    list_type = "CUSTOM"
    the_mess = ""
    is_cancel = FALSE
    continue = FALSE

    the_proj  = self . prompt_objects [ 1  ] . text
    the_temp  = self . prompt_objects [ 2  ] . text
    is_auto   = self . prompt_objects [ 20 ] . text

    get_samp  = self . prompt_objects [ 5  ]
    samp_crit = self . prompt_objects [ 4  ]

    add_1     = self . prompt_objects [ 10 ]
    add_every = self . prompt_objects [ 11 ]
    rem_1     = self . prompt_objects [ 13 ]
    rem_all   = self . prompt_objects [ 12 ]

    add_std   = self . prompt_objects [ 14 ]
    rem_std   = self . prompt_objects [ 15 ]

    worklist_id = SELECT MAX MILL_INT_SSET . sm_worksheet_id
                   WHERE sm_worksheet_id LIKE "%C_":STRIP(the_proj):"_%"

    IF worklist_id = EMPTY THEN

        worklist_id = "C_":STRIP(the_proj):"_1"

    ELSE

        REPEAT

            worklist_id = STRIP( worklist_id)
            pos = INDEX ( worklist_id, "_")
            worklist_id = RIGHTSTRING( worklist_id, LENGTH(worklist_id) - (pos))

        UNTIL pos = 0

        the_inc = NUMERIC(worklist_id)
        the_inc = the_inc + 1
        the_inc = STRIP(the_inc)
        the_inc = LEFTSTRING(the_inc, (INDEX(the_inc, ".") - 1))
           

        worklist_id = "C_":STRIP(the_proj):"_":STRIP(the_inc)

    ENDIF

    IF is_auto = "Yes" THEN

        do_send = confirm_gui("Create Run Sequence in Millennium?",EMPTY)

        IF do_send THEN
            
            status = 0

        ELSE

            status = -1
            is_cancel = TRUE

        ENDIF

    ELSE

        do_send = confirm_gui("Store Run Sequence for Later Transfer?",EMPTY)   

        IF do_send THEN
            
            status = -1

        ELSE

            status = 0
            is_cancel = TRUE

        ENDIF

    ENDIF  

    IF is_cancel = FALSE THEN

    work_grid = self . prompt_objects [7]

    WHILE rec_count <= SIZE_OF_ARRAY(work_grid . user_info) - 1 DO

        IF STRIP(work_grid . user_info[rec_count,  VIAL_NO]) <> "" THEN

            IF STRIP(work_grid . user_info[rec_count,  SS_METHOD]) = "" THEN

                the_mess = "One or more samples have no Method Set Assigned!"

            ELSEIF STRIP(work_grid . user_info[rec_count,  SS_FUNCTION ]) = "" THEN

                the_mess = "One or more samples have no Method Set Assigned!"
   
            ELSEIF STRIP(work_grid . user_info[rec_count,   SS_INJ_VOL  ]) = "0.0" THEN

                the_mess = "One or more samples has an invalid Injection Volume Assigned (0.0)!"

            ELSEIF STRIP(work_grid . user_info[rec_count,   SS_RUN_TIME  ]) = "0.00" THEN

                the_mess = "One or more samples has an invalid Run Time Assigned (0.00)!"

            ELSEIF STRIP(work_grid . user_info[rec_count,   SS_INJ_DELAY   ]) = "0.00" THEN

                the_mess = "One or more samples has an invalid Injection Delay Assigned (0.00)!"

            ELSEIF STRIP(work_grid . user_info[rec_count,   SS_SAMP_WEIGHT   ]) = "0.00000" THEN

                the_mess = "One or more samples has an invalid Injection Delay Assigned (0.00000)!"

            ELSEIF STRIP(work_grid . user_info[rec_count,   SS_DILUTION   ]) = "0.00000" THEN

                the_mess = "One or more samples has an invalid Dilution Assigned (0.00000)!"

            ENDIF

        ENDIF

        rec_count = rec_count + 1

    ENDWHILE

    IF the_mess = "" THEN

        ARRAY_COPY ( seq_array, work_grid . user_info )

        self . prompt_objects [ 19 ] . set_text 
        ("......Processing Run Sequence, Please Wait.......")


        transfer_sequence ( seq_array,
                            the_proj,
                            the_temp,
                            worklist_id,
                            status,
                            the_anal,
                            list_type,
                            mill_user,
                            mill_password,
                            continue )

        IF continue THEN

            self . prompt_objects [ 19 ] . set_text 
            ("......Done.......")

                                  {============================================}
                                  { Clear Worklist Grid.                       }    
                                  {============================================}

            count = 1

            WHILE count <= SIZE_OF_ARRAY ( work_grid . user_info ) - 1 DO

                work_grid . user_info [count, VIAL_NO] = ""
                work_grid . user_info [count, SAMP_NAME] = ""
                work_grid . user_info [count, SAMP_TYPE] = ""
                work_grid . user_info [count, NO_INJECT] = ""
                work_grid . user_info [count, SS_METHOD] = ""
                work_grid . user_info [count, SS_FUNCTION ] = ""
                work_grid . user_info [count, SS_INJ_VOL] = ""
                work_grid . user_info [count, SS_RUN_TIME] = ""            
                work_grid . user_info [count, SS_INJ_DELAY] = ""
                work_grid . user_info [count, SS_SAMP_WEIGHT] = ""
                work_grid . user_info [count, SS_DILUTION] = ""
                work_grid . user_info [count, THE_TYPE] = ""

                count = count + 1

            ENDWHILE

            work_grid . cell_rows = 1

            work_grid . rebuild ()

                                  {============================================}
                                  { Clear Sample Grid.                         }    
                                  {============================================}

            count = 1
            samp_grid = self . prompt_objects [6]

            WHILE count <= SIZE_OF_ARRAY ( samp_grid . user_info ) - 1 DO

                samp_grid . user_info [count, 1] = ""

                count = count + 1

            ENDWHILE

            samp_grid . cell_rows = 1

            samp_grid . rebuild ()

                                  {============================================}
                                  { Clear Standards Grid.                      }    
                                  {============================================}

            count = 1
            stan_grid = self . prompt_objects [8]

            WHILE count <= SIZE_OF_ARRAY ( stan_grid . user_info ) - 1 DO

                stan_grid . user_info [count, 1] = ""

                count = count + 1

            ENDWHILE

            stan_grid . cell_rows = 100

            stan_grid . rebuild ()
            ARRAY std_array
            get_std_array()

                                  {============================================}
                                  { Clear All Prompts.                         }    
                                  {============================================}

            self . prompt_objects [ 1 ] . set_text ("")
            self . prompt_objects [ 2 ] . set_text ("")

            self . prompt_objects [ 19 ] . set_text ("")

            get_samp  . set_enabled ( FALSE )
            samp_crit . set_enabled ( FALSE )

            add_1     . set_enabled ( FALSE )
            add_every . set_enabled ( FALSE )
            rem_1     . set_enabled ( FALSE )
            rem_all   . set_enabled ( FALSE )

            add_std   . set_enabled ( FALSE )
            rem_std   . set_enabled ( FALSE )

        ENDIF

    ELSE

        flashmessage(the_mess, TRUE)

    ENDIF

    the_mess = ""

    ENDIF

    

ENDROUTINE


{==============================================================================}
{                                                                              }
{  ROUTINE get_criteria                                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Creates Worklist Sample Selection Criteria     }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE get_criteria (self)

    DECLARE the_name, copy_name, the_option, the_temp, the_proj, the_crit,
            the_view, the_pos

    the_view = PAD(GLOBAL("MILL_WORKLIST_CRITERIA_VIEW"), " ", 20)

    the_proj  = STRIP(self . parent_prompt . prompt_objects[1] . text)
    the_temp  = STRIP(self . parent_prompt . prompt_objects[2] . value)

    {=================================================================}
    { Code to remove spaces from select Millennium Data.              }
    {=================================================================}

    the_pos = INDEX(the_proj, " ")

    IF the_pos <> 0 THEN

        REPEAT

            the_proj = LEFTSTRING(the_proj, the_pos - 1):
                       "_":RIGHTSTRING(the_proj, LENGTH(the_proj) - the_pos)

            the_pos = INDEX(the_proj, " ")

        UNTIL the_pos = 0

    ENDIF

    the_pos = INDEX(the_temp, " ")

    IF the_pos <> 0 THEN

        REPEAT

            the_temp = LEFTSTRING(the_temp, the_pos - 1):
                       "_":RIGHTSTRING(the_temp, LENGTH(the_temp) - the_pos)

            the_pos = INDEX(the_temp, " ")

        UNTIL the_pos = 0

    ENDIF

    the_crit = STRIP(the_proj):"_":STRIP(the_temp)

    the_name = the_view:PAD(TOUPPER(STRIP(the_crit)), " ", 20)
    copy_name = EMPTY
    the_option = "ADD"

    CALL_ROUTINE "labtable_input" 
        USING the_name,
              copy_name,
              the_option
    IN LIBRARY "$CRITERIA_EDIT"

    the_option = "MODIFY"

    CALL_ROUTINE "labtable_input" 
        USING the_name,
              copy_name,
              the_option
    IN LIBRARY "$CRITERIA_EDIT"

    create_saved_criteria_record(the_crit,
                                 the_view)

    the_option = "SAVE"

    CALL_ROUTINE "labtable_input" 
        USING the_name,
              copy_name,
              the_option
    IN LIBRARY "$CRITERIA_EDIT"


ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE create_saved_criteria_record                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Creates Saved Criteria Record for Selection    }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE create_saved_criteria_record(VALUE the_crit,
                                     VALUE the_view)

    DECLARE the_description, exist_crit, check_ok

    the_description = "Saved Criteria for SM-Millennium Interface Project and Template "
                      :STRIP(the_crit)


    exist_crit = SELECT CRITERIA_SAVED . identity
                  WHERE table_name = the_view AND
                        identity = the_crit

    IF exist_crit = EMPTY THEN

        RESERVE ENTRY CRITERIA_SAVED, the_view:the_crit, check_ok

        IF check_ok = EMPTY THEN

            ASSIGN CRITERIA_SAVED . description   = the_description
            ASSIGN CRITERIA_SAVED . modifiable    = TRUE
            ASSIGN CRITERIA_SAVED . modified_on   = NOW
            ASSIGN CRITERIA_SAVED . modified_by   = GLOBAL("OPERATOR")
            ASSIGN CRITERIA_SAVED . removeflag    = FALSE

            check_write_transaction()
            UPDATE CRITERIA_SAVED

            COMMIT

        ELSE

            flashmessage(check_ok, TRUE)

        ENDIF  

    ENDIF  

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE get_samples                                                         }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Populates Grid with Samples from Criteria      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE get_samples (self)

    DECLARE criteria, select_array, the_view, samp_test_res_db, the_samp,
            count, samp_array, status, rec_pos, stand_array, the_identifier

    count = 1
    rec_pos = 1
    the_view = GLOBAL("MILL_WORKLIST_CRITERIA_VIEW")

    ARRAY select_array
    ARRAY samp_array
    ARRAY stand_array

    status = "Nothing Selected"

    criteria = SELECT CRITERIA_SAVED . identity

    IF ( criteria <> EMPTY ) THEN
	    
        status = criteria_saved_load_squirrel ( the_view,
	                                        criteria     ,
                                                select_array )

        IF status = EMPTY THEN

	    object_create ( samp_test_res_db, "STD_OBJECT_DATABASE" )

	    samp_test_res_db . initialise ( the_view )

                                  {============================================}
                                  { Harcode criteria where sample status = V.  }    
                                  {============================================}

            array_select_add (  select_array         ,
                                ARRAY_SELECT_EQ      ,
                                "STATUS"             ,
                                "V"                   )
	
	    samp_test_res_db . select ( select_array )
	    samp_test_res_db . select_for_update ( select_array )

            samp_test_res_db . set_by_number ( recpos )                      

            WHILE ( count <= samp_test_res_db . size () ) DO

                samp_test_res_db . set_by_number ( count )

                the_identifier = GLOBAL("MILL_SAMPLE_IDENTIFIER")

                IF TOUPPER(the_identifier) = "ID_TEXT" Then

                    the_samp = object_select_field ( samp_test_res_db . current ,
                                                     the_view                   ,
                                                     "ID_TEXT")

                ELSEIF TOUPPER(the_identifier) = "ID_NUMERIC" Then

                    the_samp = object_select_field ( samp_test_res_db . current ,
                                                     the_view                   ,
                                                     "ID_NUMERIC")

                ELSE

                    flashmessage("Configuration Item MILL_SAMPLE_IDENTIFIER is incorrectly configured!", TRUE)
                    EXIT

                ENDIF


                samp_array[count] = the_samp

                count = count + 1

            ENDWHILE

        ELSE

            flashmessage(status, TRUE)

        ENDIF

    ENDIF

    IF status = EMPTY THEN

        populate_sample_grid ( self,
                               samp_array)
                               
    ENDIF


    populate_stand_grid ( self,
                          stand_array)

    IF SIZE_OF_ARRAY(samp_array) = 0 THEN

        flashmessage("No Samples Selected!", TRUE)

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE get_std_array                                                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Populates Grid with Samples from Criteria      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE get_std_array

    DECLARE the_stand, the_stand_ver, valid, stand_count, usage_no, usage_count
 
    stand_count = 1
    usage_count = 1

    the_stand = SELECT STANDARD_VERSIONS . identity
                 WHERE identity <> EMPTY

    WHILE the_stand <> EMPTY DO

        the_stand_ver = SELECT STANDARD_VERSIONS . version

        valid = check_for_expired_standard ( the_stand ,
		                             the_stand_ver  ,
		                             FALSE    ,	
		                             TRUE     )	

        IF valid THEN

            usage_no = SELECT STANDARD_VERSIONS . maximum_usage

{DK 16/07/02 Modified for Validation Run 2}
{
            WHILE stand_count <= usage_no DO
}
            WHILE usage_count <= usage_no DO

                std_array[stand_count, 1] = STRIP(the_stand):"_":
                                           STRIP(the_stand_ver):".":
                                           STRIP(usage_count)
                                           
                std_array[stand_count, 2] = std_array[stand_count, 1]

                stand_count = stand_count + 1
                usage_count = usage_count + 1

            ENDWHILE

        ENDIF

        usage_count = 1

        NEXT STANDARD_VERSIONS
        the_stand = SELECT STANDARD_VERSIONS . identity

    ENDWHILE

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE populate_sample_grid                                                }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Populates the Samples Selected Grid from       }
{                               samples selected using the criteria defined.   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE populate_sample_grid ( self,
                               samp_array)

    DECLARE sample_grid, count, add_singl, add_every

    count = 1
    sample_grid = self . parent_prompt . prompt_objects [6]

    add_singl  = self . parent_prompt . prompt_objects [ 10 ]
    add_every  = self . parent_prompt . prompt_objects [ 11 ]

    IF SIZE_OF_ARRAY( sample_grid . user_info ) > 0 THEN
{
        clear_samps ( self )
}
        add_singl  . set_enabled ( TRUE )
        add_every  . set_enabled ( TRUE )

    ENDIF

    WHILE count <= SIZE_OF_ARRAY ( samp_array ) DO

        sample_grid . user_info [count, 1              ] = samp_array [ count ]
        sample_grid . user_info [count, 2              ] = self . parent_prompt . prompt_objects[21] . value
        sample_grid . user_info [count, 3              ] = "Unknown"
        sample_grid . user_info [count, 4              ] = count
        sample_grid . user_info [count, SS_METHOD      ] = ""
        sample_grid . user_info [count, SS_FUNCTION    ] = "Inject Samples"
        sample_grid . user_info [count, SS_INJ_VOL     ] = "1.0"
        sample_grid . user_info [count, SS_RUN_TIME    ] = "1.00"
        sample_grid . user_info [count, SS_INJ_DELAY   ] = "1.00"
        sample_grid . user_info [count, SS_SAMP_WEIGHT ] = "1.00000"
        sample_grid . user_info [count, SS_DILUTION    ] = "1.00000"
        sample_grid . user_info [count, THE_TYPE       ] = "SAMPLE"

        count = count + 1

    ENDWHILE

    sample_grid . cell_rows = count

    sample_grid . rebuild ()

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE populate_stand_grid                                                 }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Populates the Standards with Valid Standards   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE populate_stand_grid ( self,
                              stand_array)

    DECLARE stand_grid, count, add_stand

    count = 1

    stand_grid = self . parent_prompt . prompt_objects [8]
    add_stand  = self . parent_prompt . prompt_objects [ 14 ]

    IF SIZE_OF_ARRAY( stand_grid . user_info ) > 0 THEN
{
        clear_samps ( self )
}
        add_stand  . set_enabled ( TRUE )

    ENDIF

    WHILE count <= stand_grid . cell_rows DO

        stand_grid . user_info [count, 1                  ] = ""
        stand_grid . user_info [count, 2                  ] = ""
        stand_grid . user_info [count, 3                  ] = self . parent_prompt . prompt_objects[21] . value
        stand_grid . user_info [count, 4                  ] = "Standard"
        stand_grid . user_info [count, 5                  ] = count
        stand_grid . user_info [count, SS_METHOD + 1      ] = ""
        stand_grid . user_info [count, SS_FUNCTION + 1    ] = "Inject Standards"
        stand_grid . user_info [count, SS_INJ_VOL  + 1    ] = "1.0"
        stand_grid . user_info [count, SS_RUN_TIME + 1    ] = "1.00"
        stand_grid . user_info [count, SS_INJ_DELAY + 1   ] = "1.00"
        stand_grid . user_info [count, SS_SAMP_WEIGHT + 1 ] = "1.00000"
        stand_grid . user_info [count, SS_DILUTION +1     ] = "1.00000"
        stand_grid . user_info [count, THE_TYPE    +1     ] = "STANDARD"

        count = count + 1

    ENDWHILE

    stand_grid . cell_rows = count

    stand_grid . rebuild ()

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE clear_samps                                                         }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Clears Grid of Samples from Criteria           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE clear_samps (self)

    DECLARE sample_grid, count, work_grid, stand_grid, add_1, add_every,
            rem_1, rem_all, add_std, rem_std

    count = 1
    sample_grid = self . parent_prompt . prompt_objects [6]
    work_grid   = self . parent_prompt . prompt_objects [7]
    stand_grid  = self . parent_prompt . prompt_objects [8]

    add_1     = self . parent_prompt . prompt_objects [ 10 ]
    add_every = self . parent_prompt . prompt_objects [ 11 ]
    rem_1     = self . parent_prompt . prompt_objects [ 13 ]
    rem_all   = self . parent_prompt . prompt_objects [ 12 ]

    add_std   = self . parent_prompt . prompt_objects [ 14 ]
    rem_std   = self . parent_prompt . prompt_objects [ 15 ]

    WHILE count <= SIZE_OF_ARRAY ( sample_grid . user_info ) DO

        sample_grid . user_info [count, 1] = ""
        sample_grid . user_info [count, 2] = ""


        count = count + 1

    ENDWHILE

    sample_grid . cell_rows = 1

    count = 1

    WHILE count <= SIZE_OF_ARRAY ( work_grid . user_info ) DO

        work_grid . user_info [count, VIAL_NO        ] = ""
        work_grid . user_info [count, SAMP_NAME      ] = ""
        work_grid . user_info [count, SAMP_TYPE      ] = ""
        work_grid . user_info [count, NO_INJECT      ] = ""
        work_grid . user_info [count, SS_METHOD      ] = ""
        work_grid . user_info [count, SS_FUNCTION    ] = ""
        work_grid . user_info [count, SS_INJ_VOL     ] = ""
        work_grid . user_info [count, SS_RUN_TIME    ] = ""
        work_grid . user_info [count, SS_INJ_DELAY   ] = ""
        work_grid . user_info [count, SS_SAMP_WEIGHT ] = ""
        work_grid . user_info [count, SS_DILUTION    ] = ""
        work_grid . user_info [count, THE_TYPE       ] = ""

        count = count + 1

    ENDWHILE

    work_grid . cell_rows = 1

    count = 1


    WHILE count <= stand_grid . cell_rows DO

        stand_grid . user_info [count, 1] = ""
        stand_grid . user_info [count, 2] = ""

        count = count + 1

   ENDWHILE

    {stand_grid . cell_rows = 1}
    stand_grid . rebuild ()


    sample_grid . rebuild ()
    work_grid . rebuild ()

    ARRAY std_array

    get_std_array()

    add_1     . set_enabled ( FALSE )
    add_every . set_enabled ( FALSE )
    rem_1     . set_enabled ( FALSE )
    rem_all   . set_enabled ( FALSE )

    add_std   . set_enabled ( FALSE )
    rem_std   . set_enabled ( FALSE )

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE add_single                                                          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Add Single Sample to Worklist                  }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE add_single (self)

    DECLARE from_grid, to_grid, rem_1, rem_all, add_1, add_every, type

    type = "ADD SAMPLE"

    from_grid = self . parent_prompt . prompt_objects [ 6 ]
    to_grid   = self . parent_prompt . prompt_objects [ 7 ]


    add_1     = self . parent_prompt . prompt_objects [ 10 ]
    add_every = self . parent_prompt . prompt_objects [ 11 ]
    rem_1     = self . parent_prompt . prompt_objects [ 13 ]
    rem_all   = self . parent_prompt . prompt_objects [ 12 ]

    worklist_copy_sample ( from_grid , to_grid, type )

    IF SIZE_OF_ARRAY(to_grid . user_info) > 0 THEN

        rem_1   . set_enabled ( TRUE )
        rem_all . set_enabled ( TRUE )

    ENDIF

    IF SIZE_OF_ARRAY(from_grid . user_info) = 0 THEN

        add_1     . set_enabled ( FALSE )
        add_every . set_enabled ( FALSE )

    ENDIF

    IF ( SIZE_OF_ARRAY(from_grid . user_info) = 1 ) AND
       ( STRIP(from_grid . user_info[1,1] = "" ) ) THEN

        add_1 . set_enabled ( FALSE )
        add_every . set_enabled ( FALSE )

    ENDIF

    IF ( SIZE_OF_ARRAY(to_grid . user_info) = 1 ) AND
       ( STRIP(to_grid . user_info[1,1] = "" ) ) THEN

        add_1 . set_enabled ( TRUE )
        add_every . set_enabled ( TRUE )

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE add_all                                                             }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Add Single All Samples to Worklist             }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE add_all (self)

    DECLARE from_grid, to_grid, add_1, rem_1, add_every, rem_all, type

    type = "ADD SAMPLE"

    from_grid = self . parent_prompt . prompt_objects [6]
    to_grid   = self . parent_prompt . prompt_objects [7]


    add_1   = self . parent_prompt . prompt_objects [ 10 ]
    add_every = self . parent_prompt . prompt_objects [ 11 ]
    rem_1   = self . parent_prompt . prompt_objects [ 13 ]
    rem_all = self . parent_prompt . prompt_objects [ 12 ]

    from_grid . set_position ( 1 , 1 )

    WHILE ( from_grid  . cell_rows > 1 ) DO

        worklist_copy_sample ( from_grid,
		                       to_grid,
                               type    )

    ENDWHILE

    add_1   . set_enabled ( FALSE )
    add_every . set_enabled ( FALSE )  
    rem_1   . set_enabled ( TRUE )
    rem_all . set_enabled ( TRUE )  
 

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE remove_single                                                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Remove Single Sample from Worklist             }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE remove_single (self)

    DECLARE from_grid, to_grid, type, add_sin, add_evr

    type = "REMOVE SAMPLE"

    from_grid = self . parent_prompt . prompt_objects [7]
    to_grid   = self . parent_prompt . prompt_objects [6]

    add_sin   = self . parent_prompt . prompt_objects [10]
    add_evr   = self . parent_prompt . prompt_objects [11]

    worklist_copy_sample ( from_grid , to_grid, type )

    add_sin . set_enabled (TRUE)
    add_evr . set_enabled (TRUE)

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE remove_all                                                          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Remove All Samples from Worklist               }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE remove_all (self)

    DECLARE from_grid, to_grid, add_1, add_every, rem_1, rem_all, type

    type = "REMOVE SAMPLE"

    from_grid = self . parent_prompt . prompt_objects [7]
    to_grid   = self . parent_prompt . prompt_objects [6]


    add_1   = self . parent_prompt . prompt_objects [ 10 ]
    add_every = self . parent_prompt . prompt_objects [ 11 ]
    rem_1   = self . parent_prompt . prompt_objects [ 13 ]
    rem_all = self . parent_prompt . prompt_objects [ 12 ]

    from_grid . set_position ( 1 , 1 )

    WHILE ( from_grid  . cell_rows > 1 ) DO

         worklist_copy_sample ( from_grid,
	    	                to_grid,
                                type    )

    ENDWHILE

    add_1   . set_enabled ( TRUE )
    add_every . set_enabled ( TRUE )  
    rem_1   . set_enabled ( FALSE )
    rem_all . set_enabled ( FALSE ) 

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE add_standard                                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Add Standard to Worklist                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE add_standard (self)

    DECLARE from_grid, to_grid, add_1, type, rem_1, count

    type = "ADD STANDARD"
    count = 1

    from_grid = self . parent_prompt . prompt_objects [ 8 ]
    to_grid   = self . parent_prompt . prompt_objects [ 7 ]

    add_1   = self . parent_prompt . prompt_objects [ 14 ]
    rem_1   = self . parent_prompt . prompt_objects [ 15 ]

    IF STRIP(from_grid . user_info[from_grid . current_row, 2]) <> "" THEN

    WHILE count <= SIZE_OF_ARRAY ( from_grid . user_info ) DO

        IF (count = from_grid . current_row) AND
           (STRIP(from_grid . user_info [count , 2]) <> "") THEN

            from_grid . user_info [count , 1              ] = from_grid . user_info [count , 2]
            from_grid . user_info [count , 2              ] = self . parent_prompt . prompt_objects[21] . value
            from_grid . user_info [count , 3              ] = "Standard"
            from_grid . user_info [count , 4              ] = count
            from_grid . user_info [count , SS_METHOD      ] = ""
            from_grid . user_info [count , SS_FUNCTION    ] = "Inject Standards"
            from_grid . user_info [count , SS_INJ_VOL     ] = "1.0"
            from_grid . user_info [count , SS_RUN_TIME    ] = "1.00"
            from_grid . user_info [count , SS_INJ_DELAY   ] = "1.00"
            from_grid . user_info [count , SS_SAMP_WEIGHT ] = "1.00000"
            from_grid . user_info [count , SS_DILUTION    ] = "1.00000"
            from_grid . user_info [count , THE_TYPE       ] = "STANDARD"

        ENDIF

        count = count + 1

    ENDWHILE
   

    worklist_copy_sample ( from_grid , to_grid, type )

 

    IF SIZE_OF_ARRAY(to_grid . user_info) > 0 THEN

        add_1 . set_enabled ( TRUE )
        rem_1 . set_enabled ( TRUE )

    ENDIF

    IF SIZE_OF_ARRAY(to_grid . user_info) = 0 THEN

        add_1 . set_enabled ( TRUE )
        rem_1 . set_enabled ( FALSE )

    ENDIF

    IF SIZE_OF_ARRAY(from_grid . user_info) = 0 THEN

        add_1 . set_enabled ( FALSE )
        rem_1 . set_enabled ( TRUE )

    ENDIF

    IF ( SIZE_OF_ARRAY(from_grid . user_info) = 1 ) AND
       ( STRIP(from_grid . user_info[1,1] = "" ) ) THEN

        add_1 . set_enabled ( FALSE )
        rem_1 . set_enabled ( TRUE )

    ENDIF

    IF ( SIZE_OF_ARRAY(to_grid . user_info) = 1 ) AND
       ( STRIP(to_grid . user_info[1,1] = "" ) ) THEN

        add_1 . set_enabled ( TRUE )
        rem_1 . set_enabled ( FALSE )

    ENDIF


    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE rem_standard                                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Remove Single Standard from Worklist           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE rem_standard (self)

    DECLARE from_grid, to_grid, type, add_stand, rem_stand

    add_stand = self . parent_prompt . prompt_objects [ 14 ]
    rem_stand = self . parent_prompt . prompt_objects [ 15 ]

    type = "REMOVE STANDARD"

    from_grid = self . parent_prompt . prompt_objects [7]
    to_grid   = self . parent_prompt . prompt_objects [8]

    worklist_copy_sample ( from_grid , to_grid, type )

    IF SIZE_OF_ARRAY(to_grid . user_info) > 0 THEN

        add_stand . set_enabled ( TRUE )
        rem_stand . set_enabled ( TRUE )

    ENDIF

    IF SIZE_OF_ARRAY(to_grid . user_info) = 0 THEN

        add_stand . set_enabled ( FALSE )
        rem_stand . set_enabled ( TRUE )

    ENDIF

    IF SIZE_OF_ARRAY(from_grid . user_info) = 0 THEN

        add_stand . set_enabled ( TRUE )
        rem_stand . set_enabled ( FALSE )

    ENDIF

    IF ( SIZE_OF_ARRAY(from_grid . user_info) = 1 ) AND
       ( STRIP(from_grid . user_info[1,1] = "" ) ) THEN

        add_stand . set_enabled ( TRUE )
        rem_stand . set_enabled ( FALSE )

    ENDIF

    IF ( SIZE_OF_ARRAY(to_grid . user_info) = 1 ) AND
       ( STRIP(to_grid . user_info[1,1] = "" ) ) THEN

        add_stand . set_enabled ( FALSE )
        rem_stand . set_enabled ( TRUE )

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE propogate_data                                                      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Remove Single Standard from Worklist           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE propogate_data (self)

    DECLARE the_grid, the_col, the_row, count, the_data

    the_grid = self . parent_prompt . prompt_objects [7]
    the_col  = the_grid . current_column
    the_row  = the_grid . current_row

    IF ( the_col <> VIAL_NO ) AND
       ( the_col <> SAMP_NAME ) AND
       ( the_col <> SAMP_TYPE ) THEN

        IF SIZE_OF_ARRAY(the_grid. user_info) > 1 THEN

            the_data = the_grid . user_info [ the_row, the_col]

            IF STRIP(the_data) <> "" THEN

                count = the_row + 1

                WHILE count <= (SIZE_OF_ARRAY ( the_grid . user_info )-1) DO

                    IF STRIP(the_grid . user_info [ count, VIAL_NO]) <> "" THEN

                        the_grid . user_info [ count, the_col ] = the_data

                    ENDIF

                    count = count + 1

                ENDWHILE

                the_grid . redisplay_contents ( )

            ENDIF


        ELSE

            flashmessage("No Samples Selected!", TRUE)

        ENDIF

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE worklist_copy_sample                                                }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  09-Nov-2001  DK              Move single samples between grids              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  main_form              reference            the main form                   }
{                                                                              }
{==============================================================================}

ROUTINE worklist_copy_sample ( from_grid , to_grid, VALUE type )

    DECLARE to_pos, from_pos, vial_pos, count, temp_array, the_vial, 
            is_smp_stand, pos, the_size, the_std, no_injects

    is_smp_stand = FALSE

    vial_pos = from_grid . parent_prompt . prompt_objects [22] . text
    no_injects = from_grid . parent_prompt . prompt_objects [21] . text
  
    from_pos = from_grid . current_row
    to_pos   = to_grid . current_row

    IF from_grid . user_info [ from_pos , 1] <> "" THEN

	IF to_pos = 0 THEN

	    to_pos = 1

	ENDIF

        IF type = "REMOVE SAMPLE" THEN

            count = 1   {RE-ARRANGE GRID}
            ARRAY temp_array

            WHILE count <= SIZE_OF_ARRAY(from_grid . user_info) DO

                IF from_grid . user_info[count, THE_TYPE] = "SAMPLE" THEN

                    temp_array [count , 1             ] = from_grid . user_info [count , SAMP_NAME      ]
                    temp_array [count , 2             ] = from_grid . user_info [count , NO_INJECT      ]
                    temp_array [count , 3             ] = from_grid . user_info [count , SAMP_TYPE      ]
                    temp_array [count , 4             ] = to_pos
                    temp_array [count, SS_METHOD      ] = from_grid . user_info [count , SS_METHOD      ]
                    temp_array [count, SS_FUNCTION    ] = from_grid . user_info [count , SS_FUNCTION    ]
                    temp_array [count, SS_INJ_VOL     ] = from_grid . user_info [count , SS_INJ_VOL     ]
                    temp_array [count, SS_RUN_TIME    ] = from_grid . user_info [count , SS_RUN_TIME    ]
                    temp_array [count, SS_INJ_DELAY   ] = from_grid . user_info [count , SS_INJ_DELAY   ]
                    temp_array [count, SS_SAMP_WEIGHT ] = from_grid . user_info [count , SS_SAMP_WEIGHT ]
                    temp_array [count, SS_DILUTION    ] = from_grid . user_info [count , SS_DILUTION    ]
                    temp_array [count , THE_TYPE      ] = from_grid . user_info [count , THE_TYPE       ]

                ELSE

                    pos = INDEX(STRIP(from_grid . user_info[from_pos, SAMP_NAME]), ".")

                    IF pos = 0 THEN
                        temp_array [count , 1] = ""
                    ELSE
                        temp_array [count , 1] = "*"
                    ENDIF
                    temp_array [count , 2] = from_grid . user_info [count , SAMP_NAME]
                    temp_array [count , 3             ] = from_grid . user_info [count , SAMP_TYPE      ]
                    temp_array [count , 4             ] = to_pos
                    temp_array [count, SS_METHOD      ] = from_grid . user_info [count , SS_METHOD      ]
                    temp_array [count, SS_FUNCTION    ] = from_grid . user_info [count , SS_FUNCTION    ]
                    temp_array [count, SS_INJ_VOL     ] = from_grid . user_info [count , SS_INJ_VOL     ]
                    temp_array [count, SS_RUN_TIME    ] = from_grid . user_info [count , SS_RUN_TIME    ]
                    temp_array [count, SS_INJ_DELAY   ] = from_grid . user_info [count , SS_INJ_DELAY   ]
                    temp_array [count, SS_SAMP_WEIGHT ] = from_grid . user_info [count , SS_SAMP_WEIGHT ]
                    temp_array [count, SS_DILUTION    ] = from_grid . user_info [count , SS_DILUTION    ]
                    temp_array [count , THE_TYPE      ] = from_grid . user_info [count , THE_TYPE       ]


                ENDIF


                count = count + 1

            ENDWHILE

            IF from_grid . user_info [ from_pos , THE_TYPE ] = "SAMPLE"

	        array_insert_slice ( to_grid . user_info , 1 , to_pos )

 	        to_grid . user_info [ to_pos ] = temp_array [ from_pos ]
                to_grid . insert_row ( to_pos, 1 , GRID_SEPARATOR_NONE )
	        to_grid . set_position ( 1 , to_pos + 1 )

            ELSE

                to_grid = to_grid . parent_prompt . prompt_objects [8]
                to_pos   = to_grid . current_row

	        array_insert_slice ( to_grid . user_info , 1 , to_pos )

                { Add SMP Standard Back Into Array }

                pos = INDEX(STRIP(from_grid . user_info[from_pos, SAMP_NAME]), ".")
                the_size = SIZE_OF_ARRAY(std_array) + 1

                IF pos > 0 THEN
                    std_array[the_size,1] = STRIP(from_grid . user_info[from_pos, SAMP_NAME])
                    std_array[the_size,2] = STRIP(from_grid . user_info[from_pos, SAMP_NAME])
                    is_smp_stand = TRUE
                ENDIF


 	        to_grid . user_info [ to_pos ] = temp_array [ from_pos ]
                to_grid . insert_row ( to_pos, 1 , GRID_SEPARATOR_NONE )
	        to_grid . set_position ( 1 , to_pos + 1 )

                to_grid = to_grid . parent_prompt . prompt_objects [6]

            ENDIF

        ELSE

	    array_insert_slice ( to_grid . user_info , 1 , to_pos )

            IF to_grid . tag <> 8 THEN

                count = 1   {RE-ARRANGE GRID}
                ARRAY temp_array

                WHILE count <= SIZE_OF_ARRAY(from_grid . user_info) DO

                    IF to_grid . tag = 7 THEN

                        temp_array [count , VIAL_NO        ] = to_pos
                        temp_array [count , SAMP_NAME      ] = from_grid . user_info [count , 1              ]
                        temp_array [count , SAMP_TYPE      ] = from_grid . user_info [count , 3              ]
                        temp_array [count , NO_INJECT      ] = no_injects  
                        temp_array [count , SS_METHOD      ] = from_grid . user_info [count , SS_METHOD      ]
                        temp_array [count , SS_FUNCTION    ] = from_grid . user_info [count , SS_FUNCTION    ]
                        temp_array [count , SS_INJ_VOL     ] = from_grid . user_info [count , SS_INJ_VOL     ]
                        temp_array [count , SS_RUN_TIME    ] = from_grid . user_info [count , SS_RUN_TIME    ]
                        temp_array [count , SS_INJ_DELAY   ] = from_grid . user_info [count , SS_INJ_DELAY   ]
                        temp_array [count , SS_SAMP_WEIGHT ] = from_grid . user_info [count , SS_SAMP_WEIGHT ]
                        temp_array [count , SS_DILUTION    ] = from_grid . user_info [count , SS_DILUTION    ]
                        temp_array [count , THE_TYPE       ] = from_grid . user_info [count , THE_TYPE       ]

                    ELSE

                        temp_array [count , 1              ] = from_grid . user_info [count , SAMP_NAME      ]
                        temp_array [count , 2              ] = from_grid . user_info [count , NO_INJECT      ]
                        temp_array [count , 3              ] = from_grid . user_info [count , SAMP_NAME      ]
                        temp_array [count , 4              ] = count
                        temp_array [count , SS_METHOD      ] = from_grid . user_info [count , SS_METHOD      ]
                        temp_array [count , SS_FUNCTION    ] = from_grid . user_info [count , SS_FUNCTION    ]
                        temp_array [count , SS_INJ_VOL     ] = from_grid . user_info [count , SS_INJ_VOL     ]
                        temp_array [count , SS_RUN_TIME    ] = from_grid . user_info [count , SS_RUN_TIME    ]
                        temp_array [count , SS_INJ_DELAY   ] = from_grid . user_info [count , SS_INJ_DELAY   ]
                        temp_array [count , SS_SAMP_WEIGHT ] = from_grid . user_info [count , SS_SAMP_WEIGHT ]
                        temp_array [count , SS_DILUTION    ] = from_grid . user_info [count , SS_DILUTION    ]
                        temp_array [count , THE_TYPE       ] = from_grid . user_info [count , THE_TYPE       ]

                    ENDIF

                    count = count + 1

                ENDWHILE

                IF to_grid . tag <> 7 THEN {Worklist Grid}

	            to_grid . user_info [ to_pos ] = temp_array [ from_pos ]
                    to_grid . insert_row ( to_pos, 1 , GRID_SEPARATOR_NONE )
	            to_grid . set_position ( 1 , to_pos + 1 )

                ELSE

	            to_grid . user_info [ to_pos ] = temp_array [ from_pos ]
                    to_grid . insert_row ( to_pos, 1 , GRID_SEPARATOR_NONE )
	            to_grid . set_position ( 1 , to_pos + 1 )

                ENDIF

            ELSE

                { Add SMP Standard Back Into Array }

                pos = INDEX(STRIP(from_grid . user_info[from_pos, SAMP_NAME]), ".")
                the_size = SIZE_OF_ARRAY(std_array) + 1
                IF pos > 0 THEN
                    std_array[the_size,1] = STRIP(from_grid . user_info[from_pos, SAMP_NAME])
                    std_array[the_size,2] = STRIP(from_grid . user_info[from_pos, SAMP_NAME])
                    is_smp_stand = TRUE
                ENDIF

                ARRAY temp_array

                IF is_smp_stand THEN

                    temp_array [from_pos, 1] = "*"

                ELSE

                    temp_array [from_pos, 1] = ""  

                ENDIF                  

                temp_array [from_pos, 2              ] = from_grid . user_info [from_pos , SAMP_NAME      ]
                temp_array [from_pos, 3              ] = ""
                temp_array [from_pos, 4              ] = ""
                temp_array [from_pos, SS_METHOD      ] = ""
                temp_array [from_pos, SS_FUNCTION    ] = ""
                temp_array [from_pos, SS_INJ_VOL     ] = ""
                temp_array [from_pos, SS_RUN_TIME    ] = ""
                temp_array [from_pos, SS_INJ_DELAY   ] = ""
                temp_array [from_pos, SS_SAMP_WEIGHT ] = ""
                temp_array [from_pos, SS_DILUTION    ] = ""
                temp_array [from_pos, THE_TYPE       ] = from_grid . user_info [from_pos , THE_TYPE       ]

              	to_grid . user_info [ to_pos ] = temp_array [ from_pos ]
                to_grid . insert_row ( to_pos, 1 , GRID_SEPARATOR_NONE )
	        to_grid . set_position ( 1 , to_pos + 1 ) 


            ENDIF

        ENDIF


    ENDIF

    count = 1

    IF ( from_grid . user_info [ from_pos , 1] <> "")
       

        IF ( from_grid . tag <> 8 ) THEN

            array_remove_slice ( from_grid . user_info , 1 , from_pos )

            from_grid . remove_row ( from_pos )
            from_grid . redisplay_row ( from_pos )
            from_grid . redisplay_contents ( )

        ELSE

            { Remove SMP Standard from array }
            WHILE count <= SIZE_OF_ARRAY(std_array) DO

                the_std = std_array[count, 2]
                IF STRIP(the_std) = STRIP(from_grid . user_info[from_pos, 1]) THEN

                    array_remove_slice ( std_array , 1 , count )
 
                ENDIF

                count = count + 1

            ENDWHILE

            count = 1

            array_remove_slice ( from_grid . user_info , 1 , from_pos )

            from_grid . remove_row ( from_pos )
            from_grid . redisplay_row ( from_pos )
            from_grid . redisplay_contents ( )


        ENDIF

    ENDIF

    { Re-arrange Vial Nos }

    { IF inserting into Worklist Grid then rearrage Vial Nos }

    IF ( to_grid . tag = 7 ) AND
       ( SIZE_OF_ARRAY( to_grid . user_info ) > 0 ) THEN

       count = 1

       WHILE count <= (SIZE_OF_ARRAY ( to_grid . user_info )-1) DO

           IF STRIP(to_grid . user_info [ count, VIAL_NO ]) <> "" THEN

               SET FORMAT "9999"
               the_vial = count + (vial_pos - 1)

               to_grid . user_info [ count, VIAL_NO ] = the_vial

           ENDIF

           count = count + 1

       ENDWHILE

       to_grid . redisplay_contents ( )

    ENDIF


    { IF removing from Worklist Grid then rearrage Vial Nos }

    IF ( from_grid . tag = 7 ) AND
       ( SIZE_OF_ARRAY( from_grid . user_info ) > 0 ) THEN

       count = 1

       WHILE count <= (SIZE_OF_ARRAY ( from_grid . user_info )-1) DO

           IF STRIP(to_grid . user_info [ count, VIAL_NO ]) <> "" THEN

               SET FORMAT "9999"
               the_vial = count + (vial_pos - 1)

               from_grid . user_info [ count, VIAL_NO ] = the_vial

           ENDIF

           count = count + 1

       ENDWHILE

       from_grid . redisplay_contents ( )

    ENDIF

    IF ( from_grid . tag = 7 ) AND
       (( STRIP(from_grid . user_info[1,VIAL_NO]) <> "") AND
        ( STRIP(from_grid . user_info[1,SAMP_NAME]) = "" )) THEN

        from_grid . user_info [ 1, VIAL_NO ] = ""
        from_grid . redisplay_contents ( )

    ENDIF 

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE update_vials                                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  17-DEC-1997  ER              This checks if the process is already in a     }
{                               write_transaction, and if not, starts one.     }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE update_vials ( self )

    DECLARE work_grid, count, vial_pos, the_vial

    count = 1

    work_grid = self . parent_prompt . prompt_objects [7]
    vial_pos  = self . text

    WHILE count <= (SIZE_OF_ARRAY ( work_grid . user_info )-1) DO

       SET FORMAT "9999"
       the_vial = count + ( vial_pos - 1 )

       work_grid . user_info [ count, VIAL_NO ] = the_vial

       count = count + 1

    ENDWHILE

    work_grid . redisplay_contents ( )

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE check_write_transaction                                             }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  17-DEC-1997  ER              This checks if the process is already in a     }
{                               write_transaction, and if not, starts one.     }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE check_write_transaction

    IF NOT transaction_is_write() THEN

       START WRITE TRANSACTION "update record"

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE enable_buttons                                                      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  12-Nov-2001  DK              Enable form buttons on leaving prompt          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE enable_buttons( self )

    DECLARE gen_samps, sel_samps, the_proj, the_temp

    gen_samps  = self . parent_prompt . prompt_objects [ 4  ]
    sel_samps  = self . parent_prompt . prompt_objects [ 5  ]


    the_proj   = self . parent_prompt . prompt_objects [ 1 ] . text
    the_temp   = self . parent_prompt . prompt_objects [ 2 ] . text

    IF (STRIP(the_proj) <> "") AND
       (STRIP(the_temp) <> "") THEN

        gen_samps  . set_enabled ( TRUE )
        sel_samps  . set_enabled ( TRUE )

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE enable_custom_map                                                   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  12-Nov-2001  DK              Enable form buttons on leaving prompt          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE enable_custom_map ( self )
{
    DECLARE the_proj, cust_map

    cust_map  = self . parent_prompt . prompt_objects [ 3  ]
    the_proj   = self . parent_prompt . prompt_objects [ 1 ] . text


    IF (STRIP(the_proj) <> "") THEN

        cust_map  . set_enabled ( TRUE )

    ENDIF
}
ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE preview_resultset                                                   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  12-Nov-2001  DK              Enable form buttons on leaving prompt          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE preview_resultset ( self )

    DECLARE work_grid

    work_grid = self . parent_prompt . prompt_objects [ 7 ]

    IF SIZE_OF_ARRAY ( work_grid . user_info ) > 1 THEN

        flashmessage("Displaying ResultSet", TRUE)  
  
    ELSE

        flashmessage("Nothing to Display", TRUE)  

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE select_project_data                                                 }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  12-Nov-2001  DK              Selects Millennium Data.                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE select_project_data ( proj_array )

    DECLARE the_schema, the_field, the_table, group_array, count, mill_group,
            mill_user

    ARRAY group_array
    count = 1

    mill_user = SELECT MILL_SECURITY . mill_user
                 WHERE lims_user = GLOBAL("OPERATOR")

    { Get all Millennium Groups for the LIMS User }

    mill_group = SELECT MILL_GROUPLINK . group_id
                  WHERE operator_id = GLOBAL("OPERATOR")

    WHILE mill_group <> EMPTY DO

        group_array[count] = mill_group

        NEXT MILL_GROUPLINK
        mill_group = SELECT MILL_GROUPLINK . group_id

        count = count + 1

    ENDWHILE

    the_schema = ""
    the_field  = "name"
    the_table = "PROJECTINFO"

    select_millennium_proj_data ( proj_array,
                                  the_schema,
                                  the_field,
                                  the_table,
                                  group_array,
                                  mill_user )



ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE select_sampleset_data                                               }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  12-Nov-2001  DK              Selects Millennium Data.                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE select_sampleset_data ( self )

    DECLARE the_schema, the_field, the_table, the_proj

    the_proj = STRIP(self . parent_prompt . prompt_objects[1] . text)
    the_schema = TOUPPER(STRIP(the_proj)):"_1"
    the_field  = "name"
    the_table = the_schema:".METHOD"

    select_millennium_ss_data ( self,
                                the_schema,
                                the_field,
                                the_table )


ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE select_method_data                                                  }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  12-Nov-2001  DK              Selects Millennium Data.                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE select_method_data(self,
                           meth_array)

    DECLARE the_schema, the_field, the_table, the_proj

    the_proj = STRIP(self . parent_prompt . prompt_objects[1] . text)
    the_schema = TOUPPER(STRIP(the_proj)):"_1"
    the_field  = "name"
    the_table = the_schema:".METHOD"

    select_millennium_meth_data ( meth_array,
                                  the_schema,
                                  the_field,
                                  the_table )


ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE validate_project                                                    }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  12-Nov-2001  DK              Selects Millennium Data.                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE validate_project ( self )

    DECLARE entered_project, count, can_leave
    
    count = 1
    can_leave = FALSE

    IF self . user_info[count,1] = "NONE SELECTED" THEN

        flashmessage("You Must Select a Project from the Browse List!", TRUE)
        can_leave = FALSE

    ELSE

        entered_project = self . text

        WHILE count <= SIZE_OF_ARRAY(self . user_info) DO

            IF entered_project = self . user_info[count,1] THEN

                can_leave = TRUE

            ENDIF  

            count = count + 1

        ENDWHILE

        IF can_leave = FALSE THEN

            flashmessage("You do not have access to select the project: ":STRIP(entered_project), TRUE)

        ENDIF

    ENDIF

    RETURN(can_leave)

ENDROUTINE

{==============================================================================}
{                                                                              }
{  ROUTINE validate_sset                                                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  12-Nov-2001  DK              Selects Millennium Data.                       }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE validate_sset ( self )

    DECLARE entered_sset, can_leave
    
    can_leave = FALSE

    entered_sset = self . text

    IF STRIP(entered_sset) = "" THEN

        flashmessage("You must enter or select a SampleSet!", TRUE)

        can_leave = FALSE

    ELSE

        can_leave = TRUE

    ENDIF

    RETURN(can_leave)

ENDROUTINE



