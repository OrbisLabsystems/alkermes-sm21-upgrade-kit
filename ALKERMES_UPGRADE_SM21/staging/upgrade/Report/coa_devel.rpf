{ ======================== coa_devel.RPF  ==============================}
{                                                                             }
{ Created by : J O'Doherty                                                    }
{ Date       : 21-OCT-1997                                                    }
{                                                                             }
{ Purpose    : Certificate of Analysis          (c) TENSOR Technologies       }
{              P97705                                                         }
{                                                                             }
{ Description: This is a modified version of the Standard SAR Report to do    }
{              a Certificate of Analysis.                                     }
{                                                                             }
{=============================================================================}
{                                                                             }
{  Modification History                                                       }
{                                                                             }
{  Ver.     Date        By          Description                               }
{  ----     ----        --          -----------                               }
{  1.10     11/04/07    AF          Major cleanup as much of the code was     }
{                                   un-necessary or obsolete.                 }                
{=============================================================================}
                  


SET NOTPROTECTED
ENABLE WINDOWS

SET NAME "DEFER/"
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_DDE

JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_TRANSFER

JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY $LIB_CSMLP
JOIN LIBRARY $LIB_MLPS
JOIN LIBRARY DDE_LIB
JOIN LIBRARY $PROMPT_IMPRINT

level_id = "SPEC"

setup_program_constants ()
main ()

{==============================================================================}
{                                                                              }
{ ROUTINE main                                  Controls main flow of the      }
{                                               program .                      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE main

    lib_mlps_initialise ()

    got_sample = browse_single_sample ("A")

    IF got_sample = "" THEN EXIT ENDIF

        sample_id = SELECT SAMPLE  . id_numeric
                WHERE id_numeric = got_sample
                         
        
        { AF comment  - Writes to temporary table }
		
        get_results ( sample_id )        
        order_array_by_test_schedule ( res_arr )
        get_word_res_array ()
        get_record_details (sample_id)
        
        the_samp = SELECT sample . id_text       
        number_to_print = 1

        imprint_print ( the_samp)

        delete_record (sample_id)
        

ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE setup_program_constants               sets up constants used in the  }
{                                               program .                      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE setup_program_constants


ARRAY res_arr        ARRAYSIZE ( 0 , 10 )
ARRAY word_res_array
ARRAY qa_res_array

ARRAY bm_array 

AR0  = "AR0"
AR1  = "AR1"
AR2  = "AR2"

CONSTANT TEST_NAME  = 1
CONSTANT RES_VAL    = 2
CONSTANT TEST_UNIT  = 3
CONSTANT TEST_STAT  = 4
CONSTANT SMP_NAME   = 5
CONSTANT SMP_STAT   = 6
CONSTANT ANL_NAME   = 7
CONSTANT SPC_VALUE  = 8
CONSTANT TEST_NUMB  = 9

CONSTANT MET_FREE_ANAL  = "MET_FREE"

CONSTANT BM_MSG         = "Batch Metal Free"
CONSTANT DISP_PERSON    = "Qualified Person"
CONSTANT BM_SIGN        = "Signature             ________________________________"
CONSTANT BM_DATED       = "Date                     ________________________________"

ENDROUTINE
 
 
{==============================================================================}
{                                                                              }
{ ROUTINE get_word_res_array                    Puts headings in the first row }
{                                               of word_res_array and selects  }
{                                               all data required from         }
{                                               res_array and puts it into     }
{                                               word_res_array. Only data that }
{                                               appears on the analysis report }
{                                               is selected.                   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE get_word_res_array

DECLARE i
i = 1
j = 1
k = 1
end_of_array = SIZE_OF_ARRAY ( res_arr )

word_res_array [ k , 1 ] = "TEST"
word_res_array [ k , 2 ] = "SPECIFICATIONS"
word_res_array [ k , 3 ] = "RESULT"

WHILE ( i < end_of_array + 1 )

    i = i + 1

    IF LEFTSTRING ( STRIP ( res_arr [ i - 1 , ANL_NAME ] ), 2 ) = "QA" THEN
        qa_res_array [ j , 1 ] = STRIP ( res_arr [ i - 1 , TEST_NAME ] )
        qa_res_array [ j , 2 ] = STRIP ( res_arr [ i - 1, RES_VAL ] )
        j = j + 1

                                    { ===================================== }
                                    { #JOD : 28-JAN-1998 P98766             }
                                    {                                       }
                                    { No qc_lir.. analyses to appear        }
                                    { ===================================== }

    ELSEIF ( LEFTSTRING ( STRIP ( res_arr [ i - 1 , ANL_NAME ] ), 6 ) <> "QC_LIR" ) THEN
        k = k + 1
        word_res_array [ k , 1 ] = STRIP ( res_arr [ i - 1 , TEST_NAME ] )
        word_res_array [ k , 3 ] = STRIP ( res_arr [ i - 1 , RES_VAL   ] )
        word_res_array [ k , 2 ] = STRIP ( res_arr [ i - 1 , SPC_VALUE ] )

    ENDIF

ENDWHILE


ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE create_prompt_form            Creates a form for user input          }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}


ROUTINE create_prompt_form (       prompt_form   ,
                             VALUE window_width  ,
                             VALUE window_height ,
                                   window_header ,
                                   window_footer )

        CREATE OBJECT PROMPT_CLASS_FORM , prompt_form

        prompt_form . height = window_height
        prompt_form . width  = window_width
        prompt_form . row    = 11
        prompt_form . column = ROUND ( ( GLOBAL ( "SCREEN_WIDTH" ) -
                                        window_width  ) / 2 )
        prompt_form . border = TRUE
        prompt_form . header = window_header
        prompt_form . footer = window_footer
        prompt_form . proportional = TRUE
        prompt_form . return_behaviour = FORM_RETURN_LEAVE

ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE browse_single_sample                browses on samples and adds      }
{                                             prompt to prompt_form            }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  mode                   value                sample status                   }
{==============================================================================}

ROUTINE browse_single_sample ( VALUE mode )

        DECLARE sample_id , sample_text , samp_numeric_string , tsr_header ,
                tsr_footer , samp_text_string , window_width , prompt_form ,
                title_width , samp_text_title , samp_id_title , button

        IF mode = "A" THEN
                set sample_status "A"
        ELSEIF mode = "CA" THEN
                set sample_status "CA"
        ELSEIF mode = "AC" THEN
                set sample_status "CA"
        ELSEIF mode = "VCA" THEN
                set sample_status "VCA"
        ELSEIF mode = "ACV" THEN
                set sample_status "VCA"
        ELSEIF mode = "CAV" THEN
                set sample_status "VCA"
        ELSE
                set sample_status "A"
        ENDIF

        tsr_header = " Certificate of Analysis Report v1.3"
        message_fetch ( "RES_ENTRY_FOOT_1", tsr_footer )

        message_fetch ( "RES_ENTRY_DISPLAY_1", samp_numeric_string )
        message_fetch ( "RES_ENTRY_DISPLAY_2", samp_text_string )

        IF stringlength ( samp_numeric_string ) >
           stringlength ( samp_text_string ) THEN

                title_width = stringlength ( samp_numeric_string )
        ELSE
                title_width = stringlength ( samp_text_string )
        ENDIF

        window_width = 31 + title_width

        create_prompt_form ( prompt_form  ,
                             window_width ,
                             2            ,
                             tsr_header   ,
                             tsr_footer   )

        PROMPT OBJECT samp_id_title
                FORMAT TEXT
                ON LINE 1 FROM 1
                WITH ( bold   = TRUE                ,
                       width  = title_width         ,
                       value  = samp_numeric_string )

        prompt_form . add_display ( samp_id_title )

        PROMPT OBJECT samp_text_title
                FORMAT TEXT
                ON LINE 2 FROM 1
                WITH ( bold   = TRUE             ,
                       width  = title_width      ,
                       value  = samp_text_string )

        prompt_form . add_display ( samp_text_title )

        PROMPT OBJECT sample_id
                BROWSE ON sample
                THEN select
                ON LINE 1 FROM title_width + 2 {TO title_width + 30}

        prompt_form . add_prompt ( sample_id )

        PROMPT OBJECT sample_text
                BROWSE ON sample . id_text
                ON LINE 2 FROM title_width + 2
                WITH ( lowered = TRUE )

        prompt_form . add_display ( sample_text )

        IF GLOBAL ( "TERMTYPE" ) = "GUI" THEN

                prompt_form . button_style = FORM_BUTTON_NONE

                prompt_form . height = 5
                prompt_form . width  = 48

                samp_id_title . column = 2
                samp_id_title . row = 1

                samp_text_title . column = 2
                samp_text_title . row = 3

                sample_id . column = 2
                sample_id . row = 2

                sample_text . column = 2
                sample_text . row = 4

                prompt_form . add_frame ( "" , 1 , 1 , 4 , prompt_form . width - 13 )

                PROMPT OBJECT button
                        CLASS "STD_PROMPT_BUTTON"
                        ON LINE 1
                        FROM    prompt_form . width - 10
                        WITH ( caption      =
                               get_user_message ( "SMP_PROMPT_BUTTON_OK" , 1 ) ,
                               enabled      = TRUE    ,
                               width        = 10 ,
                               send_lastkey = "DO"  )

                prompt_form . add_prompt ( button )

                PROMPT OBJECT button
                        CLASS "STD_PROMPT_BUTTON"
                        ON LINE 3
                        FROM    prompt_form . width - 10
                        WITH ( caption      =
                             get_user_message ( "SMP_PROMPT_BUTTON_CANCEL" , 1 ) ,
                               enabled      = TRUE      ,
                               width        = 10  ,
                               send_lastkey = "EXIT"  )

                prompt_form . add_prompt ( button )

        ENDIF

        prompt_form . start_prompt ()
        prompt_form . wait_prompt ()
        prompt_form . end_prompt ()

RETURN ( prompt_form . prompt_objects [ 1 ] . value  )

ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE get_results                Gets tests and results for sample, only   }
{                                    components marked with the flag AR0, AR1  }
{                                    and AR2. The result type of each          }
{                                    component determines how the specification}
{                                    is held.                                  }
{                                                                              }
{                                    If text the textual specification is      }
{                                    stored.                                   }
{                                                                              }
{                                    If Numeric then: (1) if the spec is       }
{                                    MIN/MAX the the MIN/MAX is stored.        }
{                                    (2) if the spec is open ended the MIN is  }
{                                    stored.                                   }
{                                                                              }
{                                    If Boolean TRUE or FALSE value is stored. }
{                                                                              }
{                                    Each result is compared with the          }
{                                    specification. If the component flag is   }
{                                    set to ARO the actual result is displayed.}
{                                    If the component flag is set to AR1 then  }
{                                    COMPLIES or DOES NOT COMPLY is held in    }
{                                    place of the result. If the component flag}
{                                    is set to AR2 then  <result> COMPLIES or  }
{                                    <result> DOES NOT COMPLY is held in place }
{                                    of the result.                            }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/4/96      JMWHYTE         Created                                        }
{  27/06/97     JMWHYTE         Modified for Dissolution ( see Program Header )}
{  14/01/98     JOD             check for MET_FREE analysis                    }
{  31/01/98     DMcN            Modified to move fix outspc initialisation bug }
{                               and to install modified report as per change   }
{                               LIMS-98-01.                                    }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  sample_id              value                sample identifier               }
{                                              is in the test schedule         }
{==============================================================================}
ROUTINE get_results ( VALUE sample_id )

 DECLARE outspc, result_found, test_found, component_found, the_units, anal_ver, the_test, met_free

 met_free        = FALSE
 result_found    = FALSE
 component_found = FALSE
 test_found      = FALSE
 the_units       = EMPTY


 samp_txt = SELECT SAMPLE . id_text
           WHERE id_numeric = sample_id

			{------------------------------------------}
			{MC MOD 04/07/02                           }
			{The analysis verion of the test is needed }
			{so that the sample is related to the      }
			{correct version of the analysis           }
			{------------------------------------------}

 anal_ver = SELECT TEST . analysis_version 
           WHERE sample = sample_id

			{MC End}



 test_no  = SELECT TEST . test_number
           WHERE    ( sample = sample_id  )
           AND      ( status <> "X"       )
           ORDER ON order_num

 i = 1



 IF  test_no = EMPTY  THEN
    res_arr [ i , TEST_NAME ] = "No Test Assigned"
    res_arr [ i , RES_VAL   ] = " "
    res_arr [ i , TEST_UNIT ] = " "
    res_arr [ i , TEST_STAT ] = " "
    res_arr [ i , SMP_NAME  ] = STRIP ( sample_id )
    res_arr [ i , SMP_STAT  ] = SELECT SAMPLE . status
    res_arr [ i , SPC_VALUE ] = " "
    res_arr [ i , TEST_NUMB ] = test_no
    i = i + 1
 ENDIF

 WHILE ( test_no <> EMPTY ) DO

    test_found = TRUE

    product_id = SELECT sample . product_name

    IF product_id = EMPTY
        product_id = ""
    ENDIF

    version     = SELECT sample . product_version
    anal_id     = SELECT test . analysis_id
    test_status = SELECT test . status
    anal_ver    = SELECT test . analysis_version



    IF ( test_status <> "A" ) THEN
        flash_message ( "Test, ":anal_id:" is not Authorised", TRUE )
    ENDIF

				{------------------------------------------------}
				{MC, 07/06/02, Modification                      }
				{A rejected result(status R) is not to be printed }
				{------------------------------------------------}

    comp = SELECT result . component_name
           WHERE   ( test_number = test_no )
           AND     ( order_number <> 0     )
	        AND     ( result . status <> "R")
	        AND     ( result . rep_control <> " ") {MC, 17/07/02, MOD. Components with no flags are omitted}
           ORDER ON order_number

				{MC, End Modification}


    WHILE comp <> EMPTY DO

        component_found = TRUE
        res_status = SELECT result . status
        res        = SELECT result . text

        outspc = "N/A"             {Moved from outside loop, DMcN 31/01/98}
                                   {ref change control LIMS-98-02         }
        IF res <> EMPTY
           result_found = TRUE
           res = STRIP ( res )
        ENDIF


        flag = SELECT versioned_component . rep_control
              WHERE ( analysis         = anal_id )
	           AND   ( analysis_version = anal_ver) 
               AND   ( name             = comp    )



        IF TOUPPER ( LEFTSTRING ( anal_id, 4 )) = "DISS"

            IF ( INDEX ( comp, "% Released" )  > 0 ) OR
               ( INDEX ( comp, "Mean %VHCL" ) > 0 ) THEN

                flag = AR0
                outspc = ""

            ENDIF
        ENDIF

        IF ( flag = AR0 ) OR ( flag = AR1 ) OR ( flag = AR2 )  THEN 
		{result_type = SELECT component . result_type}

			{-----------------------------}
			{ MC, 02/09/02, Modification  }
			{ The Select criteria changed }
			{ to ensure that all specs are}
			{ pulled into the spec column }
			{-----------------------------}

            result_type = SELECT versioned_component . result_type
			  WHERE  ( analysis = anal_id )
			  AND    ( name     = comp    )

			{MC, END Modification, 25/07/02}


            comp_entry_code =
                      SELECT mlp_components . entry_code
                      WHERE ( product_id      = product_id )
                      AND   ( product_version = version    )
                      AND   ( analysis_id     = anal_id    )
                      AND   ( component_name  = comp       )

            IF comp_entry_code <> EMPTY THEN

                in_spec = FALSE
                CSMLP_result ( product_id, version, anal_id, comp, level_id,
                               res, in_spec )

                IF res = EMPTY THEN
                    res = "No Result Entered"
                ELSE
                                         {====================================}
                                         { JMW, 01/05/96, Modification        }
                                         { Include the Units in the Result    }
                                         {====================================}

                    the_units = SELECT RESULT . units
                    IF the_units <> EMPTY  THEN
                        res = res : " " : the_units
                    ENDIF
			
	
                                         {====================================}
                                         { End of Modification                }
                                         {====================================}

		


                level_id = PAD ( level_id, " ", 10 )

                IF ( result_type = " " ) OR ( result_type = "N" ) OR ( result_type = "K" ) THEN

                                                  { JOD 18/08/1997     }
                    min = SELECT mlp_values . min_limit
                          WHERE ( entry_code = comp_entry_code )
                            AND ( level_id   = level_id        )

                                                  { JOD 18/08/1997     }
                    max = SELECT mlp_values . max_limit
                          WHERE ( entry_code = comp_entry_code )
                            AND ( level_id   = level_id        )

                    IF ( max = EMPTY ) OR ( STRIP ( max ) = "" ) THEN
                                                  { JMW, 31/05/96 }
                        outspc = min
                        outspc = substr ( outspc, "<", "<" )
                        outspc = substr ( outspc, ">", "> " )
                        outspc = substr ( outspc, "<=", "<= " )
                        outspc = substr ( outspc, ">=", ">=" )

                    ELSE
                        outspc = STRIP ( min ) : " to " : STRIP ( max )
                    ENDIF

                ELSEIF ( result_type = "B" ) THEN
                    outspc = STRIP ( SELECT mlp_values . boolean_pass )

                ELSE
                    outspc = SELECT mlp_values . text_spec
                               WHERE entry_code = comp_entry_code

                ENDIF

                IF outspc = EMPTY THEN outspc = "N/A" ENDIF

      		



		IF outspc <> "N/A" THEN
                    IF  NOT in_spec  THEN
                        IF  flag = AR1   THEN
                            res = "Does Not Comply"
                        ELSEIF  flag = AR2  THEN
                            res = STRIP ( res ) : " - " : "Does Not Comply"
                        ENDIF
                    ELSE
                        IF   flag = AR1    THEN
                            res = "Complies"
                        ELSEIF flag = AR2    THEN
                            res = STRIP ( res ) : " - " : "Complies"
                        ENDIF
                    ENDIF
	  	ENDIF
		

                ENDIF { res = EMPTY }
                                                  { JOD 18/08/1997     }

           
            ENDIF


					 {====================================}
					 {MC Modification  1.8 03/05/05	      }
					 {Added in the following code. Checks }
					 {the spec and the flag. Outputs the  }
					 {result in the correct format        }
					 {depending on spec and flag.         }
					 {====================================}

	    IF comp_entry_code = EMPTY

        	the_units = SELECT RESULT . units



			IF outspc <> "N/A" THEN
				IF NOT in_spec THEN
                			IF flag = AR1 THEN
                            			res = "Does Not Comply"
                        		ELSEIF flag = AR2 THEN
                            			res = STRIP ( res ) : " - " : "Does Not Comply"
                        		ENDIF
                 		ELSE
                        		IF flag = AR1 THEN
                            			res = "Complies"
                        		ELSEIF flag = AR2 THEN
                            			res = STRIP ( res ) : " - " : "Complies"
                        		ENDIF
                 		ENDIF
			ELSEIF outspc = "N/A" THEN
		    		IF comp = "GMP Statement" THEN
					res = res
		    		ELSEIF comp = "Expiry Date" THEN
					res = res
		    		ELSEIF the_units <> EMPTY  THEN
                        		res = res : " " : the_units
                    		ENDIF
		

        		ENDIF 

	    ENDIF

					{=====================================}
					{ MC End of Modification 1.8 03/05/05 }
					{=====================================}

	


                                         {====================================}
                                         { JMW, 01/05/96, Modification        }
                                         { Include the Units in the Spec.     }
                                         {====================================}

          
            IF ( the_units <> EMPTY ) AND ( outspc <> "N/A" )THEN
                 outspc = outspc : " " : the_units
            ENDIF
      

            IF ( result_type = "D" ) AND ( ( res <> EMPTY ) AND
                NOT ( BLANK ( res ) ) ) THEN

                res = LEFTSTRING ( res, 11 )

            ENDIF
                                         {====================================}
                                         { End of Modification                }
                                         {====================================}


            res_arr [ i , ANL_NAME ]  = anal_id
            res_arr [ i , SMP_NAME ]  = STRIP ( sample_id )
            res_arr [ i , SMP_STAT ]  = SELECT SAMPLE . status
            res_arr [ i , TEST_NAME]  = comp
            res_arr [ i , RES_VAL  ]  = res
            res_arr [ i , TEST_UNIT]  = SELECT RESULT . units
            res_arr [ i , TEST_STAT]  = " "
            res_arr [ i , SPC_VALUE]  = outspc
            res_arr [ i , TEST_NUMB] = test_no

            i = i + 1

        ENDIF
        NEXT result
        comp = SELECT result . component_name

    ENDWHILE  { While t_comp }

    NEXT test
    test_no = SELECT test . test_number
 ENDWHILE



 IF     NOT test_found

   flash_message ( " No Reportable Tests Found for this Sample " , TRUE )
   EXIT

 ELSEIF NOT component_found

   flash_message ( " No components found for Reportable Tests " , TRUE )
   EXIT

 ELSEIF NOT result_found  THEN

   flash_message ( " No results found for Reportable Tests " , TRUE )
   EXIT

 ENDIF

ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE order_array_by_test_schedule          orders array based on the order}
{                                               in the test_schedule           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  24/05/96     JMWHYTE         Created to reorder analysis array              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  res_arr                REFERENCE            Results Array                   }
{==============================================================================}

ROUTINE order_array_by_test_schedule ( res_arr )

  DECLARE i, order_num, size_arr, comp_order_num, composite_order
  
  i = 0
  order_num = 1

  test_sched = SELECT SAMPLE . test_schedule
  
  IF test_sched = EMPTY THEN 
      RETURN 
   ENDIF


 CREATE OBJECT "STD_COLLECTION", collection
 DEFINE CLASS "TEST_RECORD"
   INHERIT "STD_COLLECTED"
   PROPERTIES "TEST_NAME",
              "RES_VAL"  ,
              "TEST_UNIT",
              "TEST_STAT",
              "SMP_NAME" ,
              "SMP_STAT" ,
              "ANL_NAME" ,
              "SPC_VALUE",
              "TEST_NUMB",
              "TEST_SCHED_ORDER"
   INITIALISATION
 END CLASS

 size_arr = size_of_array ( res_arr )

 WHILE ( i < size_arr ) DO

   i = i + 1

   CREATE OBJECT "TEST_RECORD", test_object

   test_object . test_name = res_arr [ i , TEST_NAME ]
   test_object . res_val   = res_arr [ i , RES_VAL   ]
   test_object . test_unit = res_arr [ i , TEST_UNIT ]
   test_object . test_stat = res_arr [ i , TEST_STAT ]
   test_object . smp_name  = res_arr [ i , SMP_NAME  ]
   test_object . smp_stat  = res_arr [ i , SMP_STAT  ]
   test_object . anl_name  = res_arr [ i , ANL_NAME  ]
   test_object . spc_value = res_arr [ i , SPC_VALUE ]
   test_object . test_numb = res_arr [ i , TEST_NUMB ]


   order_num = SELECT test_sched_entry . order_num
               WHERE ( identity    = SELECT SAMPLE . test_schedule )
                 AND ( analysis_id = res_arr [ i, ANL_NAME ]     )

                                     { Need Secondary Component Index        }
                                     { As Get by Index on Test Schedule      }
                                     { ignores component order               }


   comp_order_num = SELECT COMPONENT . order_number
                    WHERE ( analysis = res_arr [ i , ANL_NAME ] )
                      AND ( name     = res_arr [ i , TEST_NAME] )


   IF order_num = EMPTY THEN
        order_num = 9999

   ENDIF 

   composite_order = pad_str ( order_num ) :
                     pad_str ( comp_order_num )

 
   test_object . test_sched_order = composite_order
   collection . add ( test_object )

 ENDWHILE

 collection . add_index ( "TEST_SCHED_ORDER" )

 i = 0
 WHILE ( i < size_arr ) DO

    i = i + 1
    test_object = collection . get_by_index_number ( "TEST_SCHED_ORDER", i )

    res_arr [ i , TEST_NAME ] = test_object . test_name
    res_arr [ i , RES_VAL   ] = test_object . res_val
    res_arr [ i , TEST_UNIT ] = test_object . test_unit
    res_arr [ i , TEST_STAT ] = test_object . test_stat
    res_arr [ i , SMP_NAME  ] = test_object . smp_name
    res_arr [ i , SMP_STAT  ] = test_object . smp_stat
    res_arr [ i , ANL_NAME  ] = test_object . anl_name
    res_arr [ i , SPC_VALUE ] = test_object . spc_value
    res_arr [ i , TEST_NUMB ] = test_object . test_numb

 ENDWHILE
 
ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE test_record_class_initialisation  Object Initialisation              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  31/05/96     JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  self                   REFERENCE            Object                          }
{==============================================================================}

ROUTINE test_record_class_initialisation ( self )

   self . test_name = ""
   self . res_val   = ""
   self . test_unit = ""
   self . test_stat = ""
   self . smp_name  = ""
   self . smp_stat  = ""
   self . anl_name  = ""
   self . spc_value = ""
   self . test_numb = ""

ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE substr                          String Substitution Function         }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  31/05/96     JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}

{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  str                    VALUE                String                          }
{  inp_str                VALUE                Search String                   }
{  out_str                VALUE                Substitute String               }
{==============================================================================}

ROUTINE substr ( VALUE str, VALUE inp_str, VALUE out_str )

IF ( INDEX ( str, inp_str ) > 0 )
                                    { Accounts for length of <= and >= }
    len_inp_str = LENGTH ( STRIP ( inp_str ) )
    len_str     = LENGTH ( STRIP ( str     ) )
    str = SUBSTRING ( str, len_inp_str+1, len_str )
    str = out_str : str

ENDIF
RETURN ( str )
ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE padstr                          Pads the String                      }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  31/05/96     JMWHYTE         Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{  str                    VALUE                String                          }
{==============================================================================}

ROUTINE padstr ( VALUE str )

DECLARE len_str, padded_str
CONSTANT four_zeroes = 4


    str        = STRIP ( str )
    len_str    = LENGTH ( str )
    padded_str = PAD ( "", "0", four_zeroes - len_str )
    str        = padded_str : str

RETURN ( str )
ENDROUTINE


{==============================================================================}
{                                                                              }
{ ROUTINE get_person                          Gets info from personnel table   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  29/10/1997   JOD             Created                                        }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{                                                                              }
{==============================================================================}

ROUTINE get_person ( id_person )

    IF ( id_person <> EMPTY ) AND ( NOT ( BLANK ( id_person ) ) ) THEN
        pers_desc = SELECT personnel . description
                     WHERE identity = id_person

        IF ( pers_desc <> EMPTY ) AND ( NOT ( BLANK ( pers_desc ) ) ) THEN
            id_person = STRIP ( pers_desc )

        ENDIF
    ELSE
        id_person = ""

    ENDIF

ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE get_record_details                                                   }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/03/00     GF              Select the details to appear in each record of }
{                               the temporary table.                           }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{==============================================================================}
ROUTINE get_record_details (sample_id)

    DECLARE x, y, z, type, comment, test, specification, result, com1, com2, i, comment_count

    
    x = size_of_array(word_res_array)
    y = size_of_array(qa_res_array)
    z = size_of_array(bm_array)

    IF (x > 1) THEN
      
       type = "WORD"
       com1 = ""
       com2 = ""
       comment =""
       i = 1

        WHILE ( i <= x ) 
          
            
            test = word_res_array [ i, 1]
            specification = word_res_array [ i, 2]
            result = word_res_array [ i, 3]

                

        create_record (sample_id, type, comment, test, specification, result, com1, com2)
    
            i = i + 1

        ENDWHILE

    ENDIF

    IF (y > 1) THEN
      
       type = "QA"
       com1 = ""
       com2 = ""
       comment = ""
       specification = ""
       i = 1

        WHILE ( i <= y ) 
          
            
            test = qa_res_array [ i, 1]
            result = qa_res_array [ i, 2]

                

        create_record (sample_id, type, comment, test, specification, result, com1, com2)
    
            i = i + 1

        ENDWHILE

    ENDIF

    IF (z >= 1) THEN
      
       type = "MET_FREE"
       com1 = ""
       com2 = ""
       comment = ""
       specification = ""
       result = ""
       test = ""
  

                

        create_record (sample_id, type, comment, test, specification, result, com1, com2)
    
     ENDIF


ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE create_record                                                        }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/03/00     GF              assigns collected data to a temporary          }
{                                      table factor                            }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{==============================================================================}

ROUTINE create_record (sample_id, type, comment, test, specification, result, com1, com2)

    DECLARE test_info_no, check_ok, x, i

            test_info_no = INCREMENT ( "TEST_INFO", "TEST_INFO_INCREMENT")

            test_info_no = PAD ( STRIP(test_info_no), "", 10 )
            
            RESERVE ENTRY TEST_INFO, test_info_no, check_ok


            IF (check_ok <> EMPTY )
            
                flashmessage (check_ok, true)

            ELSE
                ASSIGN TEST_INFO . info_sample_id = sample_id
                ASSIGN TEST_INFO . info_type = type
                ASSIGN TEST_INFO . info_comment = comment
                ASSIGN TEST_INFO . info_test = test
                ASSIGN TEST_INFO . info_specification = specification
                ASSIGN TEST_INFO . info_result = result
                ASSIGN TEST_INFO . info_com1 = com1
                ASSIGN TEST_INFO . info_com2 = com2

                START WRITE TRANSACTION "Enter test details "

                UPDATE TEST_INFO

                COMMIT 
           
            ENDIF
            
ENDROUTINE

{==============================================================================}
{                                                                              }
{ ROUTINE delete_record                                                        }
{                                                                              }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Modification History                                                        }
{  --------------------                                                        }
{                                                                              }
{  Date         By              Description                                    }
{  ----         --              -----------                                    }
{  07/03/00     GF              Deletes all records from the temporary table   }
{                                                                              }
{==============================================================================}
{                                                                              }
{  Parameters             Passed By            Description                     }
{  ----------             ---------            -----------                     }
{==============================================================================}

ROUTINE delete_record (sample_id)

    DECLARE name_table, name_key, cont, rec_count, db_rec, status

        name_table = "TEST_INFO"
        name_key = "test_info_no"
        cont = TRUE
        rec_count = 0

        WHILE cont DO

            START READ TRANSACTION "remove the record"
           
            db_rec = SELECT 'name_table' . 'name_key'
                FOR UPDATE
                WHERE ( info_sample_id = sample_id )

            IF ( db_rec = EMPTY ) THEN
    
                cont = FALSE 
            
            ELSE 

                START WRITE TRANSACTION "remove the record"
                DELETE 'name_table'
                COMMIT, status

                IF status <> EMPTY THEN
                    flash_message ( "Remove Status : ":status, TRUE)
                ELSE 
                    rec_count = rec_count + 1
                ENDIF
        

            ENDIF

        ENDWHILE

ENDROUTINE 



{ Generate Infomaker report }

ROUTINE imprint_print ( VALUE the_sample )

	DECLARE imprint_report, operator_id, operator_name, operator_desc

	{ Define the class, then create an instance }

    path = LOGICAL ("smp$imprint")

    IF ( INDEX (path , ";") > 0)  THEN

        path = LEFTSTRING (path, INDEX(path, ";") - 1 )

    ENDIF

	define_imprint_class ( )

	CREATE OBJECT IMPRINT, imprint_report

	  operator_id = STRIP (GLOBAL ("OPERATOR"))

	  operator_desc = SELECT personnel . description
				WHERE identity = operator_id

	  IF (operator_desc = EMPTY) OR (operator_desc = " ") THEN

   	    operator_name = operator_id

	  ELSE

	  	operator_name = operator_desc

	  ENDIF

		operator_name = STRIP (operator_name)
		operator_name = SUBSTITUTE(operator_name, " ", "_" )

	{ Generate a report }

	imprint_report . create_ole_object( )

	imprint_report . reset_ole_object( )
 
	imprint_report . add_parameter ( the_sample )
	imprint_report . add_parameter (operator_name)

	imprint_report . library  = path  : "\" : "elan_custom.pbl"

	imprint_report . report  = "devel_coa"

	imprint_report . generate ( )

	imprint_report . ole_object = EMPTY 

ENDROUTINE


