{*******************************************************************************
        Module  : COMPILE
        Desc    : Compile reports, calculations, syntaxes etc.
                  To run in batch mode, pass the name of the table to compile.
                  e.g.  report
                        calculation
                        syntax
                        limit_calculation
                        list_result_format


                Group security may prevent all records being accessed and compiled
                so best to use account with system authority.
                smp/mode=batch/username=system/password=manager/report=compile report
                If run interactively on GUI there is no way to stop the compilation
                message coming up for calculations, syntax;s limit calculations and
                list result. If there are a lot of these you either press <RETURN> a
                lot or run in batch mode.
*******************************************************************************}

{*******************************************************************************
                        MODIFICATION HISTORY
                        ====================
Vers    Date        Author         Ref      Description
----    ----------- -------------- -------- ------------------------------------------------------------
1.1     24-FEB-1999 Ken Jacobs              Compile reports, calculations, syntax's, limit calculations
                                            and list_result
1.2     23-AUG-1999 Ken Jacobs              Add options to read compile list from file
1.3     17-MAR-2000 Ken Jacobs              Increase size of identity field in log file to 20
1.4     01-SEP-2000 Ken Jacobs              Allow optional input file in batch mode
*******************************************************************************************************}

JOIN STANDARD_LIBRARY std_utils
JOIN STANDARD_LIBRARY std_vgl
JOIN LIBRARY $install_window
JOIN LIBRARY $lib_utils

SET COMPILE_OPTION DECLARE

ENABLE WINDOWS

CONSTANT DIR_report             = "smp$reports:"
CONSTANT DIR_calculation        = "smp$calculations:"
CONSTANT DIR_syntax             = "smp$syntaxes:"
CONSTANT DIR_limit_calculation  = "smp$limit_calculations:"
CONSTANT DIR_list_results       = "smp$list_results:"

CONSTANT EXT_report             = ".rpf"
CONSTANT EXT_calculation        = ".caf"
CONSTANT EXT_syntax             = ".sxf"
CONSTANT EXT_limit_calculation  = ".laf"
CONSTANT EXT_list_results       = ".lrf"


{ ---------------------------------------------------------------------------- }

DECLARE menu    ARRAY menu
DECLARE form
DECLARE table_id
DECLARE filename
DECLARE i

initialise_menu( menu )
initialise_form( form )

IF ( GLOBAL( "mode" ) = "INTERACTIVE" )

        setup_install_window_class()


        REPEAT

                CHOOSE table_id OUT_OF menu AT 10,10

                IF ( LASTKEY <> "EXIT" )

                    form . start_prompt()
                    form . prompt_objects[1] . set_text( "" )
                    form . wait_prompt()
                    form . end_prompt()

                    IF ( form . get_lastkey() = "DO" )

                        filename = form . prompt_objects[1] . value
                        compile( table_id, filename )

                    ENDIF

                ENDIF

        UNTIL ( LASTKEY = "EXIT" )

ELSE

        IF ( GLOBAL( "param_active" ) )

                PROMPT FOR table_id
                table_id = TOLOWER( table_id )

                IF ( GLOBAL( "param_active" ) )

                    PROMPT FOR filename     { Optional }

                ELSE

                    filename = ""

                ENDIF

                i = 1
                REPEAT

                        i = i + 1

                UNTIL ( ( menu[i,3] = EMPTY ) OR ( menu[i,3] = table_id ) )

                IF ( menu[i,3] = table_id )


                    IF ( FILE EXISTS( filename ) )
                    OR ( filename = "" )
                    
                        compile( table_id, filename )

                    ELSE

                        
                        flash_message( "File not found " : filename, FALSE )

                    ENDIF

                ELSE

                    flash_message( "Specified table not recognised", FALSE )

                ENDIF

        ELSE

                flash_message( "No value for table to compile", FALSE )

        ENDIF

ENDIF

EXIT

{ ---------------------------------------------------------------------------- }

ROUTINE initialise_menu
        (
                menu
        )

        DECLARE i

        i = 1
        menu[i,1] = "*"
        menu[i,2] = "Compile Options"

        i = i + 1
        menu[i,1] = "R"
        menu[i,2] = "Reports"
        menu[i,3] = "report"

        i = i + 1
        menu[i,1] = "C"
        menu[i,2] = "Calculations"
        menu[i,3] = "calculation"

        i = i + 1
        menu[i,1] = "S"
        menu[i,2] = "Syntax's"
        menu[i,3] = "syntax"

        i = i + 1
        menu[i,1] = "L"
        menu[i,2] = "Limit Calculations"
        menu[i,3] = "limit_calculation"

        i = i + 1
        menu[i,1] = "R"
        menu[i,2] = "List Results"
        menu[i,3] = "list_result_format"

ENDROUTINE

{ ---------------------------------------------------------------------------- }

ROUTINE initialise_form
    (
        form
    )

    DECLARE prompt_file

    PROMPT OBJECT form
        CLASS "std_form"
        WITH    (
            height  = 1,
            width       = 60,
            row     = 8,
            column  = 2,
            border  = TRUE,
            header  = "VGL Compilation",
            footer  = "Enter filename, or leave blank to compile all"
            )

    form . status_text = form . footer

    form . add_display( "Compile File (Blank for all) ", 2, 1 , PROMPT_RENDITION_RAISED )

    PROMPT OBJECT prompt_file
        ON LINE 1
        FROM        30
        BROWSE ON   file
        WITH    (
            vgl_library     = GLOBAL( "current_library" ),
            validation_routine = "validate_file",
            file_directory  = "smp$userfiles",
            file_extension  = "compile"
            )

    form . add_prompt( prompt_file )

    RETURN

ENDROUTINE

{ ---------------------------------------------------------------------------- }

ROUTINE validate_file
    (
        prompt_file
    )

    DECLARE filename
    DECLARE valid

    filename = prompt_file . text

    IF ( blank( filename ) )

        valid = TRUE

    ELSE

        valid =  FILE EXISTS( prompt_file  . value )

    ENDIF

    RETURN( valid )

ENDROUTINE

{ ---------------------------------------------------------------------------- }

ROUTINE compile
        (
        VALUE   table_id,
      VALUE   filename
        )

        DECLARE identity
        DECLARE status
        DECLARE counter
        DECLARE count_pass
        DECLARE count_fail
      DECLARE logfile
      DECLARE directory
      DECLARE extension
      DECLARE source_file
      DECLARE use_file
      DECLARE lines     ARRAY lines ARRAY_SIZE(0)
      DECLARE i

      use_file = NOT blank( filename )

      IF ( use_file )

        IF read_file( filename, lines )

            { Continue }

        ELSE

            RETURN

        ENDIF

      ENDIF

      directory = GET CONSTANT ( "Dir_" : table_id )
      extension = GET CONSTANT ( "Ext_" : table_id )


        count_pass = 0
        count_fail = 0

        IF ( GLOBAL( "mode" ) = "INTERACTIVE" )

                SET NAME "defer/"

                CREATE OBJECT install_window_class, counter

                counter . header = TOUPPER( table_id ) : " Compilation"
                counter . footer = ""
                counter . row = 15
                counter . start_value = 0

            IF ( use_file )

                counter . end_value = size_of_array( lines )

            ELSE

                        counter . end_value = SELECT COUNT 'table_id'
                                        WHERE removeflag = FALSE
            ENDIF

                counter . start_install()

        ELSE

                logfile = "SMP$LOGFILES:COMPILE_" : TOUPPER( table_id ) : ".LOG"
                SET NAME logfile

        ENDIF

        SET PAUSE FALSE
        SET HEADER   PAD( " ", " ", 20 )
                   : PAD( TOUPPER( table_id ) : " Compilation", " ", 40 )
                   : LEFTSTRING( NOW, 17 )

      IF ( use_file )

        i = 1
        identity = lines[i]

      ELSE

            identity = SELECT 'table_id'.identity
                        WHERE removeflag = FALSE
                        ORDER ON identity

      ENDIF

        WHILE ( identity <> EMPTY )

                IF ( GLOBAL( "mode" ) = "INTERACTIVE" )

                        counter . increase_one()

                ENDIF

            source_file = directory : STRIP( identity ) : extension

            IF ( FILE EXISTS ( source_file ) )

                    IF ( table_id = "report" )

                        IF ( GLOBAL( "termtype" ) = "GUI" )

                                        status = vgl_compile_report_silent( identity )

                        ELSE

                                status = vgl_compile_report( identity )

                        ENDIF

                    ELSEIF ( table_id = "calculation" )

                        status = vgl_compile_calculation( identity )

                    ELSEIF ( table_id = "syntax" )

                        status = vgl_compile_syntax( identity )

                    ELSEIF ( table_id = "limit_calculation" )

                        status = vgl_compile_limit_calculation( identity )

                    ELSEIF ( table_id = "list_result_format" )

                        status = vgl_compile_list_result( identity )

                    ENDIF

            ELSE

            status = ERROR

            ENDIF

            IF ( status = ERROR )

                status = "Source File Missing"
                        count_fail = count_fail + 1

                ELSEIF ( status = TRUE )

                        status = "Compiled"
                        count_pass = count_pass + 1

                ELSEIF ( status = FALSE )

                        status = "Failed Compilation"
                        count_fail = count_fail + 1

                ENDIF

                IF ( GLOBAL( "mode" ) <> "INTERACTIVE" )

                        flash_message( PAD( identity, " ", 20 ) : " " : status, FALSE )

                ENDIF

LITERAL
$identity___________ $status________________________
$ENDLITERAL

            IF ( use_file )

                    i = i + 1
                identity = lines[i]

            ELSE

                        NEXT 'table_id'
                        identity = SELECT 'table_id'.identity

            ENDIF

        ENDWHILE

        SET PAUSE TRUE

        IF ( GLOBAL( "mode" ) = "INTERACTIVE" )

                counter . end_install()

        ENDIF

        flash_message( "Compiled "
                        : STRIP( count_pass )
                        : ",    Failed Compilation "
                        : STRIP( count_fail )
                        , TRUE
                        )

        IF ( GLOBAL( "mode" ) <> "INTERACTIVE" )

                flash_message( "Logfile written to " : logfile, FALSE )

        ENDIF

        FLUSH_LITERAL

ENDROUTINE

{ ---------------------------------------------------------------------------- }

ROUTINE read_file
    (
    VALUE   filename,
        lines
    )

    DECLARE status
    DECLARE line
    DECLARE i

    i = 0

    FILE OPEN filename, status

    IF ( status = EMPTY )

        FILE READ filename, line, status

        WHILE ( status = EMPTY )

            i = i + 1
            lines[i] = line

            FILE READ filename, line, status

        ENDWHILE

        FILE CLOSE filename, status

    ENDIF

    IF ( status <> EMPTY )

        flash_message( status, TRUE )

    ENDIF

    RETURN( status = EMPTY )

ENDROUTINE



