{******************************************************************************
*
* Module Name   : $SMMILL_SECURITY_LTE
*
* Purpose       : SM-MILL Users/Groups Mapping LTE.
*
* Document Ref. : 
*
* Specification :
*
* Portability   : Not Checked
*
* Re-entrant    :
*
*******************************************************************************}

{

  INTRODUCTION
  This report is the skeleton for creating table maintainance routines.
  It is intended to be used with the simpler laboratory tables and
  user defined tables. The data entry screen generated will not support
  list type entry screens such as the component editor.

  The following functions will be provided by this report:

      Add/Modify, Display, Print, List, Remove/Unremove

  Reports to support tables are generated by another setup report which
  will copy this report into a supplied name and then allow modification
  of the copy for the table required. Once modified the functions
  generated can be tested from the generic menu.

  The fields displayed on the data entry screen are defined by entering
  values into parameters in this report.

  Once a report has been created then it can be tested using the generic
  menu provided as part of the setup environment.

  ASSOCIATED FILES
        $LABSETUP.RPF  - Setup Report.
        $LABTABLIB.RPF - Library Report containing main routines.
        $LTE_TEM.RPF   - Skeleton Lab Table Report.(This file)


  SETUP DETAILS
  To customise this report for a table a number of variables and
  arrays must be setup in this report. To assist in this a copy
  of the messages file (MESSAGES.PRN) and the structure file (STRUCTURE.TXT)
  will be required.

  The areas of the report to be modified are indicated by comments and
  all occurrences of **** must be replaced with the required values. Note
  that some variables have been given default values which may also require
  changing.

}

{ --------------------------------------------------------------------------- }

{ --------------- Initialization Statements : DO NOT CHANGE ----------------- }

ENABLE WINDOWS
SET NAME "DISPLAY/"

JOIN LIBRARY $LIB_UTILS
JOIN STANDARD_LIBRARY std_array_select
JOIN LIBRARY $SMMILL_LABTABLIB
JOIN STANDARD_LIBRARY std_utils
JOIN LIBRARY $SMMILL_DYNAMIC_SQL
JOIN LIBRARY $LIB_DYNAMIC_SQL


SET NOTPROTECTED
do_the_work("add_ident")
do_the_work("modify_ident")

{ --------------------------------------------------------------------------- }


{ -------------------------- Table Setup Routine ---------------------------- }

ROUTINE table_setup

	ARRAY prompt_details	ARRAY_SIZE ( 0 , 6 )
	ARRAY fields_to_output  ARRAY_SIZE ( 0 )

{

	CHANGE : Specify the name of the table in <name_of_table>
                 eg   name_of_table = "HAZARD"

}

	name_of_table           =  "MILL_SECURITY"

{

	CHANGE : MANDATORY : Specify the text to be displayed at the top
                 of the data entry screen in <header_mess>.
                 Note that the text may be specified literally
                 eg   header_mess = "Hazard Data Entry Screen"
                 or may be extracted from the message file
                 eg   header_mess = GET MESSAGE(xyz)

}

	header_mess = "SM-Millennium Security"{GET_USER_MESSAGE ( "SMMILL_MLTE_HEADER", 1 )}

{

	CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <footer_mess> for the options
                 add , copy , modify but not display.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press DO to Save / EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

	footer_mess = {GET_USER_MESSAGE ( "SMMILL_MLTE_MFOOT", 1 )}""

{

	CHANGE : MANDATORY : Specify the text to be displayed at the bottom
                 of the data entry screen in <display_footer_mess> for the
		 display option.
                 Note that the text may be specified literally
                 eg   footer_mess = "Press EXIT to Quit"
                 or may be extracted from the message file
                 eg   footer_mess = GET MESSAGE(xyz)

}

	display_footer_mess = {GET_USER_MESSAGE ( "SMMILL_MLTE_DFOOT", 1 )}"Press EXIT to Quit" 

{

	CHANGE : MANDATORY : Specify the names of the fields and the
                 text associated with each field to be displayed on the
                 screen.
                 For each field the field name is stored in an element
                 of array <prompt_details> with an index of FIELD_NAME_POSITION
                 and the message stored with an index of MESSAGE_POSITION.
                 This array will require expanding for the total number
		 of fields required on the screen.

                 e.g
		prompt_details [ 1 , MESSAGE_POSITION    ] = "LIMS Group"
        	prompt_details [ 1 , FIELD_NAME_POSITION ] = "LIMS_GROUP"

		prompt_details [ 1 , MESSAGE_POSITION    ] = "Millennium Group"
		prompt_details [ 1 , FIELD_NAME_POSITION ] = "LABEL_TEXT"

		prompt_details [ 1 , MESSAGE_POSITION    ] = "Description"
		prompt_details [ 1 , FIELD_NAME_POSITION ] = "DESCRIPTION"

		prompt_details [ 1 , MESSAGE_POSITION    ] = "Modifiable Entry"
		prompt_details [ 1 , FIELD_NAME_POSITION ] = "MODIFIABLE"

                The text may be specified literally as shown above
                or extracted from the message file using GET MESSAGE

}
{
		prompt_details [ 1 , MESSAGE_POSITION    ] = "LIMS Group"
        	prompt_details [ 1 , FIELD_NAME_POSITION ] = "LIMS_GROUP"

		prompt_details [ 1 , MESSAGE_POSITION    ] = "Millennium Group"
        	prompt_details [ 1 , FIELD_NAME_POSITION ] = "MILL_GROUP"

	        prompt_details [ 1 , TYPE_POSITION       ] = "ROUTINE"
	        prompt_details [ 1 , LIBRARY_POSITION    ] = global ( "current_library" )
	        prompt_details [ 1 , ROUTINE_POSITION    ] = "GET_MILL_GROUP"

		prompt_details [ 1 , MESSAGE_POSITION    ] = "Millennium Password"
		prompt_details [ 1 , FIELD_NAME_POSITION ] = "MILL_PASSWORD"

	        prompt_details [ 1 , TYPE_POSITION       ] = "ROUTINE"
	        prompt_details [ 1 , LIBRARY_POSITION    ] = global ( "current_library" )
	        prompt_details [ 1 , ROUTINE_POSITION    ] = "GET_MILL_PASSWORD"
}
		prompt_details [ 1 , MESSAGE_POSITION    ] = "Description"
		prompt_details [ 1 , FIELD_NAME_POSITION ] = "DESCRIPTION"

		prompt_details [ 2 , MESSAGE_POSITION    ] = "Modifiable Entry"
		prompt_details [ 2 , FIELD_NAME_POSITION ] = "MODIFIABLE"


{

	CHANGE : Specify the name of the table to be displayed on the screen
                 in <displayed_name_of_table>. This is useful for foreign
                 language support.
                 eg   displayed_name_of_table = "Hazard"

}

	displayed_name_of_table    = {GET_USER_MESSAGE ( "SMMILL_MLTE_TABLE", 1 )}"Millennium Security"

{

	CHANGE : Specify the name of the directory where text files are stored
                 which may contain descriptive information in <directory> and
                 the extension of the file in <extn>. If there is no associated
                 text file then these should be set to EMPTY.
                 For instance the hazard table.
                 eg   directory = "SMP$TEXTFILES"
                      extn = "HAZ"
                 or
                      directory = EMPTY
                      extn = EMPTY

}

	directory = EMPTY
	extn = EMPTY

{

	CHANGE : MANDATORY : Specify the text to be displayed when prompting
                 for an identifier.
                 Note that the text may be specified literally
                 eg   input_mess  = "Enter Hazard ID : "
                 or may be extracted from the message file
                 eg   input_mess = GET MESSAGE(xyz)

}

	input_mess = {GET_USER_MESSAGE ( "SMMILL_MLTE_INPUT", 1 )}"Security"

{

	CHANGE : OPTIONAL : Specify default unique key value for new additions
		to the table - the default values for any new entry to the
		table will be copied from this entry in the database.
                Set <default_value> to be empty to ignore this feature.

		e.g
		  default_value = "DEFAULT"

}

	default_value = "DEFAULT"

{

	CHANGE : MANDATORY : Specify the number of the fields to appear
                on the output generated by the list option.
                For each field to be output on the list an element of the array
		<fields_to_output> should contain a number corresponding to
		the position of that field in the array <prompt_details>.
		This array can be of any size from zero elements to the
		size of the arrays <prompt_details>.

		e.g
		  fields_to_output [ 1 ] = 1
		  fields_to_output [ 2 ] = 4
		  fields_to_output [ 3 ] = 3

}

	fields_to_output [ 1 ]  = "1"
	fields_to_output [ 2 ]  = "2"
	fields_to_output [ 3 ]  = "3"
{
	fields_to_output [ 4 ]  = "****"
	fields_to_output [ 5 ]  = "****"
	fields_to_output [ 6 ]  = "****"
	fields_to_output [ 7 ]  = "****"
	fields_to_output [ 8 ]  = "****"
	fields_to_output [ 9 ]  = "****"

}

{

	CHANGE : OPTIONAL : Specify a special action to happen on pressing the
			     <select> key.

                CHARACTER_POSITION index contains a character for the menu item.
                TITLE_POSITION     index contains a title for the menu item.
                LIBRARY_POSITION   index contains the library to call.
                ROUTINE_POSITION   index contains a routine in the library.

	eg

	special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
	special_actions_report [ 1 , TITLE_POSITION     ] = "Analysis Options"

	special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
	special_actions_report [ 2 , TITLE_POSITION     ] = "1 Analysis Components"
	special_actions_report [ 2 , LIBRARY_POSITION   ] = "$COMP_EDIT"
	special_actions_report [ 2 , ROUTINE_POSITION   ] = "LABTABLE_INPUT"

	special_actions_report [ 3 , CHARACTER_POSITION ] = "2"
	special_actions_report [ 3 , TITLE_POSITION     ] = "2 Analysis Description"
	special_actions_report [ 3 , LIBRARY_POSITION   ] = "$LABTABLIB"
	special_actions_report [ 3 , ROUTINE_POSITION   ] = "TEXT_FILE"

}

	ARRAY 	special_actions_report 	ARRAY_SIZE ( 0 , 4 )

	special_actions_report [ 1 , CHARACTER_POSITION ] = "*"
	special_actions_report [ 1 , TITLE_POSITION     ] = "FF"

	special_actions_report [ 2 , CHARACTER_POSITION ] = "1"
	special_actions_report [ 2 , TITLE_POSITION     ] = "Mill Groups"
	special_actions_report [ 2 , LIBRARY_POSITION   ] = "$SMMILL_GROUPLINK"
	special_actions_report [ 2 , ROUTINE_POSITION   ] = "CALLED_FROM_LTE_GROUP"

	special_actions_report [ 3 , CHARACTER_POSITION ] = "2"
	special_actions_report [ 3 , TITLE_POSITION     ] = "Mill Password"
	special_actions_report [ 3 , LIBRARY_POSITION   ] = GLOBAL("CURRENT_LIBRARY")
	special_actions_report [ 3 , ROUTINE_POSITION   ] = "GET_PASSWORD"

{

	move the comments braces to allow use of these statements

}


{

	CHANGE : OPTIONAL : Specify five standard messages.

                IDENTITY1_MESSAGE contains title text for the identity field.
                MOD_ON_MESSAGE    contains title text for the Modified On field.
                MOD_BY_MESSAGE    contains title text for the Modified by field.
                READ_MESSAGE      contains identifier for the read transaction.
                WRITE_MESSAGE     contains identifier for the write transaction

		Note:
		Where a table contains more than one key0 field, then messages
		for the second (and third and fourth, if appropriate) key0
		fields should be set up in the IDENTITY2_MESSAGE,
		IDENTITY3_MESSAGE and IDENTITY3_MESSAGE elements.

}

        ARRAY 	labtable_messages 	ARRAY_SIZE ( 0 )

        labtable_messages [ IDENTITY1_MESSAGE ] = "LIMS User"{GET_USER_MESSAGE ( "SMMILL_MLTE_INPUT1", 1 )}
					         {"Identity" }
        labtable_messages [ IDENTITY2_MESSAGE ] = "Millennium User"{GET_USER_MESSAGE ( "SMMILL_MLTE_INPUT2", 1 )}
					        { "Identity 2" }
        labtable_messages [ IDENTITY3_MESSAGE ] = GET MESSAGE ( 2884 , 2 )
					        { "Identity 3" }
        labtable_messages [ IDENTITY4_MESSAGE ] = GET MESSAGE ( 2884 , 3 )
					        { "Identity 4" }
        labtable_messages [ MOD_ON_MESSAGE    ] = GET MESSAGE ( 2546 , 1 )
						{ "Modified On" }
        labtable_messages [ MOD_BY_MESSAGE    ] = GET MESSAGE ( 2547 , 1 )
                                                { "Modified By" }
        labtable_messages [ READ_MESSAGE      ] = GET MESSAGE ( 2566 , 1 )
                                                { "Labtable Read Transaction" }
        labtable_messages [ WRITE_MESSAGE     ] = GET MESSAGE ( 2567 , 1 )
                                                { "Labtable Write Transaction" }

{

	CHANGE : MANDATORY : Specify the help context for the editor window.
		 The text should be specified literally and should start
		 with the name of the report, suffixed with "_EDIT",
		 	i.e. "$LTE_XXX_EDIT"

}

	help_context = "$LTE_TEM_EDIT"


 {   ------	THERE ARE NO MORE FIELDS TO BE SETUP  --------    }

ENDROUTINE

{ --------------------------------------------------------------------------- }
{                                                                             }
{ The following routines are provided as call back points for LTE processing. }
{ User code may be added as appropriate.                                      }
{ --------------------------------------------------------------------------- }

ROUTINE validation_routine

	{ Called on pressing the DO key to save LTE screen.               }
	{ Called outside of the LTE write transaction.                    }
        {                                                                 }
	{ Returns a boolean value to indicate whether to proceed with     }
	{ the save process - if FALSE is returned the user is forced back }
	{ into the editor                                                 }

    DECLARE lims_user, can_leave, role, the_pass, the_proc

    can_leave = TRUE

    lims_user = SELECT MILL_SECURITY . lims_user

    { Check if user can enter results }

    the_proc = SELECT ROLE_MENU . procedure_num
                WHERE   operator_id = lims_user AND
                      ( procedure_num = 247   OR {Tabular Result Entry by Sample}
                        procedure_num = 248   OR {Tabular Result Entry by Test }
                        procedure_num = 389   OR {Spread Sheet Result Entry by Test}
                        procedure_num = 15041 OR {Spread Sheet Result Entry by Criteria}
                        procedure_num = 475   OR {Result Entry by Analysis Worksheet}
                        procedure_num = 476 )    {Result Entry by Sample Worksheet}

    IF the_proc <> EMPTY THEN

        IF ( STRIP ( TOUPPER(operation) ) = "ADD_IDENT" ) THEN
                   
            the_pass  = SELECT MILL_SECURITY . mill_password

            IF the_pass = "" THEN

                can_leave = confirm_with_text("Blank Millennium Password to be assigned to this user?")

            ENDIF

        ENDIF

        { Assign Mill User in UPPERCASE field for Millennium Transfer Results Security Check }
    
        mill_user = SELECT MILL_SECURITY . mill_user
        ASSIGN MILL_SECURITY . uppercase_mill_user = TOUPPER(mill_user)

    ELSE

        flashmessage("SampleManager User ":STRIP(lims_user):" does not have access to enter results":
                     " and therefore cannot be mapped as an interface user!", TRUE)


        can_leave = FALSE

    ENDIF

    RETURN ( can_leave )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE prompt_object_routine (       prompt_object ,
                                VALUE key0_count    ,
                                VALUE operation     )

	{ Called during the creation of the identity prompts              }
        {                                                                 }
	{ prompt_object is the prompt object fro the specified prompt     }
	{ key0_count    is the current key0 segment number                }
	{               eg this would be 2 for the version_number         }
	{                  field of the versioned_analysis table          }
	{ operation     the current LTE operation eg ADD, MODIFY, DISPLAY }
        {                                                                 }
	{ No return value is required                                     }


    IF ( STRIP ( TOUPPER(operation) ) = "ADD" ) OR
        ( STRIP ( TOUPPER(operation) ) = "COPY" ) THEN
                   
        IF ( key0_count = 2 ) THEN 

            prompt_object . browse_routine = "BROWSE_MILL_USERS"

            {DK 23 September 2002, Added Validation on Millennium User Prompt }

            prompt_object . validation_routine = "VALIDATE_MILL_USER"
  

        ENDIF

    ELSEIF ( STRIP ( TOUPPER(operation) ) = "MODIFY" ) OR
            ( STRIP ( TOUPPER(operation) ) = "DISPLAY" ) THEN

        IF ( key0_count = 2 ) THEN 

            prompt_object . browse_routine = "BROWSE_EXIST_MILL_USERS"

        ENDIF

    ELSEIF ( STRIP ( TOUPPER(operation) ) = "REMOVERESTORE" ) THEN

        IF ( key0_count = "MILL_USER" ) THEN 

            prompt_object . browse_routine = "BROWSE_EXIST_MILL_USERS"

        ENDIF

    ENDIF


ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE create_id_routine

	{ Called before starting the identity prompts of an LTE for the   }
	{ ADD and COPY options.                                           }
	{                                                                 }
	{ The return value is used as the identity of the new record      }
	{ instead of starting the identity prompts.                       }
	{ Returning EMPTY causes the identity prompt to be started.       }

        RETURN ( EMPTY )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE update_routine ( labtable )

	{ Called on pressing the DO key to save LTE screen.               }
	{ Called after the LTE write transaction has been started.        }
	{                                                                 }
	{ labtable is the labtable object.                                }
	{                                                                 }
	{ The return value is TRUE  if updates have been performed        }
	{                     FALSE if updates have NOT been performed    }
	{                     EMPTY - the systems checks for updates      }


        RETURN ( FALSE )


ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE read_data_routine (       labtable  ,
                            VALUE operation )

	{ Called after the record has been selected / reserved but before }
	{ the editor screen has been built.                               }
        {                                                                 }
	{ labtable      the labtable object.                              }
	{ operation     the current LTE operation eg ADD, MODIFY, DISPLAY }
        {                                                                 }
	{ No return value is required                                     }

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE validate_new_id_routine ( VALUE new_id )

	{ Called after each ID value has been entered.                    }
	{                                                                 }
	{ new_id is the value entered at the prompt.                      }
	{                                                                 }
	{ Returns a boolean value to indicate whether the value is valid. }

	RETURN ( TRUE )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE do_the_work  ( VALUE operation )

table_setup ()
smp_lte_perform_option  ( name_of_table              ,
	    	          displayed_name_of_table    ,
			  prompt_details             ,
                          labtable_messages          ,
                          default_value		     ,
                          input_mess		     ,
		          header_mess                ,
		          footer_mess                ,
			  display_footer_mess        ,
			  directory                  ,
			  extn                       ,
			  help_context               ,
		          GLOBAL ("CURRENT_LIBRARY") ,
			  fields_to_output           ,
			  special_actions_report     ,
			  operation                  )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE add_option ( option )

do_the_work ( "add_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE copy_option ( option )

do_the_work ( "copy_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE modify_option ( option )

do_the_work ( "modify_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE display_option ( option )

do_the_work ( "display_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE remove_option ( option )

do_the_work ( "remove_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE restore_option ( option )

do_the_work ( "restore_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE list_option ( option )

do_the_work ( "list_idents" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE print_option ( option )

do_the_work ( "print_ident" )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE smp_lte_initialise

ENDROUTINE

{ --------------------------------------------------------------------------- }

GLOBAL ROUTINE browse_user_id ( prompt_object )

    DECLARE the_schema, the_field, the_table

    the_schema = ""
    the_field  = "name, fullname"
    the_table = "USERINFO"

    select_millennium_user_data ( prompt_object,
                                  the_schema,
                                  the_field,
                                  the_table )

    prompt_object . parent_prompt . prompt_objects[2] . text = prompt_object . text

    prompt_object . parent_prompt . prompt_objects[2] . repaste()


    RETURN ( prompt_object . value )

ENDROUTINE


{ --------------------------------------------------------------------------- }

ROUTINE browse_exist_user_id ( prompt_object )

    DECLARE lims_user, mill_user, user_array, count

    ARRAY user_array
    count = 1

    lims_user = prompt_object . parent_prompt . prompt_objects[1] . text 

    mill_user = SELECT MILL_SECURITY . mill_user
                 WHERE lims_user = lims_user

    WHILE mill_user <> EMPTY DO

        user_array[count] = mill_user

        count = count + 1
        NEXT MILL_SECURITY

        mill_user = SELECT MILL_SECURITY . mill_user

    ENDWHILE

    browse_on_array ( 80 , prompt_object . text , user_array )

    prompt_object . parent_prompt . prompt_objects[2] . text = prompt_object . text

    prompt_object . parent_prompt . prompt_objects[2] . repaste()

    RETURN ( prompt_object . value )

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_mill_password ( VALUE column     ,
	                    VALUE row        ,
			    VALUE cell_width ,
			          screen     ,
			    VALUE is_display )

    DECLARE the_user, the_pass, sql_string, dynamic_sql, record_count

    the_pass = SELECT MILL_SECURITY . mill_password
    the_user = STRIP(SELECT MILL_SECURITY . mill_user)

    IF is_display THEN


    ELSE

        IF STRIP(the_pass) = "" THEN

            sql_string = "SELECT password FROM USERINFO@":GLOBAL("MILL_DATABASE_LINK_NAME"):" WHERE name = '":the_user:"'"

            CREATE OBJECT "STD_DYNAMIC_SQL" , dynamic_sql

            dynamic_sql . add_to_sql_statement ( sql_string )
            record_count = dynamic_sql . add_select_string ( 234 )
            dynamic_sql . execute ()

            the_pass = dynamic_sql . select (record_count)

            ASSIGN MILL_SECURITY . mill_password = the_pass

        ENDIF

    ENDIF

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE get_password ( VALUE oper_id		,
		       VALUE old_oper_id	,
		       VALUE option		)

  
    DECLARE the_value, the_header

    IF option = "MODIFY" THEN

        the_value = SELECT MILL_SECURITY . mill_password
        the_header = "Change Millennium Password"

    ELSE

        the_value = ""
        the_header = "Enter Millennium Password"

    ENDIF

    IF ( option = "ADD" )  OR ( option = "MODIFY" ) THEN

     	CREATE OBJECT "STD_FORM", add_user_window

	add_user_window . HEIGHT       = 3
	add_user_window . WIDTH        = 40
	add_user_window . COLUMN       = 15
	add_user_window . ROW          = 10
	add_user_window . HEADER       = the_header
	add_user_window . FOOTER       = ""
	add_user_window . BUTTON_STYLE = FORM_BUTTON_OK_CANCEL
	add_user_window . add_frame ( "",1,1,3,40 )

	add_user_window . validation_routine = "add_user_validation"


	PROMPT OBJECT menu_prompt1
	        AT 18, 1
	        FORMAT TEXT20
	        WITH ( DISPLAY_ONLY = TRUE,
                       VALUE = SELECT MILL_SECURITY . MILL_USER )

	add_user_window . add_prompt ( menu_prompt1 )


	add_user_window . add_display ( "Millennium User" , 2 , 1 ,
	                                PROMPT_RENDITION_BOLD )


        IF option = "MODIFY" THEN

            the_value = SELECT MILL_SECURITY . mill_password

        ENDIF

	PROMPT OBJECT menu_prompt2
	        AT 18, 2
	        FORMAT TEXT20
	        WITH ( silent_mode = TRUE,
                       LOWERED = TRUE,
                       value = the_value )


	PROMPT OBJECT menu_prompt3
	        AT 18, 3
	        FORMAT TEXT20
	        WITH ( silent_mode = TRUE,
                       LOWERED = TRUE,
                       value = the_value )

	add_user_window . add_display ( "Enter Password" , 2 , 2 ,
	                                PROMPT_RENDITION_BOLD )

	add_user_window . add_prompt ( menu_prompt2 )

	add_user_window . add_display ( "Confirm Password" , 2 , 3 ,
	                                PROMPT_RENDITION_BOLD )

	add_user_window . add_prompt ( menu_prompt3 )


	add_user_window . start_prompt ( )

        add_user_window . set_position ( 2 )
	add_user_window . wait_prompt ( )
	add_user_window . end_prompt ( )

    ENDIF

ENDROUTINE

{ --------------------------------------------------------------------------- }

ROUTINE add_user_validation ( self )

DECLARE valid,  password , verify_password

    valid = FALSE

    password        = self . prompt_objects [ 2 ] . value
    verify_password = self . prompt_objects [ 3 ] . value

    IF ( self . get_lastkey ( ) <> "EXIT" ) THEN 

	IF TOUPPER(password) = TOUPPER(verify_password) THEN

            If STRIP(password) = "" THEN
{
                flashmessage("Blank Password will be assigned....", TRUE)
}

            ENDIF

	    valid = TRUE

            ASSIGN MILL_SECURITY . mill_password = TOUPPER(STRIP(password))
            ASSIGN MILL_SECURITY . update_password = TRUE

	ELSE

	    flash_message ( "New Password and Verification are different!" , TRUE )

        ENDIF

    ENDIF


    RETURN ( valid )

ENDROUTINE


{ --------------------------------------------------------------------------- }

{DK 23 September 2002, Added Validation on Millennium User Prompt }

ROUTINE VALIDATE_USER ( self )

    DECLARE can_leave, the_field, ss_name, record_count

	RETURN (TRUE)  { no Empower check }

    can_leave = FALSE
    the_field = "name"
    the_table = "USERINFO"

    sql_string = "SELECT s.":the_field:" FROM ":the_table:"@":GLOBAL("MILL_DATABASE_LINK_NAME"):" s":
                 " WHERE s.name = ":"'":STRIP(self.text):"'"


    CREATE OBJECT "STD_DYNAMIC_SQL" , dynamic_sql

    dynamic_sql . add_to_sql_statement ( sql_string )
    record_count = dynamic_sql . add_select_string ( 50 )
    dynamic_sql . execute ()

    ss_name = dynamic_sql . select (record_count)

    IF ss_name <> EMPTY THEN

        can_leave = TRUE

    ELSE

        can_leave = FALSE
        flashmessage("Invalid Millennium User!", TRUE)

    ENDIF


    RETURN ( can_leave )


ENDROUTINE

