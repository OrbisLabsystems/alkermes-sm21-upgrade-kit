{*******************************************************************************
*
* Module Name   :  OLS_SM_EMPOWER
*
* Purpose       :  SM-Empower LIMSML for IM migration
*
* Version 1.0
*******************************************************************************} 

SET COMPILE_OPTION DECLARE
SET NAME "DEFER/"
ENABLE WINDOWS
SET NOTPROTECTED

JOIN STANDARD_LIBRARY STD_ARRAY
JOIN STANDARD_LIBRARY STD_GENERAL
JOIN STANDARD_LIBRARY STD_DATABASE
JOIN STANDARD_LIBRARY STD_ARRAY_SELECT
JOIN STANDARD_LIBRARY STD_MESSAGE
JOIN STANDARD_LIBRARY STD_STRUCTURE
JOIN STANDARD_LIBRARY STD_UTILS
JOIN STANDARD_LIBRARY STD_PROMPT
JOIN LIBRARY $LIB_UTILS
JOIN LIBRARY ALK_CV_SAMPLE

CONSTANT MILL_SECURITY_TABLE = "mill_security"
CONSTANT MILL_COMP_MAP_TABLE = "mill_component_map"

DECLARE g_datatype


{
Alias the user in the mapping LTE
}
ROUTINE check_user (user_id, VALUE datatype)

    DECLARE ret, lims_user 

    ret = EMPTY
    g_datatype = datatype
    g_datatype = g_datatype

    lims_user = SELECT 'MILL_SECURITY_TABLE' . lims_user
				WHERE mill_user = user_id
				AND  removeflag = FALSE

    IF (lims_user = EMPTY) THEN

        ret = user_id:" user not mapped for Empower"

    ELSE

        user_id = lims_user

    ENDIF

    RETURN (ret)

ENDROUTINE

{
if -99, allows it
}
ROUTINE validate_sample_numeric (VALUE sample_field_value, actual_samp_id)

	DECLARE status 

	status = EMPTY
	actual_samp_id = 0
	
	IF (sample_field_value="-99") THEn

		actual_samp_id = sample_field_value
		RETURN (EMPTY)   {  workaround for CVs }

	ENDIF

	IF (NOT NUMTEXT (sample_field_value)) THEN

		status = "Invalid sample ID (LIMS_No): ":sample_field_value
		RETURN (status)

	ENDIF

     { actual value is sent from IM, just validate it }

	actual_samp_id = SELECT sample . id_numeric 
					WHERE id_numeric = sample_field_value
					AND   status <> "A"
					AND   status <> "R"
					AND   status <> "I"
					AND   status <> "X"
					AND   status <> "S"

	IF (actual_samp_id = EMPTY) THEN

		status = get_msg ("INVAL_IDNUM"):sample_field_value

	ENDIF

	RETURN (status)

ENDROUTINE


{
  Gets the test
}
ROUTINE emp_get_test (VALUE sample_id, VALUE test_field_value, actual_test_id)

	DECLARE status 

	status = EMPTY
	actual_test_id = 1   { dummy value, the test is mapped later }

	RETURN (status)

ENDROUTINE

{
  entered_results_array is output the results that were entered

  For [OUT] or_error_status, if for all calls in the whole file, 
   there are any or_error_status <> EMPTY, then its not an error (logical or). 
   Otherwise it flags the last one.
}
ROUTINE empower_write_results (VALUE sample_id, VALUE test_number, array_results, VALUE user_id, 
						VALUE is_first_call, error_array, entered_results_array, 
						or_error_status )


	DECLARE status, i, j,  ptr_cnt, ptr_fld_cnt,
            array_ptr_field_names, status_array ,  res_type ,
		  array_all_maps, component_name_mapped, err_msg,
			proj, sset, inst, peakname_mapped, 
		ptr_array, entered_results_count, count_maps, is_cv, multiple_maps_found

	status = EMPTY
	or_error_status = EMPTY
	multiple_maps_found = FALSE
	count_maps = 0
	is_cv = FALSE
	res_type = "RESULT"
	ARRAY entered_results_array
	ARRAY ptr_array
	ARRAY array_ptr_field_names
	ARRAY array_all_maps	
     ptr_cnt = 0	

	{  array_results :   [c, x]
	    c,1:   1=field type   2=comp name  3=result value  4,5,...see below
	    Subsequent fields as follows: name, value.....This is meant for other fields in result table
	    Above is when field type =RESULT
	    Otherwise its specific to the field type value
	}

	DECLARE array_tests
	ARRAY array_tests

	IF (sample_id <> -99) THEN

		get_all_sample_tests (sample_id, array_tests)

		{ Get all the mapped components for the test }
		get_mapped_component_list (array_tests,  array_all_maps)

	ENDIF


	{ get non-result data }
	i = 0
	WHILE ( i < size_of_array (array_results) ) DO

		i = i + 1

		IF (array_results[i,1]="DATA") THEN

			IF (array_results[i,2]="Project") THEN
				proj = array_results[i,3]
			ELSEIF (array_results[i,2]="SampleSet") THEN
				sset = array_results[i,3]
			ELSEIF (array_results[i,2]="Instrument") THEN
				inst = array_results[i,3]
			ENDIF

		ENDIF

	ENDWHILE

	{ If from a CV sampleset, then write to the CV sample }
	i = 0
	WHILE ( i < size_of_array (array_results) ) DO

		i = i + 1

		IF (array_results[i,1]="CV") THEN

			is_cv = TRUE

			write_to_cv_sample (proj, sset, inst,
						array_results[i,2],
						array_results[i,3]      )

		ENDIF

	ENDWHILE


	i = 0

	WHILE ( i < size_of_array (array_results) ) DO

		i = i + 1

		IF (array_results[i,1]=res_type) THEN

			j = 3
			WHILE (array_results[i,j+1] <> EMPTY) DO

				j = j + 1

				ptr_cnt = size_of_array(array_ptr_field_names)+1
				array_ptr_field_names [ptr_cnt] = array_results[i,j]

				j = j +1   { skip value, onto next name }

			ENDWHILE
	
			i = 9999    { no need to check any more, all have same field names }

		ENDIF

	ENDWHILE


	{ Now have the field name list, make the arrays }
	i = 0

	WHILE (status=EMPTY) AND
		( i < size_of_array (array_results) ) DO

		i = i + 1

		test_number = 0
		ARRAY ptr_array
		ptr_cnt = 1
		ptr_array [1,1]  = "component_name"
		ptr_array [1,2]  = "text"

		j = 0

		WHILE (j < size_of_array(array_ptr_field_names)) DO

			j = j + 1
			ptr_array [1,j+2] = array_ptr_field_names[j]

		ENDWHILE

		IF (array_results[i,1]=res_type) THEN

			get_mapped_comp_name (array_results [i,2], array_all_maps, 
							test_number, component_name_mapped, peakname_mapped,
							FALSE , 0, multiple_maps_found)

			IF (component_name_mapped <> "") AND (test_number <> "")  AND
				 (test_number <> 0) THEN

				{ Flag the test as mapped }
				set_test_mapped (test_number, array_tests, peakname_mapped)  

				ptr_cnt = size_of_array(ptr_array)+1
				ptr_array [ptr_cnt,1] = component_name_mapped
				ptr_array [ptr_cnt,2] = array_results [i,3]

				entered_results_count = size_of_array (entered_results_array) + 1
				entered_results_array [entered_results_count, 1] = test_number
				entered_results_array [entered_results_count, 2] = ptr_array [ptr_cnt,1]

                    ptr_fld_cnt = 2
				j = 3
				WHILE (array_results[i,j+1] <> EMPTY) DO
	
					j = j + 2
                         ptr_fld_cnt = ptr_fld_cnt + 1
					ptr_array [ptr_cnt, ptr_fld_cnt] = array_results [i,j]

					count_maps = count_maps + 1

				ENDWHILE

			ENDIF

		ENDIF

		{ write the result }

		IF ( status = EMPTY ) AND (ptr_cnt > 1) THEN

			PUT_TEST_RESULTS test_number,  ptr_array ,status_array

			IF (status_array[1] <> EMPTY) THEN

				err_msg = make_error_string_from_ptr_status ( status_array, ptr_array )

				IF (STRIP(err_msg) <> "") THEN

					status = make_error_string_from_ptr_status ( status_array, ptr_array ) 

				ENDIF

			ENDIF

		ENDIF

	ENDWHILE

	{ If no maps for samples, throw error }
	IF (NOT is_cv) AND (count_maps=0) THEN

		IF (multiple_maps_found) THEN

			or_error_status = "More than 1 test map was found for the same result"
		ELSE

			or_error_status = "No results map OR more than 1 test map was found for the same result"
		ENDIF

	ENDIF

	{ CV }
	{ CV results, write to the same samples }	

	DECLARE cv_test_map_array, tmp_name
	ARRAY cv_test_map_array
	make_cv_results_array (proj, inst,
			array_tests, cv_test_map_array)

	i = 0

	WHILE (status=EMPTY) AND
		(i < size_of_array (cv_test_map_array)) DO

		i = i + 1

		test_number = 0
		ARRAY ptr_array
		ptr_cnt = 1
		ptr_array [1,1]  = "component_name"
		ptr_array [1,2]  = "text"
		ptr_array [1,3]  = "empower_sampleset"
		ptr_array [1,4]  = "mill_project"

		{ runtype_repl, inj_no, peak, emp_field, result  }
		{ This roundabout way is used so that these are treated exactly like samples }
		tmp_name =  
		STRIP(cv_test_map_array [i,1]):";":
		STRIP(NUMBER_TO_TEXT(cv_test_map_array [i,4],"999")):";":
		STRIP(cv_test_map_array [i,3]):";":
		STRIP(cv_test_map_array [i,2])

		get_mapped_comp_name (tmp_name, array_all_maps, 
							test_number, component_name_mapped, peakname_mapped,
							TRUE, cv_test_map_array [i,6], multiple_maps_found)

          { In IF below, already know the mapped test number, so must check it }

		DECLARE peak_ok
		peak_ok = is_valid_cv_peak  (array_tests, test_number,
				component_name_mapped, peakname_mapped  )

		IF (peak_ok) AND
		   (component_name_mapped <> "") AND (test_number <> "") AND
				(test_number <> 0 ) THEN

				ptr_cnt = size_of_array(ptr_array)+1
				ptr_array [ptr_cnt,1] = component_name_mapped
				ptr_array [ptr_cnt,2] = cv_test_map_array [i,5]
				ptr_array [ptr_cnt,3] = cv_test_map_array [i,7]
				ptr_array [ptr_cnt,4] = cv_test_map_array [i,8]

				entered_results_count = size_of_array (entered_results_array) + 1
				entered_results_array [entered_results_count, 1] = test_number
				entered_results_array [entered_results_count, 2] = ptr_array [ptr_cnt,1]

{  Not required
                    ptr_fld_cnt = 2
				j = 3
				WHILE (array_results[i,j+1] <> EMPTY) DO
	
					j = j + 2
                         ptr_fld_cnt = ptr_fld_cnt + 1
					ptr_array [ptr_cnt, ptr_fld_cnt] = array_results [i,j]

				ENDWHILE
}

		ENDIF

		IF ( status = EMPTY ) AND (ptr_cnt > 1) THEN

			PUT_TEST_RESULTS test_number,  ptr_array ,status_array

			IF (status_array[1] <> EMPTY) THEN

				err_msg = make_error_string_from_ptr_status ( status_array, ptr_array )

				IF (STRIP(err_msg) <> "") THEN

					status = make_error_string_from_ptr_status ( status_array, ptr_array ) 

				ENDIF

			ENDIF

		ENDIF

	ENDWHILE


	RETURN (status)

ENDROUTINE


ROUTINE set_test_mapped (VALUE testno, array_tests, VALUE peakname_mapped)

	DECLARE i
	i = 0
	WHILE (i < size_of_array(array_tests)) DO
		i = i + 1
		IF(array_tests[i,1]=testno) THEN
			array_tests [i,4] = TRUE
			array_tests [i,5] = peakname_mapped
		ENDIF
	ENDWHILE

ENDROUTINE

ROUTINE get_all_sample_tests (VALUE sample, array_tests)

	DECLARE rec, i

	ARRAY array_tests   ARRAYSIZE (0,6)

	rec = SELECT test . test_number
			WHERE sample = sample
			AND status <> "X"
			AND status <> "A"
			AND status <> "R"
			AND status <> "I"

	WHILE (rec <> EMPTY) DO

		i = size_of_array (array_tests) + 1

		array_tests [i,1] = SELECT test . test_number
		array_tests [i,2] = SELECT test . analysis
		array_tests [i,3] = SELECT test . analysis_version 
		array_tests [i,4] = FALSE  { flag if has a mapping }
		array_tests [i,5] = ""    { default peakname for the test, assuming only 1.  Set leter }
		array_tests [i,6] = SELECT test . test_count

		NEXT test  
		rec = SELECT test . test_number

	ENDWHILE

ENDROUTINE

{
 Look up the mapping tables to get what is mapped
 array_tests in, array_all_maps out
}
ROUTINE get_mapped_component_list (array_tests, array_all_maps)

	DECLARE cnt_map, cnt_tests, rec

	cnt_map = 0

	{ Fields in array_all_maps:  test_no, analysis, component, runtype_repl, inj_no, peak, emp_field }
     { Fields in array_tests: test, analysis, analysis ver, map flag }

	cnt_tests = 0

	WHILE (cnt_tests < size_of_array(array_tests)) DO

		cnt_tests = cnt_tests + 1

		rec = SELECT 'MILL_COMP_MAP_TABLE' . analysis
				WHERE analysis = array_tests [cnt_tests, 2]
				AND  analysis_version = 0
				AND enable = TRUE

		WHILE (rec <> EMPTY) DO

			cnt_map = size_of_array (array_all_maps) + 1

			array_all_maps [cnt_map,1] = array_tests [cnt_tests, 1]
			array_all_maps [cnt_map,2] = array_tests [cnt_tests, 2]
			array_all_maps [cnt_map,3] = SELECT 'MILL_COMP_MAP_TABLE' . component
			array_all_maps [cnt_map,4] = STRIP(SELECT 'MILL_COMP_MAP_TABLE' . inject_comment)
			array_all_maps [cnt_map,5] = SELECT 'MILL_COMP_MAP_TABLE' . injection
			array_all_maps [cnt_map,6] = SELECT 'MILL_COMP_MAP_TABLE' . mill_analyte
			array_all_maps [cnt_map,7] = SELECT 'MILL_COMP_MAP_TABLE' . mill_type
			array_all_maps [cnt_map,8] = array_tests [cnt_tests, 6]

			NEXT 'MILL_COMP_MAP_TABLE'  
			rec = SELECT 'MILL_COMP_MAP_TABLE' . analysis

		ENDWHILE

	ENDWHILE


ENDROUTINE

ROUTINE make_param_array (VALUE param_list, p_arr, VALUE delim)

    DECLARE i, param

    ARRAY p_arr

    param_list = STRIP (param_list)

    REPEAT

        param_list = STRIP (param_list)
        i = INDEX (param_list, delim)

        IF (i>0) THEN

            param      = SUBSTRING (param_list, 1, i-1)
            param_list = SUBSTRING (param_list, i+1, STRINGLENGTH (param_list)-i)

            p_arr [size_of_array(p_arr)+1] = STRIP(param)

        ELSEIF (STRIP(param_list) <> "")

            param = STRIP (param_list)
            param_list = ""

            p_arr [size_of_array(p_arr)+1] = STRIP(param)

        ENDIF

    UNTIL (i = 0)

ENDROUTINE    {  make_param_array  }


{
internal
}
ROUTINE make_error_string_from_ptr_status ( 
					ptr_err_array, ptr_array )

    DECLARE i, the_msg, conv_msg, full_str, crlf,
		warn_mess, warn_text

    crlf=ASCII(13):ASCII(10)
    full_str = ""
    the_msg = ""

	message_fetch( "RESULT_ENTRY_MLP_LEVEL_ID", warn_mess )
	warn_text = message_get_text ( warn_mess, 1 )
	warn_text = SUBSTRING (warn_text,1,20)

    IF (size_of_array(ptr_err_array)>0) THEN

        IF (ptr_err_array[1] <> EMPTY) THEN

            conv_msg = get_user_message (ptr_err_array[1], 1)
		  IF (conv_msg <> ERROR) THEN

			the_msg = STRING(conv_msg)
			IF (INDEX(the_msg,warn_text) < 1) THEN

	               full_str = full_str:STRIP(the_msg):crlf

			ENDIF

           ENDIF              

        ENDIF

    ENDIF

    i = 1

    WHILE (i < SIZE_OF_ARRAY (ptr_err_array)) DO

        i = i + 1

        IF (ptr_err_array [i] <> EMPTY) THEN

              IF (ptr_err_array [i] <> ERROR) THEN

                 the_msg  = ptr_err_array [i]
                 conv_msg = get_user_message (ptr_err_array [i], 1)

                 IF (conv_msg <> EMPTY) THEN

                    IF (conv_msg <> ERROR) THEN

                       the_msg = the_msg:".  ":STRING(conv_msg)

                    ENDIF                  

                 ENDIF

				IF (INDEX(the_msg,warn_text) < 1) THEN

   			  		full_str = full_str:STRIP(the_msg):"(":ptr_array[i,1]:"=":ptr_array[i,2]:")":crlf

				ENDIF

              ENDIF

        ENDIF

    ENDWHILE
	
    RETURN (full_str)

ENDROUTINE    

ROUTINE get_msg (VALUE msg)

	DECLARE ret

	ret = get_user_message ("OLS_LHSMC_":STRIP(msg), 1)

	RETURN ( ret )

ENDROUTINE


{ gets mapped LIMS component name and analysis
  Outputs in testno, comp_to_use, empower_component_mapped (the empower peak name)
  Output flag if multiple maps found
}
ROUTINE get_mapped_comp_name (VALUE comp_alias, array_mapping, 
						testno_to_use, comp_to_use, 
						empower_component_mapped, VALUE is_cv, VALUE cv_test_number,
						multiple_maps_found)

	DECLARE ret, i, j,  array_mapped, new_array_mapped,
         runtype_repl, inj_no, peak, emp_field, analysis_array

	ret = EMPTY
	multiple_maps_found = FALSE
	testno_to_use = ""
	comp_to_use = ""
	empower_component_mapped = ""
	ARRAY analysis_array
	ARRAY array_mapped  ARRAYSIZE (0,5)

	{ comp_alias is in the form e.g. CU1;<injection>;<peak>;<field>;
		<analysis1>;<test count1>;<analysis2>;<test count2> 
		<analysis3>;<test count3>;<analysis4>;<test count4> 
     }

	parse_result_id (comp_alias, runtype_repl, inj_no, peak, emp_field, analysis_array)

	{ array_mapping is the SM-Empower mapping of every test on the sample }
	{ Fields are test_no, analysis, component, runtype_repl, inj_no, peak, emp_field }

	i = 0

	WHILE (ret = EMPTY) AND
           (i < size_of_array (array_mapping) ) DO

		i = i + 1

		IF ( STRIP(TOUPPER(array_mapping [i,4])) = STRIP(TOUPPER(runtype_repl))  ) AND 
             ( array_mapping [i,5] = inj_no )       AND 
		    is_peak_match (array_mapping [i,6], peak) AND
             ( STRIP(TOUPPER(array_mapping [i,7])) = STRIP(TOUPPER(emp_field))  )  THEN

			j = size_of_array (array_mapped) + 1
			array_mapped [j, 1] = array_mapping [i,1]
			array_mapped [j, 2] = array_mapping [i,3]
			array_mapped [j, 3] = STRIP(TOUPPER(peak))
			array_mapped [j, 4] = array_mapping [i,2]   { analysis }
			array_mapped [j, 5] = array_mapping [i,8]   { test count }

		ENDIF

	ENDWHILE


	{ If > 1 mapped, need to use the test_count to know }

	IF (size_of_array(array_mapped)=1) THEN

		j = 1
		testno_to_use = array_mapped [j, 1]
		comp_to_use = array_mapped [j, 2]
		empower_component_mapped = array_mapped [j, 3]

	ELSEIF (size_of_array(array_mapped) > 1) THEN

		multiple_maps_found = TRUE

		{ If here, relying on the analysis and test replicate to be set in the empower data }
		{ CV is different , know the test already }

		IF (is_cv) THEN

			j = 0

			WHILE (j < size_of_array(array_mapped)) DO
				
				j = j + 1
				IF (array_mapped[j,1]=cv_test_number) THEN

					testno_to_use = array_mapped [j, 1]
					comp_to_use = array_mapped [j, 2]
					empower_component_mapped = array_mapped [j, 3]

				ENDIF
				 
			ENDWHILE
		ELSE

			ARRAY new_array_mapped
			check_if_explicit_relicate (new_array_mapped, array_mapped, analysis_array)

			IF (size_of_array(new_array_mapped)=1) THEN

				j = 1
				testno_to_use = new_array_mapped [j, 1]
				comp_to_use = new_array_mapped [j, 2]
				empower_component_mapped = new_array_mapped [j, 3]

			ENDIF

		ENDIF

	ENDIF

	RETURN (ret)

ENDROUTINE

ROUTINE check_if_explicit_relicate (new_array_map, array_map, analysis_array)

	DECLARE i, j, is_ok, anal, test_count

	ARRAY new_array_map

	j = 0

	WHILE (j < size_of_array (array_map)) DO

		is_ok = FALSE

		j = j + 1
		anal = array_map [j,4]
		test_count = array_map [j,5]

		i = 0
		WHILE (NOT is_ok) AND
			(i < size_of_array(analysis_array)) DO

			i = i + 1

			IF ( STRIP(analysis_array[i,1]) = STRIP(anal) ) AND
			   ( STRIP(analysis_array[i,2]) = test_count ) THEN

				is_ok = TRUE

			ENDIF

		ENDWHILE

		IF (is_ok) THEN

			i = size_of_array (new_array_map) + 1
			new_array_map [i,1] = array_map [j,1]
			new_array_map [i,2] = array_map [j,2]
			new_array_map [i,3] = array_map [j,3]
			new_array_map [i,4] = array_map [j,4]
			new_array_map [i,5] = array_map [j,5]

		ENDIF

	ENDWHILE
	 
ENDROUTINE

ROUTINE is_peak_match (VALUE mapped_peak,  VALUE results_peak)

	DECLARE match

	match = FALSE

	IF (STRIP(results_peak) = "") THEN

		{ never mapped }

	ELSEIF (STRIP(mapped_peak) = "") THEN

		{ Allow the peak to be mapped if blank configured. Assumes 1 API }

		match = TRUE

	ELSEIF (STRIP(TOUPPER(mapped_peak)) = STRIP(TOUPPER(results_peak)))

		match = TRUE

	ENDIF

	RETURN (match)

ENDROUTINE

ROUTINE parse_result_id (VALUE full, runtype_repl, inj_no, peak, emp_field, analysis_array)

    { full is in the form e.g. CU1;<injection>;<peak>;<field>;
		<analysis1>;<test count1>;<analysis2>;<test count2> 
		<analysis3>;<test count3>;<analysis4>;<test count4> 
     }

	DECLARE i, delim, val, array_split

	runtype_repl = ""
	inj_no = 0
	peak = ""
	emp_field = ""
	ARRAY analysis_array  ARRAYSIZE (4,2)
	ARRAY array_split
	delim = ";"
	split (full, delim, array_split)

	i = 0

	WHILE (i < size_of_array (array_split)) DO

		i = i + 1

		IF (i=1) THEN
			runtype_repl = array_split [i]
		ELSEIF (i=2) THEN
			val = array_split [i]
			IF (NUMTEXT(val)) THEN
				inj_no = NUMERIC (val)
			ENDIF

		ELSEIF (i=3) THEN
			peak = array_split [i]
		ELSEIF (i=4) THEN
			emp_field = array_split [i]
		ELSEIF (i=5) THEN
			analysis_array [1,1] = TOUPPER(array_split [i])
		ELSEIF (i=6) THEN
			analysis_array [1,2] = TOUPPER(array_split [i])
		ELSEIF (i=7) THEN
			analysis_array [2,1] = TOUPPER(array_split [i])
		ELSEIF (i=8) THEN
			analysis_array [2,2] = TOUPPER(array_split [i])
		ELSEIF (i=9) THEN
			analysis_array [3,1] = TOUPPER(array_split [i])
		ELSEIF (i=10) THEN
			analysis_array [3,2] = TOUPPER(array_split [i])
		ELSEIF (i=11) THEN
			analysis_array [4,1] = TOUPPER(array_split [i])
		ELSEIF (i=12) THEN
			analysis_array [4,2] = TOUPPER(array_split [i])
		ENDIF

	ENDWHILE
	 
ENDROUTINE

ROUTINE split (VALUE full, VALUE delim, array_split)

	DECLARE i, val

	ARRAY array_split

	REPEAT

		i = INDEX (full, delim)

		IF (i>0) THEN
		
			val = STRIP(SUBSTRING (full, 1, i-1))
			full = STRIP(SUBSTRING (full, i+STRINGLENGTH(delim), (STRINGLENGTH(full)+1)-(i+STRINGLENGTH(delim))))

		ELSE
			val = full
			full = ""
		ENDIF

		array_split [size_of_array(array_split)+1] = STRIP(val)

	UNTIL (full = "")

ENDROUTINE

{ 
   cv_test_map_array is output
}
ROUTINE make_cv_results_array (VALUE project,  
			VALUE inst, array_tests, cv_test_map_array)

	DECLARE status, array_results, cnt_tests, cnt_cv, cnt_map

	status = EMPTY
	ARRAY cv_test_map_array

	{ get the results off the CV sample }
	ARRAY array_results
	cv_get_all_results (project, inst, array_results)

	{ make array with these results against each test that has a sample map }

	cnt_tests = 0

	WHILE (cnt_tests < size_of_array (array_tests)) DO

		cnt_tests = cnt_tests + 1

		IF ( array_tests [cnt_tests,4] ) THEN

			cnt_cv = 0

			WHILE (cnt_cv < size_of_array (array_results) ) DO

				cnt_cv = cnt_cv + 1

				cnt_map = size_of_array (cv_test_map_array) + 1

				{ runtype_repl, inj_no, peak, emp_field, result }
				cv_test_map_array [cnt_map,1 ] = "STD"
				split_cv_compname (array_results [cnt_cv,1],
						 cv_test_map_array [cnt_map,2 ], 
						 cv_test_map_array [cnt_map,4 ]     )
				cv_test_map_array [cnt_map,3 ] = array_results [cnt_cv,4] 
				cv_test_map_array [cnt_map,5 ] = array_results [cnt_cv,2] 
				cv_test_map_array [cnt_map,6 ] = array_tests [cnt_tests,1]
				cv_test_map_array [cnt_map,7 ] = array_results [cnt_cv,5]   { sampleset }
				cv_test_map_array [cnt_map,8 ] = array_results [cnt_cv,6]   { project }

			ENDWHILE

		ENDIF

	ENDWHILE

	RETURN (status)

ENDROUTINE

ROUTINE split_cv_compname (VALUE full, fld, inj)

	DECLARE i, indx, delim

	fld = ""
	inj = ""
	full = STRIP(full)
	indx=0
	delim = " "

	i = STRINGLENGTH (full) + 1
	WHILE (i>1) DO

		i = i - 1
		IF (GET_CHARACTER_AT(full,i)=delim) THEN

			indx = i
			i = 0

		ENDIF

	ENDWHILE

	i = indx
	fld = STRIP(SUBSTRING (full, 1, i-1))
	inj = SUBSTRING (full, i+STRINGLENGTH(delim), (STRINGLENGTH(full)+1)-(i+STRINGLENGTH(delim)))
	IF (NUM_TEXT(inj)) THEN
		inj = NUMERIC (inj)
	ENDIF

ENDROUTINE


ROUTINE write_to_cv_sample (VALUE proj, VALUE sset, VALUE inst, 
						VALUE result_id, VALUE result)

	DECLARE samp, test, comp, ptr_array, ptr_cnt, status_array, status, err_msg,
		runtype_repl, inj_no, peak, emp_field, analysis_array

	status = EMPTY
	test = 0
	ARRAY analysis_array

	{ result_id in form  STD;<injection>;<peak>;<field> }
	parse_result_id (result_id, runtype_repl, inj_no, peak, emp_field, analysis_array)

	samp = cv_ensure_sample_exists (proj, inst, sset)
	test = cv_ensure_test_exists (samp, peak,sset,proj)

	comp = STRIP(TOLOWER(emp_field)):" ":STRIP( NUMBER_TO_TEXT(inj_no,"999") )

	ARRAY ptr_array
	ptr_cnt = 1
	ptr_array [1,1]  = "component_name"
	ptr_array [1,2]  = "text"
	ptr_array [1,3]  = "mill_project"
	ptr_array [1,4]  = "empower_sampleset"
	ptr_cnt = 2
	ptr_array [ptr_cnt,1]  = comp
	ptr_array [ptr_cnt,2]  = result
	ptr_array [ptr_cnt,3]  = proj
	ptr_array [ptr_cnt,4]  = sset

	PUT_TEST_RESULTS test,  ptr_array ,status_array

	IF (status_array[1] <> EMPTY) THEN

		err_msg = make_error_string_from_ptr_status ( status_array, ptr_array )

		IF (STRIP(err_msg) <> "") THEN

			status = make_error_string_from_ptr_status ( status_array, ptr_array ) 

		ENDIF

	ENDIF

	RETURN (status)

ENDROUTINE

ROUTINE is_valid_cv_peak  (array_tests, 
			VALUE test_number,
			VALUE component_name_mapped, 
			VALUE peakname_mapped  )

	DECLARE i, ok
	
	ok = FALSE

	i = 0

	WHILE (NOT ok) AND
		(i < size_of_array (array_tests)) DO

		i = i + 1

		IF (test_number=array_tests [i,1]) AND
		(STRIP(TOUPPER(peakname_mapped))=STRIP(TOUPPER(array_tests [i,5]))) THEN
		
			ok = TRUE

		ENDIF

	ENDWHILE

	RETURN (ok)

ENDROUTINE


